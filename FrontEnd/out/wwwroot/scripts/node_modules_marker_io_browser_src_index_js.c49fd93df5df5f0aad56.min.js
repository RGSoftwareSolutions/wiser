"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["node_modules_marker_io_browser_src_index_js"],{

/***/ "../../node_modules/@marker.io/browser/src/index.js":
/*!**********************************************************!*\
  !*** ../../node_modules/@marker.io/browser/src/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* provided dependency */ var console = __webpack_require__(/*! ../../node_modules/node-polyfill-webpack-plugin/node_modules/console-browserify/index.js */ \"../../node_modules/node-polyfill-webpack-plugin/node_modules/console-browserify/index.js\");\n/**\n * Marker.io - https://marker.io\n * Browser loader for the Marker.io SDK\n */\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  loadWidget(params) {\n    // Warn if unknown params are provided\n    const knownParams = [\n      'destination',\n      'reporter',\n      'customShimUrl',\n      'customData',\n      'silent',\n      'source',\n      'ssr',\n      'extension',\n      'keyboardShortcuts',\n    ];\n\n    Object.keys(params).forEach((paramName) => {\n      if (!knownParams.includes(paramName)) {\n        console.warn('(Marker.io SDK) unknown param \"' + paramName + '\" (need to upgrade?)');\n      }\n    });\n\n    // Extract params\n    const { destination, reporter, customData, silent, ssr, extension, keyboardShortcuts } = params;\n\n    if (typeof destination !== 'string') {\n      throw new Error('destination must be a string');\n    }\n\n    if ('customData' in params && typeof customData !== 'object') {\n      throw new Error('customData must be an object');\n    }\n\n    if ('silent' in params && typeof silent !== 'boolean') {\n      throw new Error('silent must be a boolean');\n    }\n\n    if ('ssr' in params && typeof ssr !== 'object') {\n      throw new Error('ssr must be a boolean');\n    }\n\n    if ('extension' in params && typeof extension !== 'boolean' && typeof extension !== 'object') {\n      throw new Error('extension must be a boolean/object');\n    }\n\n    if ('keyboardShortcuts' in params && typeof keyboardShortcuts !== 'boolean') {\n      throw new Error('keyboardShortcuts must be a boolean');\n    }\n\n    if (window.Marker) {\n      // Only one Marker.io widget can be loaded at a time\n      window.Marker.unload();\n    }\n\n    window.markerConfig = {\n      destination,\n      reporter,\n      customData,\n      silent,\n      ssr,\n      extension,\n      keyboardShortcuts,\n      source: 'browser-sdk',\n    };\n\n    const __cs = [];\n    const sdk = { __cs };\n\n    for (const methodName of [\n      'show',\n      'hide',\n      'isVisible',\n      'capture',\n      'cancelCapture',\n      'unload',\n      'reload',\n      'isExtensionInstalled',\n      'setReporter',\n      'setCustomData',\n      'on',\n      'off',\n    ]) {\n      sdk[methodName] = function () {\n        const t = Array.prototype.slice.call(arguments);\n        t.unshift(methodName);\n        __cs.push(t);\n      };\n    }\n\n    window.Marker = sdk;\n\n    const script = document.createElement('script');\n    script.async = 1;\n    script.src = params.customShimUrl || 'https://edge.marker.io/latest/shim.js';\n\n    const anchorScript = document.getElementsByTagName('script')[0];\n    anchorScript.parentNode.insertBefore(script, anchorScript);\n\n    return new Promise((resolve, reject) => {\n      sdk.on('load', () => {\n        resolve(window.Marker);\n      });\n\n      sdk.on('loaderror', (error) => {\n        reject(error);\n      });\n\n      script.onerror = (error) => reject(error);\n    });\n  },\n});\n\n\n//# sourceURL=webpack:///../../node_modules/@marker.io/browser/src/index.js?");

/***/ })

}]);