/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "../../Modules/DataSelector/Scripts/Connection.js":
/*!********************************************************!*\
  !*** ../../Modules/DataSelector/Scripts/Connection.js ***!
  \********************************************************/
/***/ (() => {

eval("ï»¿((jQuery) => {\r\n    class Connection {\r\n        constructor(dataSelector, parentContainer, isMainConnection = false) {\r\n            this.dataSelector = dataSelector;\r\n            this.parentContainer = parentContainer;\r\n            this.isMainConnection = isMainConnection;\r\n\r\n            this.container = null;\r\n            this.scopesContainer = null;\r\n            this.linkedToDownContainer = null;\r\n            this.linkedToUpContainer = null;\r\n\r\n            this.availableProperties = [];\r\n            this.availableLinkProperties = [];\r\n        }\r\n\r\n        initialize() {\r\n            this.createHtml();\r\n            this.setInitialBindings();\r\n\r\n            // After creation, set the Connection object as a data element in the block.\r\n            $(this.container).data(\"connection\", this);\r\n        }\r\n\r\n        getPrefix() {\r\n            const parentConnection = this.parentContainer.closest(\".connectionBlock\");\r\n            if (parentConnection === null) {\r\n                return \"main_\";\r\n            }\r\n\r\n        }\r\n\r\n        createHtml() {\r\n            const block = $(document.getElementById(\"connectionTemplate\").innerHTML);\r\n            $(this.parentContainer).append(block);\r\n\r\n            if (this.isMainConnection) {\r\n                const linkFieldsItem = Array.from(block.get(0).querySelector(\".blockItems\").children).find(e => e.classList.contains(\"exportFieldsLinks\"));\r\n                if (linkFieldsItem instanceof HTMLElement) {\r\n                    linkFieldsItem.parentNode.removeChild(linkFieldsItem);\r\n                }\r\n            }\r\n\r\n            this.scopesContainer = block.find(\".scopesContainer\");\r\n            this.linkedToDownContainer = block.find(\".linkedToList.direction-down > .linkedToContainer\");\r\n            this.linkedToUpContainer = block.find(\".linkedToList.direction-up > .linkedToContainer\");\r\n\r\n            this.dataSelector.initializeKendoElements(block.get(0));\r\n\r\n            // Container should be a DOM element, so get the first element from the jQuery object.\r\n            this.container = block.get(0);\r\n        }\r\n\r\n        setInitialBindings() {\r\n            const containerElement = $(this.container).find(\".blockItems\");\r\n            containerElement.find(\".add-scope-button\").getKendoButton().bind(\"click\", () => {\r\n                this.addScope();\r\n            });\r\n            containerElement.find(\".linkedToList.direction-down .add-linked-to-button\").getKendoButton().bind(\"click\", () => {\r\n                this.addLinkedTo(\"down\");\r\n            });\r\n            containerElement.find(\".linkedToList.direction-up .add-linked-to-button\").getKendoButton().bind(\"click\", () => {\r\n                this.addLinkedTo(\"up\");\r\n            });\r\n\r\n            const selectDetails = containerElement.find(\"select.select-details\");\r\n            const selectDetailsWidget = selectDetails.getKendoMultiSelect();\r\n\r\n            selectDetailsWidget.bind(\"change\", () => {\r\n                document.dispatchEvent(new CustomEvent(\"entitySelectionUpdate\"));\r\n            });\r\n\r\n            selectDetailsWidget.wrapper.on(\"click\", \"span.k-chip\", (e) => {\r\n                const clickedElement = $(e.target);\r\n                if (clickedElement.closest(\"span.k-chip-remove-action\").length > 0) {\r\n                    return;\r\n                }\r\n\r\n                // This will select the tag itself (a li element).\r\n                const tagElement = $(e.currentTarget);\r\n\r\n                const index = tagElement.index();\r\n                const selectedDataItem = selectDetailsWidget.dataItems()[index];\r\n                const dataItem = selectDetailsWidget.dataSource.view().find((di) => {\r\n                    return di.value === selectedDataItem.value;\r\n                });\r\n\r\n                this.dataSelector.openFieldEditor(dataItem, {\r\n                    includeLanguageCodeField: !this.dataSelector.useExportMode\r\n                });\r\n            });\r\n\r\n            this.dataSelector.giveCustomClickLogic(selectDetailsWidget);\r\n\r\n            containerElement.find(\".item.scopesList\").on(\"click\", \"button.edit-field-button\", (e) => {\r\n                const button = $(e.currentTarget);\r\n                const propertyDropdown = button.closest(\".inputRow\").find(\"select.scope-property-select\").getKendoDropDownList();\r\n                this.dataSelector.openFieldEditor(propertyDropdown.dataItem(), {\r\n                    includeDataTypeField: true,\r\n                    includeLanguageCodeField: !this.dataSelector.useExportMode,\r\n                    includeFieldAliasField: false,\r\n                    includeIsItemIdField: false\r\n                });\r\n            });\r\n        }\r\n\r\n        setDynamicBindings(context) {\r\n            let containerElement;\r\n            if (context !== undefined && context !== null) {\r\n                containerElement = $(context);\r\n            } else {\r\n                containerElement = $(this.container).find(\".blockItems\");\r\n            }\r\n\r\n            // BUTTONS.\r\n            containerElement.find(\".or-button-scope\").on(\"click\", (e) => {\r\n                const newScope = this.addOrScope($(e.currentTarget).closest(\"section\"));\r\n                this.setAvailablePropertiesDataSources([newScope.querySelector(\"select.scope-property-select\")]);\r\n            });\r\n\r\n            containerElement.find(\".or-button-linked-to\").on(\"click\", (e) => {\r\n                let direction;\r\n\r\n                const linkedToList = $(e.currentTarget).closest(\".linkedToList\");\r\n                if (linkedToList.hasClass(\"direction-down\")) {\r\n                    direction = \"down\";\r\n                } else if (linkedToList.hasClass(\"direction-up\")) {\r\n                    direction = \"up\";\r\n                } else {\r\n                    return;\r\n                }\r\n\r\n                this.addOrLinkedTo($(e.currentTarget).closest(\"section\"), direction);\r\n            });\r\n\r\n            containerElement.find(\".delete-button\").getKendoButton().bind(\"click\", (e) => {\r\n                const cont = e.sender.element.closest(\"section\");\r\n\r\n                if (cont.find(\".inputRow\").length <= 1) {\r\n                    cont.remove();\r\n                } else {\r\n                    e.sender.element.closest(\".inputRow\").remove();\r\n                }\r\n            });\r\n\r\n            containerElement.find(\"select.scope-property-select\").each((i, elem) => {\r\n                const inputRow = $(elem).closest(\".inputRow\");\r\n                $(elem).getKendoDropDownList().bind(\"change\", () => {\r\n                    this.dataSelector.updateScopePropertyValueDataSource(inputRow);\r\n                });\r\n            });\r\n\r\n            containerElement.find(\"select.scope-comparison-select\").each((i, elem) => {\r\n                const dbInput = $(elem).closest(\".inputRow\");\r\n                $(elem).getKendoDropDownList().bind(\"change\", (e) => {\r\n                    const value = e.sender.value();\r\n\r\n                    switch (value) {\r\n                        case \"is equal to\":\r\n                        case \"is not equal to\":\r\n                            dbInput.find(\"span.scope-value-select\").show();\r\n                            dbInput.find(\"div.free-input\").hide();\r\n                            break;\r\n                        case \"is empty\":\r\n                        case \"is not empty\":\r\n                            dbInput.find(\"span.scope-value-select\").hide();\r\n                            dbInput.find(\"div.free-input\").hide();\r\n                            break;\r\n                        default:\r\n                            dbInput.find(\"span.scope-value-select\").hide();\r\n                            dbInput.find(\"div.free-input\").show();\r\n                            break;\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Updates entity properties list that are available for selection in the scopes and fields export list.\r\n         * @param {any} connectionBlock jQuery object of the relevant element that will have its properties updated. This is optional because the main connection doesn't need it.\r\n         */\r\n        async updateAvailableProperties(connectionBlock = null) {\r\n            if (!this.isMainConnection && !connectionBlock) {\r\n                return;\r\n            }\r\n\r\n            let entityType;\r\n            if (this.isMainConnection) {\r\n                entityType = this.dataSelector.selectedEntityType;\r\n            } else {\r\n                const linkedToPropertySelect = connectionBlock.data(\"linkedToPropertySelect\");\r\n                if (!linkedToPropertySelect) {\r\n                    return;\r\n                }\r\n\r\n                entityType = linkedToPropertySelect.dataItem().entityType;\r\n            }\r\n          \r\n            const response = await Wiser.api({\r\n                url: `${this.dataSelector.settings.wiserApiRoot}data-selectors/entity-properties/${entityType}/?forExportMode=${this.dataSelector.useExportMode}`\r\n            });\r\n          \r\n            // Create clone of \"response\" so it doesn't use the reference value, but a completely new object.\r\n            // Although it's also possible to use \"[...response]\", this JSON trick works better as it also clones deep properties.\r\n            this.availableProperties = JSON.parse(JSON.stringify(response));\r\n\r\n            this.availableProperties.splice(4, 0, {\r\n                value: \"item_ordering\",\r\n                entityName: entityType,\r\n                displayName: \"Ordering (van item)\",\r\n                propertyName: \"item_ordering\",\r\n                languageCode: \"\"\r\n            });\r\n\r\n            if (!this.isMainConnection) {\r\n                this.availableProperties.splice(5, 0, {\r\n                    value: \"link_ordering\",\r\n                    entityName: entityType,\r\n                    displayName: \"Ordering (van koppeling)\",\r\n                    propertyName: \"link_ordering\",\r\n                    languageCode: \"\"\r\n                });\r\n            }\r\n\r\n            // Create a \"unique value\" for every property, based on the normal value.\r\n            // A few inputs use this, like the group by input, order by input, and having inputs.\r\n            this.availableProperties.forEach((property) => {\r\n                // Initialize some additional properties.\r\n                property.aggregation = \"\";\r\n                property.formatting = \"\";\r\n                property.fieldAlias = \"\";\r\n                property.direction = \"ASC\";\r\n\r\n                // Initial value of the \"alias or value\" should just be the value.\r\n                property.aliasOrValue = property.value;\r\n            });\r\n        }\r\n\r\n        async updateAvailableLinkProperties(connectionBlock = null) {\r\n            if (!this.isMainConnection && !connectionBlock) {\r\n                return;\r\n            }\r\n\r\n            let linkType;\r\n            if (this.isMainConnection) {\r\n                linkType = this.dataSelector.selectedLinkType;\r\n            } else {\r\n                const linkedToPropertySelect = connectionBlock.data(\"linkedToPropertySelect\");\r\n                if (!linkedToPropertySelect) {\r\n                    return;\r\n                }\r\n\r\n                linkType = linkedToPropertySelect.dataItem().typeNumber;\r\n            }\r\n\r\n            const response = await Wiser.api({ url: `${this.dataSelector.settings.serviceRoot}/GET_ENTITY_LINK_PROPERTIES?linkType=${linkType}` });\r\n\r\n            // Create clone of \"response\" so it doesn't use the reference value, but a completely new object.\r\n            // Although it's also possible to use \"[...response]\", this JSON trick works better as it also clones deep properties.\r\n            this.availableLinkProperties = JSON.parse(JSON.stringify(response));\r\n\r\n            // Create a \"unique value\" for every property, based on the normal value.\r\n            // A few inputs use this, like the group by input, order by input, and having inputs.\r\n            this.availableLinkProperties.forEach((property) => {\r\n                property.aliasOrValue = property.value;\r\n            });\r\n        }\r\n\r\n        setAvailablePropertiesDataSources(elementsToUpdate) {\r\n            let elements;\r\n\r\n            if (elementsToUpdate instanceof NodeList) {\r\n                elements = Array.from(elementsToUpdate);\r\n            } else if (Wiser.validateArray(elementsToUpdate)) {\r\n                elements = elementsToUpdate;\r\n            } else if (elementsToUpdate instanceof jQuery && elementsToUpdate.length > 0) {\r\n                elements = elementsToUpdate.toArray();\r\n            } else {\r\n                return;\r\n            }\r\n\r\n            elements.forEach((element) => {\r\n                let widget = null;\r\n\r\n                switch (element.dataset.role) {\r\n                    case \"dropdownlist\":\r\n                        widget = $(element).getKendoDropDownList();\r\n                        break;\r\n                    case \"multiselect\":\r\n                        widget = $(element).getKendoMultiSelect();\r\n                        break;\r\n                }\r\n\r\n                if (!(widget instanceof kendo.ui.Widget)) {\r\n                    return;\r\n                }\r\n\r\n                this.dataSelector.updateWidgetDataSource(widget, this.availableProperties);\r\n            });\r\n        }\r\n\r\n        setAvailableLinkPropertiesDataSources(elementsToUpdate) {\r\n            let elements;\r\n\r\n            if (elementsToUpdate instanceof NodeList) {\r\n                elements = Array.from(elementsToUpdate);\r\n            } else if (Wiser.validateArray(elementsToUpdate)) {\r\n                elements = elementsToUpdate;\r\n            } else if (elementsToUpdate instanceof jQuery && elementsToUpdate.length > 0) {\r\n                elements = elementsToUpdate.toArray();\r\n            } else {\r\n                return;\r\n            }\r\n\r\n            elements.forEach((element) => {\r\n                let widget = null;\r\n\r\n                switch (element.dataset.role) {\r\n                    case \"dropdownlist\":\r\n                        widget = $(element).getKendoDropDownList();\r\n                        break;\r\n                    case \"multiselect\":\r\n                        widget = $(element).getKendoMultiSelect();\r\n                        break;\r\n                }\r\n\r\n                if (!(widget instanceof kendo.ui.Widget)) {\r\n                    return;\r\n                }\r\n\r\n                this.dataSelector.updateWidgetDataSource(widget, this.availableLinkProperties);\r\n            });\r\n        }\r\n\r\n        addOrScope(section) {\r\n            const elem = $(document.getElementById(\"addScopeTemplate\").innerHTML);\r\n            section.append(elem.get(0));\r\n            this.dataSelector.initializeKendoElements(elem.get(0));\r\n            this.setDynamicBindings(elem);\r\n\r\n            this.setAvailablePropertiesDataSources([elem.find(\"select.scope-property-select\").get(0)]);\r\n\r\n            return elem.get(0);\r\n        }\r\n\r\n        addScope() {\r\n            const newSection = $(`<section>${document.getElementById(\"addScopeTemplate\").innerHTML}</section>`);\r\n            this.scopesContainer.append(newSection);\r\n\r\n            this.dataSelector.initializeKendoElements(newSection.get(0));\r\n            this.setDynamicBindings(newSection);\r\n\r\n            this.setAvailablePropertiesDataSources([newSection.find(\"select.scope-property-select\").get(0)]);\r\n\r\n            return newSection.get(0);\r\n        }\r\n\r\n        addOrLinkedTo(section, direction) {\r\n            const elem = $(document.getElementById(\"addLinkedToTemplate\").innerHTML);\r\n            section.append(elem.get(0));\r\n            this.dataSelector.initializeKendoElements(elem.get(0));\r\n            this.setDynamicBindings(elem);\r\n            this.setLinkedToEvents(elem, direction);\r\n\r\n            return elem.get(0);\r\n        }\r\n\r\n        /**\r\n         * Adds a \"linked to\" dropdown.\r\n         * @param {string} direction Which direction this \"linked to\" dropdown should look. Can be either \"down\" or \"up\".\r\n         * @returns {HTMLElement} The newly made section.\r\n         */\r\n        addLinkedTo(direction) {\r\n            const newSection = $(`<section>${document.getElementById(\"addLinkedToTemplate\").innerHTML}</section>`);\r\n\r\n            switch (direction) {\r\n                case \"down\":\r\n                    this.linkedToDownContainer.append(newSection);\r\n                    break;\r\n                case \"up\":\r\n                    this.linkedToUpContainer.append(newSection);\r\n                    break;\r\n            }\r\n\r\n            this.dataSelector.initializeKendoElements(newSection.get(0));\r\n            this.setDynamicBindings(newSection);\r\n            this.setLinkedToEvents(newSection, direction);\r\n\r\n            return newSection.get(0);\r\n        }\r\n\r\n        setLinkedToEvents(context, direction) {\r\n            const selectElement = $(\"select.linked-to-property-select\", context);\r\n            const dropDown = selectElement.getKendoDropDownList();\r\n\r\n            dropDown.setDataSource({\r\n                transport: {\r\n                    read: (options) => {\r\n                        let selectedEntityType;\r\n                        const connectionBlock = selectElement.closest(\"div.connectionBlock\");\r\n                        if (connectionBlock.data(\"linkedToPropertySelect\")) {\r\n                            const dataItem = connectionBlock.data(\"linkedToPropertySelect\").dataItem();\r\n                            selectedEntityType = dataItem.entityType;\r\n                        } else {\r\n                            selectedEntityType = this.dataSelector.selectedEntityType;\r\n                        }\r\n\r\n                        let templateName = \"\";\r\n                        switch (direction) {\r\n                            case \"down\":\r\n                                templateName = \"GET_UNDERLYING_LINKED_TYPES\";\r\n                                break;\r\n                            case \"up\":\r\n                                templateName = \"GET_PARENT_LINKED_TYPES\";\r\n                                break;\r\n                        }\r\n\r\n                        if (templateName === \"\") {\r\n                            options.error();\r\n                            return;\r\n                        }\r\n\r\n                        Wiser.api({\r\n                            url: `${this.dataSelector.settings.serviceRoot}/${templateName}?entityName=${selectedEntityType}`,\r\n                            dataType: \"json\"\r\n                        }).then((result) => {\r\n                            const dataSource = [];\r\n                            const handledEntityTypes = [];\r\n\r\n                            result.forEach((entity) => {\r\n                                const typeNumber = entity.typeNumber;\r\n                                const linkName = entity.linkTypeName;\r\n                                const uniqueKey = `${typeNumber}_${linkName}`;\r\n                                if (linkName === \"\" || handledEntityTypes.includes(uniqueKey)) {\r\n                                    return;\r\n                                }\r\n\r\n                                dataSource.push({\r\n                                    inputType: \"sub-entities-grid\",\r\n                                    name: linkName,\r\n                                    type: entity.entityType,\r\n                                    entityType: entity.entityType,\r\n                                    typeNumber: entity.linkTypeNumber,\r\n                                    linkKey: uniqueKey\r\n                                });\r\n\r\n                                handledEntityTypes.push(uniqueKey);\r\n                            });\r\n                            options.success(dataSource);\r\n                        }).catch((result) => {\r\n                            options.error(result);\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n\r\n            dropDown.bind(\"cascade\", (e) => {\r\n                const options = e.sender.dataItem();\r\n                const inputRow = e.sender.element.closest(\".inputRow\");\r\n                const treeViewDiv = inputRow.find(\".checkTree\").eq(0);\r\n                const treeView = treeViewDiv.getKendoTreeView();\r\n\r\n                let connectionBlock = inputRow.get(0).querySelector(\"div.connectionBlock\");\r\n\r\n                if (e.sender.value === \"\") {\r\n                    // Hide tree view (there's nothing to show).\r\n                    treeView.setDataSource({ data: null });\r\n                    treeViewDiv.hide();\r\n\r\n                    // First destroy all Kendo widgets for safe removal.\r\n                    this.dataSelector.destroyChildKendoWidgets(connectionBlock);\r\n                    $(connectionBlock).remove();\r\n                } else {\r\n                    if (connectionBlock === undefined || connectionBlock === null) {\r\n                        connectionBlock = this.dataSelector.addConnection(inputRow.get(0)).container;\r\n                        $(connectionBlock).data(\"linkedToPropertySelect\", e.sender);\r\n                    }\r\n\r\n                    if (options.inputType === \"sub-entities-grid\") {\r\n                        // Hide tree view.\r\n                        treeView.setDataSource({ data: null });\r\n                        treeViewDiv.hide();\r\n                    } else {\r\n                        treeView.setDataSource({\r\n                            transport: {\r\n                                read: {\r\n                                    url: `${this.dataSelector.settings.serviceRoot}/GET_LINKED_TO_ITEMS?module=${options.moduleId}`,\r\n                                    dataType: \"json\"\r\n                                }\r\n                            },\r\n                            schema: {\r\n                                model: {\r\n                                    id: \"id\",\r\n                                    hasChildren: \"haschilds\"\r\n                                }\r\n                            }\r\n                        });\r\n                        treeViewDiv.show();\r\n                    }\r\n                }\r\n\r\n                // Update scopes and item select.\r\n                if (connectionBlock !== undefined && connectionBlock !== null && !$(connectionBlock).data(\"loading\")) {\r\n                    const connection = $(connectionBlock).data(\"connection\");\r\n                    connection.updateAvailableProperties($(connectionBlock)).then(() => {\r\n                        // Update the data sources of the scopes and field selection.\r\n                        const elements = Array.from(connectionBlock.querySelector(\".scopesContainer\").querySelectorAll(\"select.scope-property-select\"));\r\n                        elements.push(connectionBlock.querySelector(\"select.select-details\"));\r\n                        connection.setAvailablePropertiesDataSources(elements);\r\n                    });\r\n                    connection.updateAvailableLinkProperties($(connectionBlock)).then(() => {\r\n                        // Update the data sources of the scopes.\r\n                        const elements = [connectionBlock.querySelector(\"select.select-details-links\")];\r\n                        connection.setAvailableLinkPropertiesDataSources(elements);\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    window.Connection = Connection;\r\n})($);\n\n//# sourceURL=webpack:///../../Modules/DataSelector/Scripts/Connection.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["../../Modules/DataSelector/Scripts/Connection.js"]();
/******/ 	
/******/ })()
;