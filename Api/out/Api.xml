<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Api</name>
    </assembly>
    <members>
        <member name="T:Api.Core.Enums.DeleteLinksTypes">
            <summary>
            An enum for the number of columns of the delete links imported file.
            </summary>
        </member>
        <member name="F:Api.Core.Enums.DeleteLinksTypes.Single">
            <summary>
            Single column.
            </summary>
        </member>
        <member name="F:Api.Core.Enums.DeleteLinksTypes.Multiple">
            <summary>
            Two or more columns.
            </summary>
        </member>
        <member name="T:Api.Core.Enums.FtpModes">
            <summary>
            Enum for the FtpModes
            </summary>
        </member>
        <member name="F:Api.Core.Enums.FtpModes.Unsecure">
            <summary>
            Unsecure FTP mode
            </summary>
        </member>
        <member name="F:Api.Core.Enums.FtpModes.Ssl">
            <summary>
            FTP Mode with SSL
            </summary>
        </member>
        <member name="F:Api.Core.Enums.FtpModes.Sftp">
            <summary>
            FTP Mode with Sftp
            </summary>
        </member>
        <member name="T:Api.Core.Extensions.StringExtensions">
            <summary>
            A class that converts strings to JSON and back
            </summary>
        </member>
        <member name="M:Api.Core.Extensions.StringExtensions.MakeJsonPropertyName(System.String)">
            <summary>
            Makes sure that a string can be used as a JSON property by converting certain characters to placeholders.
            </summary>
            <param name="input">The input string to convert.</param>
            <returns>A string that can safely be used as a JSON property.</returns>
        </member>
        <member name="M:Api.Core.Extensions.StringExtensions.UnmakeJsonPropertyName(System.String)">
            <summary>
            Convert a string that was created by <see cref="M:Api.Core.Extensions.StringExtensions.MakeJsonPropertyName(System.String)"/> back into it's original form.
            </summary>
            <param name="input">The input string that was converted by <see cref="M:Api.Core.Extensions.StringExtensions.MakeJsonPropertyName(System.String)"/>.</param>
            <returns>The original string.</returns>
        </member>
        <member name="T:Api.Core.Filters.AuthorizeOperationFilter">
            <inheritdoc />
        </member>
        <member name="M:Api.Core.Filters.AuthorizeOperationFilter.Apply(Microsoft.OpenApi.Models.OpenApiOperation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <inheritdoc />
        </member>
        <member name="T:Api.Core.Helpers.IdentityHelpers">
            <summary>
            Helpers for (Claim)Identities
            </summary>
        </member>
        <member name="M:Api.Core.Helpers.IdentityHelpers.GetRoles(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Gets the role(s) from a <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see>.
            </summary>
            <param name="claimsIdentity">The <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see> to get the role from.</param>
            <returns>The role name as <see cref="T:System.String"/></returns>
        </member>
        <member name="M:Api.Core.Helpers.IdentityHelpers.HasRole(System.Security.Claims.ClaimsIdentity,System.String)">
            <summary>
            Checks if a <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see> contains a certain role.
            </summary>
            <param name="claimsIdentity">The <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see> to get the role from.</param>
            <param name="role">The name of the role.</param>
            <returns>The role name as <see cref="T:System.String"/></returns>
        </member>
        <member name="M:Api.Core.Helpers.IdentityHelpers.IsAdministrator(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Check whether a user has the administrator role.
            </summary>
            <param name="claimsIdentity">The <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see> of the user to check.</param>
            <returns>A boolean indicating whether the supplied <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see> contains the admin role.</returns>
        </member>
        <member name="M:Api.Core.Helpers.IdentityHelpers.IsAdminAccount(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Check whether a user has the AdminAccount role.
            </summary>
            <param name="claimsIdentity">The <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see> of the user to check.</param>
            <returns>A boolean indicating whether the supplied <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see> contains the admin role.</returns>
        </member>
        <member name="M:Api.Core.Helpers.IdentityHelpers.IsCustomer(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Check whether a user has the customer role.
            </summary>
            <param name="claimsIdentity">The <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see> of the user to check.</param>
            <returns>A boolean indicating whether the supplied <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see> contains the customer role.</returns>
        </member>
        <member name="M:Api.Core.Helpers.IdentityHelpers.IsUser(System.Security.Claims.ClaimsIdentity,System.String)">
            <summary>
            Check whether the authenticated user is the same as the given username.
            </summary>
            <param name="claimsIdentity"></param>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Core.Helpers.IdentityHelpers.GetName(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Get the name from a <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see>. For the username, use <see cref="M:Api.Core.Helpers.IdentityHelpers.GetUserName(System.Security.Claims.ClaimsIdentity,System.Boolean)"/> instead.
            </summary>
            <param name="claimsIdentity">The <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see> of the authenticated user.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Core.Helpers.IdentityHelpers.GetUserName(System.Security.Claims.ClaimsIdentity,System.Boolean)">
            <summary>
            Get the username from a <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see>.
            </summary>
            <param name="claimsIdentity">The <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see> of the authenticated user.</param>
            <param name="useAdminAccountNameIfAvailable">Optional: Set to <see langword="true"/> to get the username of the logged in admin account, if applicable.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Core.Helpers.IdentityHelpers.GetAdminUserName(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Get the admin username from a <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see>.
            If the user is not a Wiser admin account (from the main Wiser database), then this will return null.
            </summary>
            <param name="claimsIdentity">The <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see> of the authenticated user.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Core.Helpers.IdentityHelpers.GetEmailAddress(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Get the email address from a <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see>.
            </summary>
            <param name="claimsIdentity">The <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see> of the authenticated user.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Core.Helpers.IdentityHelpers.GetClientId(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Get the ID of a <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see>.
            </summary>
            <param name="claimsIdentity">The <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see> of the authenticated user.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Core.Helpers.IdentityHelpers.GetWiserUserId(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Get the ID of a <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see>.
            </summary>
            <param name="claimsIdentity">The <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see> of the authenticated user.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Core.Helpers.IdentityHelpers.GetWiserAdminId(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Get the admin ID of a <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see>.
            If the user is not a Wiser admin account (from the main Wiser database), then this will return 0.
            </summary>
            <param name="claimsIdentity">The <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see> of the authenticated user.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Core.Helpers.IdentityHelpers.GetSubDomain(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Get the sub domain from a <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see>.
            </summary>
            <param name="claimsIdentity">The <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see> of the authenticated user.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Core.Helpers.IdentityHelpers.IsTestEnvironment(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Get the sub domain from a <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see>.
            </summary>
            <param name="claimsIdentity">The <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see> of the authenticated user.</param>
            <returns></returns>
        </member>
        <member name="T:Api.Core.Helpers.ResourceHelpers">
            <summary>
            Helpers for embedded resources.
            </summary>
        </member>
        <member name="M:Api.Core.Helpers.ResourceHelpers.ReadTextResourceFromAssemblyAsync(System.String)">
            <summary>
            Get the contents from an embedded resource.
            Note that the build action for these files have to be set to "Embedded resource" before you can use this function.
            </summary>
            <param name="name">The fully qualified name to the file (e.g. Api.Modules.Babel.Scripts.Polyfills.babel.js).</param>
            <returns>The contents of the embedded resource.</returns>
        </member>
        <member name="T:Api.Core.Helpers.StringHelpers">
            <summary>
            Class that contains String helpers
            </summary>
        </member>
        <member name="M:Api.Core.Helpers.StringHelpers.CreateSha512Hash(System.String,System.String)">
            <summary>
            Create a SHA512 hash with a salt.
            </summary>
            <param name="input">The string to hash.</param>
            <param name="salt">The salt to use in the hash.</param>
            <returns>The SHA256 hash of input+salt.</returns>
        </member>
        <member name="T:Api.Core.Helpers.TypeHelpers">
            <summary>
            Class that contains Type Helpers
            </summary>
        </member>
        <member name="M:Api.Core.Helpers.TypeHelpers.IsNumericType(System.Type)">
            <summary>
            Checks if a given type is numeric or not
            </summary>
            <param name="type">Type what needs to be checked</param>
        </member>
        <member name="T:Api.Core.Interfaces.IApiReplacementsService">
            <summary>
            Service for doing specific Wiser API replacements on templates/queries.
            </summary>
        </member>
        <member name="M:Api.Core.Interfaces.IApiReplacementsService.DoIdentityReplacements(System.String,System.Security.Claims.ClaimsIdentity,System.Boolean)">
            <summary>
            Replace values from a ClaimsIdentity.
            </summary>
            <param name="input">The input string to do the replacements on.</param>
            <param name="identity">The ClaimsIdentity.</param>
            <param name="forQuery">Optional: Set to <see langword="true"/> to make all replaced values safe against SQL injection.</param>
            <returns>The string with the replaced values.</returns>
        </member>
        <member name="T:Api.Core.Interfaces.IDatabaseGrantsService">
            <summary>
            Service for storing grants from IdentityServer4 in the database.
            </summary>
        </member>
        <member name="M:Api.Core.Interfaces.IDatabaseGrantsService.GetAsync(System.String)">
            <summary>
            Gets a single grant from database, based on the unique key.
            </summary>
            <param name="key">The unique key of the grant.</param>
            <returns>The PersistedGrant.</returns>
        </member>
        <member name="M:Api.Core.Interfaces.IDatabaseGrantsService.GetAllAsync(IdentityServer4.Stores.PersistedGrantFilter)">
            <summary>
            Gets all grants with filters.
            </summary>
            <param name="filter">The filters.</param>
            <returns>An IEnumerable with the results.</returns>
        </member>
        <member name="M:Api.Core.Interfaces.IDatabaseGrantsService.CreateAsync(IdentityServer4.Models.PersistedGrant)">
            <summary>
            Adds a new grant to the database.
            </summary>
            <param name="grant">The PersistedGrant to save.</param>
        </member>
        <member name="M:Api.Core.Interfaces.IDatabaseGrantsService.UpdateAsync(System.String,IdentityServer4.Models.PersistedGrant)">
            <summary>
            Adds a new grant to the database.
            </summary>
            <param name="key">The unique key of the grant.</param>
            <param name="grant">The PersistedGrant to save.</param>
        </member>
        <member name="M:Api.Core.Interfaces.IDatabaseGrantsService.DeleteAsync(System.String)">
            <summary>
            Deletes a grant from the database.
            </summary>
            <param name="key">The unique key of the grant.</param>
        </member>
        <member name="M:Api.Core.Interfaces.IDatabaseGrantsService.DeleteAllAsync(IdentityServer4.Stores.PersistedGrantFilter)">
            <summary>
            Deletes multiple grants from the database, based on given filters.
            </summary>
            <param name="filter">The filters.</param>
        </member>
        <member name="T:Api.Core.Interfaces.IJsonService">
            <summary>
            A services for doing things with JSON string / objects.
            </summary>
        </member>
        <member name="M:Api.Core.Interfaces.IJsonService.EncryptValuesInJson(Newtonsoft.Json.Linq.JToken,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Encrypt values of certain properties in a JSON object.
            This will go recursively through the entire object to encrypt all properties with names that are set in the web.config.
            </summary>
            <param name="jsonObject">The JSON object.</param>
            <param name="encryptionKey">The encryption key to use.</param>
            <param name="extraPropertiesToEncrypt">Optional: If you need to encrypt any extra properties, that are not in the web.config, you can enter them here.</param>
        </member>
        <member name="T:Api.Core.Models.AdminAccountModel">
            <summary>
            A model for an admin account.
            </summary>
        </member>
        <member name="P:Api.Core.Models.AdminAccountModel.Id">
            <summary>
            Gets or sets the ID.
            </summary>
        </member>
        <member name="P:Api.Core.Models.AdminAccountModel.EncryptedId">
            <summary>
            Gets or sets the encrypted ID.
            </summary>
        </member>
        <member name="P:Api.Core.Models.AdminAccountModel.Login">
            <summary>
            Gets or sets the login name / e-mail address.
            </summary>
        </member>
        <member name="P:Api.Core.Models.AdminAccountModel.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Api.Core.Models.AdminAccountModel.Active">
            <summary>
            Gets or sets whether this admin account is active and should be allowed to login.
            </summary>
        </member>
        <member name="P:Api.Core.Models.AdminAccountModel.TotpAuthentication">
            <summary>
            Gets or sets the TOTP settings (2FA).
            </summary>
        </member>
        <member name="M:Api.Core.Models.AdminAccountModel.FromDataRow(System.Data.DataRow)">
            <summary>
            Convert a <see cref="T:System.Data.DataRow"/> to an <see cref="T:Api.Core.Models.AdminAccountModel"/>.
            </summary>
            <param name="dataRow">The <see cref="T:System.Data.DataRow"/> to convert.</param>
            <returns></returns>
        </member>
        <member name="T:Api.Core.Models.ApiSettings">
            <summary>
            A model with settings for the API. This is meant to be used with the IOptions pattern.
            </summary>
        </member>
        <member name="P:Api.Core.Models.ApiSettings.AdminUsersEncryptionKey">
            <summary>
            Gets or sets the encryption key for encrypting and decrypting admin user IDs.
            </summary>
        </member>
        <member name="P:Api.Core.Models.ApiSettings.DatabasePasswordEncryptionKey">
            <summary>
            Gets or sets the encryption key for encrypting and decrypting the database password that is saved in easy_customers.
            </summary>
        </member>
        <member name="P:Api.Core.Models.ApiSettings.MaximumLoginAttemptsForUsers">
            <summary>
            Gets or sets the maximum number of times a user can attempt to login, before their IP address gets blocked.
            </summary>
        </member>
        <member name="P:Api.Core.Models.ApiSettings.MaximumLoginAttemptsForAdmins">
            <summary>
            Gets or sets the maximum number of times an admin can attempt to login, before their IP address gets blocked.
            </summary>
        </member>
        <member name="P:Api.Core.Models.ApiSettings.JsonPropertiesToAlwaysEncrypt">
            <summary>
            Gets or sets the properties that always need to be encrypted in JSON options objects, for fields and such.
            </summary>
        </member>
        <member name="P:Api.Core.Models.ApiSettings.DefaultUsersCacheDuration">
            <summary>
            The amount of time to cache results from functions of <see cref="T:Api.Modules.Customers.Interfaces.IUsersService"/> and <see cref="T:Api.Modules.Customers.Interfaces.IWiserCustomersService"/>.
            </summary>
        </member>
        <member name="P:Api.Core.Models.ApiSettings.PusherAppId">
            <summary>
            The app ID used for the Pusher server.
            </summary>
        </member>
        <member name="P:Api.Core.Models.ApiSettings.PusherAppKey">
            <summary>
            The app key used for the Pusher server. 
            </summary>
        </member>
        <member name="P:Api.Core.Models.ApiSettings.PusherAppSecret">
            <summary>
            The app secret used for the Pusher server.
            </summary>
        </member>
        <member name="P:Api.Core.Models.ApiSettings.PusherSalt">
            <summary>
            The salt used to hash user ID for the Pusher server.
            </summary>
        </member>
        <member name="P:Api.Core.Models.ApiSettings.MainSubDomain">
            <summary>
            The sub domain that should be used to login to the main wiser database (the one that contains the table "easy_customers"), when using multi tenancy.
            This value is not used when not using multi tenancy.
            </summary>
        </member>
        <member name="P:Api.Core.Models.ApiSettings.SigningCredentialCertificate">
            <summary>
            The fully qualified name of the certificate in the store of the server, of the certificate to use for IdentityServer4 (OAUTH2) authentication.
            </summary>
        </member>
        <member name="P:Api.Core.Models.ApiSettings.UseTerserForTemplateScriptMinification">
            <summary>
            Gets or sets whether the NPM package 'terser' should be used when minifying scripts saved in the templates module.
            </summary>
        </member>
        <member name="T:Api.Core.Models.ConfigureIdentityServer">
            <summary>
            Class with methods for configuring a Identity Server
            </summary>
        </member>
        <member name="M:Api.Core.Models.ConfigureIdentityServer.GetIdentityResources">
            <summary>
            Get the resources needed for the Identity Server
            </summary>
        </member>
        <member name="M:Api.Core.Models.ConfigureIdentityServer.GetApiResources(System.String)">
            <summary>
            Gets the API resources that are needed.
            </summary>
            <param name="clientSecret">The client secret needed for authentication</param>
            <returns></returns>
        </member>
        <member name="M:Api.Core.Models.ConfigureIdentityServer.GetApiScopes">
            <summary>
            Gets the needed scopes for the API
            </summary>
        </member>
        <member name="M:Api.Core.Models.ConfigureIdentityServer.GetClients(System.String)">
            <summary>
            Gets the needed clients
            </summary>
            <param name="clientSecret">The clientSecret needed for authentication</param>
            <returns></returns>
        </member>
        <member name="T:Api.Core.Models.FtpSettingsModel">
            <summary>
            A model for settings for an FTP server.
            </summary>
        </member>
        <member name="P:Api.Core.Models.FtpSettingsModel.Host">
            <summary>
            The Host of the FTP server
            </summary>
        </member>
        <member name="P:Api.Core.Models.FtpSettingsModel.Mode">
            <summary>
            The Mode of the FTP server
            </summary>
        </member>
        <member name="P:Api.Core.Models.FtpSettingsModel.Username">
            <summary>
            The username needed for the FTP server
            </summary>
        </member>
        <member name="P:Api.Core.Models.FtpSettingsModel.Password">
            <summary>
            The password needed for the FTP server
            </summary>
        </member>
        <member name="P:Api.Core.Models.FtpSettingsModel.RootDirectory">
            <summary>
            The root directory for the FTP server
            </summary>
        </member>
        <member name="T:Api.Core.Models.HttpContextConstants">
            <summary>
            Class for Http Context Constants
            </summary>
        </member>
        <member name="F:Api.Core.Models.HttpContextConstants.SubDomainKey">
            <summary>
            The key for saving sub domain in the http context.
            </summary>
        </member>
        <member name="F:Api.Core.Models.HttpContextConstants.SelectedUserKey">
            <summary>
            The key for saving the selected Wiser user, for when an admin account is logging in as someone else.
            </summary>
        </member>
        <member name="F:Api.Core.Models.HttpContextConstants.IsTestEnvironmentKey">
            <summary>
            The key for indicating whether or not someone is logging in via a test environment.
            </summary>
        </member>
        <member name="F:Api.Core.Models.HttpContextConstants.TotpPinKey">
            <summary>
            The key for the TOTP PIN that the user needs to enter when 2FA is enabled.
            </summary>
        </member>
        <member name="F:Api.Core.Models.HttpContextConstants.TotpBackupCodeKey">
            <summary>
            The key for the TOTP backup code that the user needs to enter when 2FA is enabled and they lost access to their authenticator app.
            </summary>
        </member>
        <member name="T:Api.Core.Models.IdentityConstants">
            <summary>
            Class for the constants of an Identity
            </summary>
        </member>
        <member name="F:Api.Core.Models.IdentityConstants.TokenIdentifierKey">
            <summary>
            The key used to save the token identifier.
            </summary>
        </member>
        <member name="F:Api.Core.Models.IdentityConstants.AdministratorRole">
            <summary>
            The name of the administrator role.
            </summary>
        </member>
        <member name="F:Api.Core.Models.IdentityConstants.CustomerRole">
            <summary>
            The name of the customer role.
            </summary>
        </member>
        <member name="F:Api.Core.Models.IdentityConstants.CustomerOrAdminRole">
            <summary>
            The names of the customer and admin roles.
            </summary>
        </member>
        <member name="F:Api.Core.Models.IdentityConstants.AdminAccountRole">
            <summary>
            The name for the admin accounts role.
            </summary>
        </member>
        <member name="F:Api.Core.Models.IdentityConstants.AdminAccountName">
            <summary>
            The key for saving the admin account name.
            </summary>
        </member>
        <member name="T:Api.Core.Models.PagedRequest">
            <summary>
            A model for a request to the API for a single page.
            </summary>
        </member>
        <member name="P:Api.Core.Models.PagedRequest.Page">
            <summary>
            Gets or sets the page number to get.
            </summary>
        </member>
        <member name="P:Api.Core.Models.PagedRequest.PageSize">
            <summary>
            Gets or sets the amount of items per page.
            </summary>
        </member>
        <member name="T:Api.Core.Models.PagedResults`1">
            <summary>
            A model for returning paged results.
            </summary>
            <typeparam name="T">The type of result to return.</typeparam>
        </member>
        <member name="P:Api.Core.Models.PagedResults`1.PageNumber">
            <summary>
            The page number this page represents. 
            </summary>
        </member>
        <member name="P:Api.Core.Models.PagedResults`1.PageSize">
            <summary> 
            The size of this page. 
            </summary> 
        </member>
        <member name="P:Api.Core.Models.PagedResults`1.TotalNumberOfPages">
            <summary> 
            The total number of pages available. 
            </summary> 
        </member>
        <member name="P:Api.Core.Models.PagedResults`1.TotalNumberOfRecords">
            <summary> 
            The total number of records available. 
            </summary> 
        </member>
        <member name="P:Api.Core.Models.PagedResults`1.PreviousPageUrl">
            <summary> 
            The URL to the next page - if null, there are no more pages. 
            </summary> 
        </member>
        <member name="P:Api.Core.Models.PagedResults`1.NextPageUrl">
            <summary> 
            The URL to the next page - if null, there are no more pages. 
            </summary> 
        </member>
        <member name="P:Api.Core.Models.PagedResults`1.Results">
            <summary> 
            The records this page represents. 
            </summary> 
        </member>
        <member name="T:Api.Core.Models.SimpleKeyValueModel">
            <summary>
            This class describes a Simple Key Value Model
            </summary>
        </member>
        <member name="P:Api.Core.Models.SimpleKeyValueModel.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:Api.Core.Models.SimpleKeyValueModel.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:Api.Core.Services.ApiReplacementsService">
            <inheritdoc cref="T:Api.Core.Interfaces.IApiReplacementsService" />
        </member>
        <member name="M:Api.Core.Services.ApiReplacementsService.#ctor(GeeksCoreLibrary.Modules.GclReplacements.Interfaces.IStringReplacementsService)">
            <summary>
            Creates a new instance of ApiReplacementsService.
            </summary>
        </member>
        <member name="M:Api.Core.Services.ApiReplacementsService.DoIdentityReplacements(System.String,System.Security.Claims.ClaimsIdentity,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Api.Core.Services.ClientDatabaseConnection">
            <summary>
            This is meant to be used as a decorator pattern. This will use the original <see cref="T:GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection"/> to access the main Wiser database and find the customer's info in easy_customers.
            It will then create a new connection string for that customer and open a connection to that database. This means that using this class, you will always have access to the customer database.
            </summary>
        </member>
        <member name="F:Api.Core.Services.ClientDatabaseConnection.WiserDatabaseConnection">
            <summary>
            A connection object to the Wiser Database.
            </summary>
        </member>
        <member name="M:Api.Core.Services.ClientDatabaseConnection.#ctor(GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection,Microsoft.Extensions.Options.IOptions{GeeksCoreLibrary.Core.Models.GclSettings},Microsoft.Extensions.Options.IOptions{Api.Core.Models.ApiSettings},Microsoft.AspNetCore.Http.IHttpContextAccessor,Microsoft.Extensions.Logging.ILogger{Api.Core.Services.ClientDatabaseConnection})">
            <summary>
            Creates a new instance of <see cref="T:Api.Core.Services.ClientDatabaseConnection"/>.
            </summary>
        </member>
        <member name="M:Api.Core.Services.ClientDatabaseConnection.HasActiveTransaction">
            <inheritdoc />
        </member>
        <member name="P:Api.Core.Services.ClientDatabaseConnection.ConnectedDatabase">
            <inheritdoc />
        </member>
        <member name="P:Api.Core.Services.ClientDatabaseConnection.ConnectedDatabaseForWriting">
            <inheritdoc />
        </member>
        <member name="M:Api.Core.Services.ClientDatabaseConnection.IsMainDatabase">
            <summary>
            Get whether or not the current sub domain is empty or the sub domain of the main Wiser database.
            </summary>
        </member>
        <member name="M:Api.Core.Services.ClientDatabaseConnection.GetClientConnectionStringAsync(System.String)">
            <summary>
            Gets the connection string for the customer/client database. At least one of the parameters must contain a value.
            </summary>
            <param name="subDomain">The Wiser sub domain for the client/customer. You can leave this empty or set the value to "main", to get the connection string for the Wiser database.</param>
            <returns>The connection string for the customer/client database.</returns>
        </member>
        <member name="M:Api.Core.Services.ClientDatabaseConnection.GetReaderAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Core.Services.ClientDatabaseConnection.GetAsync(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Core.Services.ClientDatabaseConnection.GetAsJsonAsync(System.String,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Core.Services.ClientDatabaseConnection.ExecuteAsync(System.String,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Core.Services.ClientDatabaseConnection.ExecuteAsync(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Executes a query and returns the amount of rows affected.
            </summary>
            <param name="query"></param>
            <param name="retryCount">How many times the query has been attempted.</param>
            <param name="useWritingConnectionIfAvailable"></param>
            <param name="cleanUp">Clean up after the query has been completed.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Core.Services.ClientDatabaseConnection.InsertOrUpdateRecordBasedOnParametersAsync``1(System.String,``0,System.String,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Core.Services.ClientDatabaseConnection.InsertRecordAsync(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Core.Services.ClientDatabaseConnection.BeginTransactionAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Core.Services.ClientDatabaseConnection.CommitTransactionAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Core.Services.ClientDatabaseConnection.RollbackTransactionAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Core.Services.ClientDatabaseConnection.ClearParameters">
            <inheritdoc />
        </member>
        <member name="M:Api.Core.Services.ClientDatabaseConnection.AddParameter(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Api.Core.Services.ClientDatabaseConnection.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:Api.Core.Services.ClientDatabaseConnection.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Api.Core.Services.ClientDatabaseConnection.EnsureOpenConnectionForReadingAsync">
            <summary>
            If the connection is not open yet, open it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Core.Services.ClientDatabaseConnection.EnsureOpenConnectionForWritingAsync">
            <summary>
            If the connection is not open yet, open it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Core.Services.ClientDatabaseConnection.ChangeConnectionStringsAsync(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Core.Services.ClientDatabaseConnection.GetDatabaseNameForCaching(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Core.Services.ClientDatabaseConnection.SetCommandTimeout(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Core.Services.ClientDatabaseConnection.AddConnectionOpenLogAsync(System.Boolean)">
            <summary>
            Add a mention to the log table that a connection to the database has been opened.
            </summary>
            <param name="isWriteConnection">Is this a write connection (true) or a read connection (false)?</param>
        </member>
        <member name="M:Api.Core.Services.ClientDatabaseConnection.AddConnectionCloseLogAsync(System.Boolean,System.Boolean)">
            <summary>
            Add a mention to the log table that a connection to the database has been closed.
            </summary>
            <param name="isWriteConnection">Is this a write connection (true) or a read connection (false)?</param>
            <param name="disposeConnection">Set to true to dispose the connection at the end.</param>
        </member>
        <member name="T:Api.Core.Services.DatabaseGrantsService">
            <inheritdoc cref="T:Api.Core.Interfaces.IDatabaseGrantsService"/>
        </member>
        <member name="M:Api.Core.Services.DatabaseGrantsService.#ctor(GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection,GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseHelpersService)">
            <summary>
            Creates a new instance of DatabaseGrantsService.
            </summary>
        </member>
        <member name="M:Api.Core.Services.DatabaseGrantsService.GetAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Core.Services.DatabaseGrantsService.GetAllAsync(IdentityServer4.Stores.PersistedGrantFilter)">
            <inheritdoc />
        </member>
        <member name="M:Api.Core.Services.DatabaseGrantsService.CreateAsync(IdentityServer4.Models.PersistedGrant)">
            <inheritdoc />
        </member>
        <member name="M:Api.Core.Services.DatabaseGrantsService.UpdateAsync(System.String,IdentityServer4.Models.PersistedGrant)">
            <inheritdoc />
        </member>
        <member name="M:Api.Core.Services.DatabaseGrantsService.DeleteAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Core.Services.DatabaseGrantsService.DeleteAllAsync(IdentityServer4.Stores.PersistedGrantFilter)">
            <inheritdoc />
        </member>
        <member name="T:Api.Core.Services.DatabaseGrantStore">
            <summary>
            A store for saving grants from IdentityServer4 into the database.
            </summary>
        </member>
        <member name="M:Api.Core.Services.DatabaseGrantStore.#ctor(Microsoft.Extensions.Logging.ILogger{Api.Core.Services.DatabaseGrantStore},Api.Core.Interfaces.IDatabaseGrantsService,Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            Creates a new instance of DatabaseGrantStore.
            </summary>
        </member>
        <member name="M:Api.Core.Services.DatabaseGrantStore.StoreAsync(IdentityServer4.Models.PersistedGrant)">
            <inheritdoc />
        </member>
        <member name="M:Api.Core.Services.DatabaseGrantStore.GetAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Core.Services.DatabaseGrantStore.GetAllAsync(IdentityServer4.Stores.PersistedGrantFilter)">
            <inheritdoc />
        </member>
        <member name="M:Api.Core.Services.DatabaseGrantStore.RemoveAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Core.Services.DatabaseGrantStore.RemoveAllAsync(IdentityServer4.Stores.PersistedGrantFilter)">
            <inheritdoc />
        </member>
        <member name="T:Api.Core.Services.JsonService">
            <inheritdoc cref="T:Api.Core.Interfaces.IJsonService" />
        </member>
        <member name="M:Api.Core.Services.JsonService.#ctor(Microsoft.Extensions.Options.IOptions{Api.Core.Models.ApiSettings})">
            <summary>
            Creates a new instance of JsonService.
            </summary>
        </member>
        <member name="M:Api.Core.Services.JsonService.EncryptValuesInJson(Newtonsoft.Json.Linq.JToken,System.String,System.Collections.Generic.List{System.String})">
            <inheritdoc />
        </member>
        <member name="T:Api.Core.Services.ServiceResult`1">
            <summary>
            A class to be used in services, to work with <see cref="T:System.Net.Http.HttpResponseMessage">HttpResponseMessages</see>.
            </summary>
            <typeparam name="T">The type that will be returned by the method in the service.</typeparam>
        </member>
        <member name="P:Api.Core.Services.ServiceResult`1.ModelObject">
            <summary>
            The actual result of the method.
            </summary>
        </member>
        <member name="P:Api.Core.Services.ServiceResult`1.StatusCode">
            <summary>
            The <see cref="T:System.Net.HttpStatusCode">StatusCode</see> to be returned to the client.
            </summary>
        </member>
        <member name="P:Api.Core.Services.ServiceResult`1.ErrorMessage">
            <summary>
            The detailed error message to be returned tot he client. Leave empty if there is no error.
            </summary>
        </member>
        <member name="M:Api.Core.Services.ServiceResult`1.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Api.Core.Services.ServiceResult`1">ServiceResult</see>.
            </summary>
        </member>
        <member name="M:Api.Core.Services.ServiceResult`1.#ctor(`0)">
            <summary>
            Initialize a new instance of the <see cref="T:Api.Core.Services.ServiceResult`1">ServiceResult</see> and set the <see cref="P:Api.Core.Services.ServiceResult`1.ModelObject">ModelObject</see>.
            </summary>
            <param name="modelObject"></param>
        </member>
        <member name="M:Api.Core.Services.ServiceResult`1.GetHttpResponseMessage(System.String)">
            <summary>
            Generate a <see cref="T:System.Net.Http.HttpResponseMessage">HttpResponseMessage</see> that can be directly returned by the Controller.
            </summary>
            <returns>The <see cref="T:System.Net.Http.HttpResponseMessage">HttpResponseMessage</see> to be used by the controller.</returns>
        </member>
        <member name="T:Api.Core.Services.WiserGrantValidator">
            <summary>
            Service for validating OAUTH2 grants via the database of the customer.
            </summary>
        </member>
        <member name="M:Api.Core.Services.WiserGrantValidator.#ctor(Microsoft.Extensions.Logging.ILogger{Api.Core.Services.WiserGrantValidator},Api.Modules.Customers.Interfaces.IUsersService,Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            Creates a new instance of <see cref="T:Api.Core.Services.WiserGrantValidator"/>.
            </summary>
            <param name="logger"></param>
            <param name="usersService"></param>
            <param name="httpContextAccessor"></param>
        </member>
        <member name="M:Api.Core.Services.WiserGrantValidator.ValidateAsync(IdentityServer4.Validation.ResourceOwnerPasswordValidationContext)">
            <inheritdoc />
        </member>
        <member name="T:Api.Core.Services.WiserProfileService">
            <inheritdoc />
        </member>
        <member name="M:Api.Core.Services.WiserProfileService.GetProfileDataAsync(IdentityServer4.Models.ProfileDataRequestContext)">
            <inheritdoc />
        </member>
        <member name="M:Api.Core.Services.WiserProfileService.IsActiveAsync(IdentityServer4.Models.IsActiveContext)">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.ApiConnections.Controllers.ApiConnectionsController">
            <summary>
            Controller for CRUD operations for Wiser API connections.
            </summary>
        </member>
        <member name="M:Api.Modules.ApiConnections.Controllers.ApiConnectionsController.#ctor(Api.Modules.ApiConnections.Interfaces.IApiConnectionsService)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.ApiConnections.Controllers.ApiConnectionsController"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.ApiConnections.Controllers.ApiConnectionsController.GetSettingsAsync(System.Int32)">
            <summary>
            Gets the settings for communicating with an external API.
            </summary>
            <param name="id">The ID of the API settings.</param>
            <returns>An <see cref="T:Api.Modules.ApiConnections.Models.ApiConnectionModel">ApiConnectionModel</see> with the settings.</returns>
        </member>
        <member name="T:Api.Modules.ApiConnections.Interfaces.IApiConnectionsService">
            <summary>
            A service for communication with external APIs and for getting/saving settings for it.
            </summary>
        </member>
        <member name="M:Api.Modules.ApiConnections.Interfaces.IApiConnectionsService.GetSettingsAsync(System.Security.Claims.ClaimsIdentity,System.Int32)">
            <summary>
            Gets the settings for communicating with an external API.
            </summary>
            <param name="identity">The authenticated user.</param>
            <param name="id">The ID of the API settings.</param>
            <returns>An <see cref="T:Api.Modules.ApiConnections.Models.ApiConnectionModel">ApiConnectionModel</see> with the settings.</returns>
        </member>
        <member name="T:Api.Modules.ApiConnections.Models.ApiConnectionModel">
            <summary>
            A model with settings for communication with an external API.
            </summary>
        </member>
        <member name="P:Api.Modules.ApiConnections.Models.ApiConnectionModel.Id">
            <summary>
            Gets or sets the ID of the connection.
            </summary>
        </member>
        <member name="P:Api.Modules.ApiConnections.Models.ApiConnectionModel.Options">
            <summary>
            Gets or sets the options for the external API.
            </summary>
        </member>
        <member name="P:Api.Modules.ApiConnections.Models.ApiConnectionModel.AuthenticationData">
            <summary>
            Gets or sets the data/options that are needed for authenticating with the external API.
            </summary>
        </member>
        <member name="T:Api.Modules.ApiConnections.Services.ApiConnectionsService">
            <inheritdoc cref="T:Api.Modules.ApiConnections.Interfaces.IApiConnectionsService" />
        </member>
        <member name="M:Api.Modules.ApiConnections.Services.ApiConnectionsService.#ctor(Api.Modules.Customers.Interfaces.IWiserCustomersService,GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection,Api.Core.Interfaces.IJsonService)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.ApiConnections.Services.ApiConnectionsService"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.ApiConnections.Services.ApiConnectionsService.GetSettingsAsync(System.Security.Claims.ClaimsIdentity,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.Babel.Controllers.BabelController">
            <summary>
            A controller for Babel actions, such as converting javascript to work with older browsers.
            </summary>
        </member>
        <member name="M:Api.Modules.Babel.Controllers.BabelController.#ctor(Api.Modules.Babel.Interfaces.IBabelService)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.Babel.Controllers.BabelController"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.Babel.Controllers.BabelController.ConvertJavascriptAsync(Api.Modules.Babel.Models.RequestModel)">
            <summary>
            Converts javascript, using Babel, to make it work in older browsers. This will convert ES6 code to ES5 and will add polyfills for functions that old browsers don't have built in support for.
            </summary>
            <param name="options">The content to convert and any additional options.</param>
        </member>
        <member name="T:Api.Modules.Babel.Interfaces.IBabelService">
            <summary>
            A service for using Babel to convert Javascript.
            </summary>
        </member>
        <member name="M:Api.Modules.Babel.Interfaces.IBabelService.ConvertJavascriptAsync(Api.Modules.Babel.Models.RequestModel)">
            <summary>
            Converts javascript, using Babel, to make it work in older browsers. This will convert ES6 code to ES5 and will add polyfills for functions that old browsers don't have built in support for.
            </summary>
            <param name="options">The content to convert and any additional options.</param>
        </member>
        <member name="T:Api.Modules.Babel.Models.RequestModel">
            <summary>
            A model for a Babel conversion request.
            </summary>
        </member>
        <member name="P:Api.Modules.Babel.Models.RequestModel.Content">
            <summary>
            Gets or sets the content to convert with Babel.
            </summary>
        </member>
        <member name="P:Api.Modules.Babel.Models.RequestModel.Options">
            <summary>
            Gets or sets the conversion options.
            </summary>
        </member>
        <member name="T:Api.Modules.Babel.Models.ResponseModel">
            <summary>
            A model for returning a Babel API response.
            </summary>
        </member>
        <member name="P:Api.Modules.Babel.Models.ResponseModel.Success">
            <summary>
            Gets or sets whether the Babel conversion was successful.
            </summary>
        </member>
        <member name="P:Api.Modules.Babel.Models.ResponseModel.Content">
            <summary>
            Gets or sets the result of the Babel conversion.
            </summary>
        </member>
        <member name="P:Api.Modules.Babel.Models.ResponseModel.Comment">
            <summary>
            Gets or sets any comments about the Babel conversion.
            </summary>
        </member>
        <member name="T:Api.Modules.Babel.Services.BabelService">
            <inheritdoc cref="T:Api.Modules.Babel.Interfaces.IBabelService" />
        </member>
        <member name="M:Api.Modules.Babel.Services.BabelService.#ctor(Microsoft.Extensions.Logging.ILogger{Api.Modules.Babel.Services.BabelService})">
            <summary>
            Initializes a new instance of <see cref="T:Api.Modules.Babel.Services.BabelService"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.Babel.Services.BabelService.ConvertJavascriptAsync(Api.Modules.Babel.Models.RequestModel)">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.Barcodes.Controllers.BarcodesController">
            <summary>
            Controller for doing things with barcodes and QR codes.
            </summary>
        </member>
        <member name="M:Api.Modules.Barcodes.Controllers.BarcodesController.GetQrCode(System.String,System.Int32,System.String)">
            <summary>
            Generate an image for an QR code.
            </summary>
            <param name="text">The text to create an QR code of.</param>
            <param name="size">Optional: The size (in pixels) of the image. Default is 500px.</param>
            <param name="downloadFileName">Optional: If this should be downloaded by the browser instead of just shown, you can enter a file name here.</param>
            <returns>The generated QR code image.</returns>
        </member>
        <member name="T:Api.Modules.Branches.Controllers.BranchesController">
            <summary>
            A controller for doing things with Wiser branches. Branches in Wiser are copies of their original database where they can make changes in before putting them in production.
            </summary>
        </member>
        <member name="M:Api.Modules.Branches.Controllers.BranchesController.#ctor(Api.Modules.Branches.Interfaces.IBranchesService)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.Branches.Controllers.BranchesController"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.Branches.Controllers.BranchesController.GetBranchesAsync">
            <summary>
            Gets the environments for the authenticated user.
            </summary>
            <returns>A list of <see cref="T:Api.Modules.Customers.Models.CustomerModel"/>.</returns>
        </member>
        <member name="M:Api.Modules.Branches.Controllers.BranchesController.IsMainBranchAsync">
            <summary>
            Gets whether the current branch is the main branch.
            </summary>
            <returns>A boolean indicating whether the current branch is the main branch.</returns>
        </member>
        <member name="M:Api.Modules.Branches.Controllers.BranchesController.CreateBranchAsync(GeeksCoreLibrary.Modules.Branches.Models.CreateBranchSettingsModel)">
            <summary>
            Creates a new branch for the authenticated customer.
            This will create a new database schema on the same server/cluster and then fill it with part of the data from the original database.
            </summary>
            <param name="settings">The settings for the new environment</param>
        </member>
        <member name="M:Api.Modules.Branches.Controllers.BranchesController.GetChangesAsync(System.Int32)">
            <summary>
            Get the changes of a branch.
            </summary>
            <param name="id">The ID of the branch to get the changes of.</param>
            <returns>A list of changes per entity type / Wiser setting type.</returns>
        </member>
        <member name="M:Api.Modules.Branches.Controllers.BranchesController.MergeBranchAsync(GeeksCoreLibrary.Modules.Branches.Models.MergeBranchSettingsModel)">
            <summary>
            Merge all changes done to wiser items, from a specific branch, to the main branch.
            </summary>
            <param name="settings">The settings of what exactly to merge.</param>
        </member>
        <member name="T:Api.Modules.Branches.Interfaces.IBranchesService">
            <summary>
            A service for doing things with Wiser branches. Branches in Wiser are copies of their original database where they can make changes in before putting them in production.
            </summary>
        </member>
        <member name="M:Api.Modules.Branches.Interfaces.IBranchesService.CreateAsync(System.Security.Claims.ClaimsIdentity,GeeksCoreLibrary.Modules.Branches.Models.CreateBranchSettingsModel)">
            <summary>
            Creates a new environment for the authenticated customer.
            This will create a new database schema on the same server/cluster and then fill it with part of the data from the original database.
            </summary>
            <param name="identity">The <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see> of the authenticated user.</param>
            <param name="settings">The settings for the new environment.</param>
        </member>
        <member name="M:Api.Modules.Branches.Interfaces.IBranchesService.GetAsync(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Gets the environments for the authenticated user.
            </summary>
            <param name="identity">The <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see> of the authenticated user.</param>
            <returns>A list of <see cref="T:Api.Modules.Customers.Models.CustomerModel"/>.</returns>
        </member>
        <member name="M:Api.Modules.Branches.Interfaces.IBranchesService.IsMainBranchAsync(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Gets whether the current branch is the main branch.
            </summary>
            <param name="identity">The <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see> of the authenticated user.</param>
            <returns>A boolean indicating whether the current branch is the main branch.</returns>
        </member>
        <member name="M:Api.Modules.Branches.Interfaces.IBranchesService.IsMainBranch(Api.Modules.Customers.Models.CustomerModel)">
            <summary>
            Gets whether the current branch is the main branch.
            </summary>
            <param name="branch">The <see cref="T:Api.Modules.Customers.Models.CustomerModel">CustomerModel</see> of the branch to check.</param>
            <returns>A boolean indicating whether the current branch is the main branch.</returns>
        </member>
        <member name="M:Api.Modules.Branches.Interfaces.IBranchesService.GetChangesAsync(System.Security.Claims.ClaimsIdentity,System.Int32)">
            <summary>
            Get the changes of a branch.
            </summary>
            <param name="identity">The <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see> of the authenticated user.</param>
            <param name="id">The ID of the branch to get the changes of.</param>
            <returns>A list of changes per entity type / Wiser setting type.</returns>
        </member>
        <member name="M:Api.Modules.Branches.Interfaces.IBranchesService.MergeAsync(System.Security.Claims.ClaimsIdentity,GeeksCoreLibrary.Modules.Branches.Models.MergeBranchSettingsModel)">
            <summary>
            Synchronise all changes done to wiser items, from a specific environment, to the production environment.
            This will look in wiser_history for what has been changed, copy those changes to production and then clear the history.
            </summary>
            <param name="identity">The <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see> of the authenticated user.</param>
            <param name="settings">The settings of what exactly to merge.</param>
        </member>
        <member name="M:Api.Modules.Branches.Interfaces.IBranchesService.CanAccessBranchAsync(System.Security.Claims.ClaimsIdentity,System.Int32)">
            <summary>
            Gets whether the current user can access a certain branch.
            This will check if the given branch has the same parent ID as the branch that the user is currently authenticated for.
            </summary>
            <param name="identity">The <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see> of the authenticated user.</param>
            <param name="branchId">The ID of the branch to check.</param>
            <returns>A boolean indicating whether the user is allowed access to the given branch.</returns>
        </member>
        <member name="M:Api.Modules.Branches.Interfaces.IBranchesService.CanAccessBranchAsync(System.Security.Claims.ClaimsIdentity,Api.Modules.Customers.Models.CustomerModel)">
            <summary>
            Gets whether the current user can access a certain branch.
            This will check if the given branch has the same parent ID as the branch that the user is currently authenticated for.
            </summary>
            <param name="identity">The <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see> of the authenticated user.</param>
            <param name="branch">The <see cref="T:Api.Modules.Customers.Models.CustomerModel">CustomerModel</see> of the branch to check.</param>
            <returns>A boolean indicating whether the user is allowed access to the given branch.</returns>
        </member>
        <member name="T:Api.Modules.Branches.Models.BranchChangesModel">
            <summary>
            A base model for changes of an entity type or any kind of wiser settings that can be merged into the main/original branch.
            </summary>
        </member>
        <member name="P:Api.Modules.Branches.Models.BranchChangesModel.DisplayName">
            <summary>
            Gets or sets the display name for this type to be shown to the user in Wiser.
            </summary>
        </member>
        <member name="P:Api.Modules.Branches.Models.BranchChangesModel.Created">
            <summary>
            Gets or sets the amount of new items that have been created.
            </summary>
        </member>
        <member name="P:Api.Modules.Branches.Models.BranchChangesModel.Deleted">
            <summary>
            Gets or sets the amount of items that have been deleted.
            </summary>
        </member>
        <member name="P:Api.Modules.Branches.Models.BranchChangesModel.Updated">
            <summary>
            Gets or sets the amount of items that have been updated.
            </summary>
        </member>
        <member name="T:Api.Modules.Branches.Models.ChangesAvailableForMergingModel">
            <summary>
            A model for returning all changes that can be merged back into the main/original branch.
            </summary>
        </member>
        <member name="P:Api.Modules.Branches.Models.ChangesAvailableForMergingModel.Entities">
            <summary>
            Gets or sets the entities that can be merged.
            </summary>
        </member>
        <member name="P:Api.Modules.Branches.Models.ChangesAvailableForMergingModel.Settings">
            <summary>
            Gets or sets the Wiser settings that can be merged.
            </summary>
        </member>
        <member name="T:Api.Modules.Branches.Models.EntityChangesModel">
            <inheritdoc />
        </member>
        <member name="P:Api.Modules.Branches.Models.EntityChangesModel.EntityType">
            <summary>
            Gets or sets the entity type.
            </summary>
        </member>
        <member name="T:Api.Modules.Branches.Models.MergeBranchResultModel">
            <summary>
            A model to return the result of setting up a merge of a branch. 
            </summary>
        </member>
        <member name="P:Api.Modules.Branches.Models.MergeBranchResultModel.Success">
            <summary>
            Gets or sets whether the merge has been added successfully to the queue.
            If this is false, it will mean that there are some conflicts that the user has to resolve first.
            </summary>
        </member>
        <member name="P:Api.Modules.Branches.Models.MergeBranchResultModel.Conflicts">
            <summary>
            Gets or sets the list of conflicts.
            </summary>
        </member>
        <member name="T:Api.Modules.Branches.Models.SettingsChangesModel">
            <inheritdoc />
        </member>
        <member name="P:Api.Modules.Branches.Models.SettingsChangesModel.Type">
            <summary>
            Gets or sets the type of setting.
            </summary>
        </member>
        <member name="T:Api.Modules.Branches.Services.BranchesService">
            <inheritdoc cref="T:Api.Modules.Branches.Interfaces.IBranchesService" />
        </member>
        <member name="M:Api.Modules.Branches.Services.BranchesService.#ctor(Api.Modules.Customers.Interfaces.IWiserCustomersService,GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection,GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseHelpersService,Microsoft.Extensions.Logging.ILogger{Api.Modules.Branches.Services.BranchesService},GeeksCoreLibrary.Core.Interfaces.IWiserItemsService)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.Branches.Services.BranchesService"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.Branches.Services.BranchesService.CreateAsync(System.Security.Claims.ClaimsIdentity,GeeksCoreLibrary.Modules.Branches.Models.CreateBranchSettingsModel)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Branches.Services.BranchesService.GetAsync(System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Branches.Services.BranchesService.IsMainBranchAsync(System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Branches.Services.BranchesService.IsMainBranch(Api.Modules.Customers.Models.CustomerModel)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Branches.Services.BranchesService.GetChangesAsync(System.Security.Claims.ClaimsIdentity,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Branches.Services.BranchesService.MergeAsync(System.Security.Claims.ClaimsIdentity,GeeksCoreLibrary.Modules.Branches.Models.MergeBranchSettingsModel)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Branches.Services.BranchesService.CanAccessBranchAsync(System.Security.Claims.ClaimsIdentity,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Branches.Services.BranchesService.CanAccessBranchAsync(System.Security.Claims.ClaimsIdentity,Api.Modules.Customers.Models.CustomerModel)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Branches.Services.BranchesService.GetAllChangesFromBranchAsync(MySql.Data.MySqlClient.MySqlConnection,System.Collections.Generic.List{GeeksCoreLibrary.Modules.Branches.Models.MergeConflictModel},GeeksCoreLibrary.Modules.Branches.Models.MergeBranchSettingsModel)">
            <summary>
            This method is for finding merge conflicts. This will get all changes from the branch database and add them to the conflicts list.
            This is meant to work together with FindConflictsInMainBranchAsync. which should be called right after this method..
            </summary>
            <param name="branchConnection">The connection to the branch database.</param>
            <param name="conflicts">The list of conflicts.</param>
            <param name="mergeBranchSettings">The settings that say what things to merge.</param>
        </member>
        <member name="M:Api.Modules.Branches.Services.BranchesService.FindConflictsInMainBranchAsync(MySql.Data.MySqlClient.MySqlConnection,MySql.Data.MySqlClient.MySqlConnection,System.Collections.Generic.List{GeeksCoreLibrary.Modules.Branches.Models.MergeConflictModel},System.DateTime,GeeksCoreLibrary.Modules.Branches.Models.MergeBranchSettingsModel)">
            <summary>
            This method is for finding merge conflicts. This will get all changes from the main database. It will then check if the same items has been changed in the branch database and if so, add that as a conflict.
            This is meant to work together with GetAllChangesFromBranchAsync. which should be called right before this method.
            </summary>
            <param name="mainConnection">The connection to the main database.</param>
            <param name="branchConnection">The connection to the branch database.</param>
            <param name="conflicts">The list of conflicts.</param>
            <param name="lastMergeDate">The date and time of the last merge, so we know from when to start looking.</param>
            <param name="mergeBranchSettings">The settings that say what things to merge.</param>
        </member>
        <member name="M:Api.Modules.Branches.Services.BranchesService.GetEntityTypesOfLinkAsync(System.UInt64,System.UInt64,System.Int32,MySql.Data.MySqlClient.MySqlConnection)">
            <summary>
            Get the entity types and table prefixes for both items in a link.
            </summary>
            <param name="sourceId">The ID of the source item.</param>
            <param name="destinationId">The ID of the destination item.</param>
            <param name="linkType">The link type number.</param>
            <param name="mySqlConnection">The connection to the database.</param>
            <returns>A named tuple with the entity types and table prefixes for both the source and the destination.</returns>
        </member>
        <member name="T:Api.Modules.Cache.Controllers.ExternalCacheController">
            <summary>
            Controller for manipulating the cache of an GCL website.
            </summary>
        </member>
        <member name="M:Api.Modules.Cache.Controllers.ExternalCacheController.#ctor(Api.Modules.Cache.Interfaces.IExternalCacheService)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.Cache.Controllers.ExternalCacheController"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.Cache.Controllers.ExternalCacheController.ClearCacheAsync(Api.Modules.Cache.Models.ClearCacheSettingsModel)">
            <summary>
            Clears the cache of a GCL website. You can chose which cache area(s) to clear.
            </summary>
            <param name="settings">The settings for clearing the cache.</param>
        </member>
        <member name="T:Api.Modules.Cache.Interfaces.IExternalCacheService">
            <summary>
            Service for manipulating the cache of an GCL website.
            </summary>
        </member>
        <member name="M:Api.Modules.Cache.Interfaces.IExternalCacheService.ClearCacheAsync(Api.Modules.Cache.Models.ClearCacheSettingsModel)">
            <summary>
            Clears the cache of a GCL website. You can chose which cache area(s) to clear.
            </summary>
            <param name="settings">The settings for clearing the cache.</param>
        </member>
        <member name="T:Api.Modules.Cache.Models.ClearCacheSettingsModel">
            <summary>
            A model with settings for clearing the cache of a GCL website.
            </summary>
        </member>
        <member name="P:Api.Modules.Cache.Models.ClearCacheSettingsModel.Url">
            <summary>
            Gets or sets the URL to the GCL website.
            </summary>
        </member>
        <member name="P:Api.Modules.Cache.Models.ClearCacheSettingsModel.Areas">
            <summary>
            Gets or sets the cache areas to clear.
            </summary>
        </member>
        <member name="T:Api.Modules.Cache.Services.ExternalCacheService">
            <inheritdoc cref="T:Api.Modules.Cache.Interfaces.IExternalCacheService" />
        </member>
        <member name="M:Api.Modules.Cache.Services.ExternalCacheService.ClearCacheAsync(Api.Modules.Cache.Models.ClearCacheSettingsModel)">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.CloudFlare.Interfaces.ICloudFlareService">
            <summary>
            Serice for handling CloudFlare services (images)
            </summary>
        </member>
        <member name="M:Api.Modules.CloudFlare.Interfaces.ICloudFlareService.UploadImageAsync(System.String,System.Byte[])">
            <summary>
            Uploads an image to CloudFlare
            </summary>
            <param name="fileName">Name of the file to upload.</param>
            <param name="fileBytes">Contents of the file to upload.</param>
            <returns>string with url from CloudFlare</returns>
        </member>
        <member name="M:Api.Modules.CloudFlare.Interfaces.ICloudFlareService.DeleteImageAsync(System.String)">
            <summary>
            Deletes an image based on the image id encapsulated in the url
            </summary>
            <param name="url">Url from Cloudflare</param>
            <returns></returns>
        </member>
        <member name="T:Api.Modules.CloudFlare.Models.CloudFlareSettingsModel">
            <summary>
            The model for CloudFlare Settings.
            These settings are used to connect to CloudFlare to upload images.
            Will be filled with SystemObjectValues
            </summary>
        </member>
        <member name="P:Api.Modules.CloudFlare.Models.CloudFlareSettingsModel.AuthorizationKey">
            <summary>
            Gets or sets the Authorization Key
            </summary>
        </member>
        <member name="P:Api.Modules.CloudFlare.Models.CloudFlareSettingsModel.AuthorizationEmail">
            <summary>
            Gets or sets the Authorization Email
            </summary>
        </member>
        <member name="P:Api.Modules.CloudFlare.Models.CloudFlareSettingsModel.AccountId">
            <summary>
            Gets or sets the AccountId
            </summary>
        </member>
        <member name="T:Api.Modules.CloudFlare.Models.DirectUploadResult">
            <summary>
            This inner class describes an object for a DirectUploadResult
            </summary>
        </member>
        <member name="P:Api.Modules.CloudFlare.Models.DirectUploadResult.Id">
            <summary>
            The ID of the DirectUploadResult
            </summary>
        </member>
        <member name="P:Api.Modules.CloudFlare.Models.DirectUploadResult.UploadURL">
            <summary>
            The Upload URL of the DirectUploadResult
            </summary>
        </member>
        <member name="T:Api.Modules.CloudFlare.Models.DirectUploadResponseModel">
            <summary>
            This class describes an object for a DirectUploadResponseModel
            </summary>
        </member>
        <member name="P:Api.Modules.CloudFlare.Models.DirectUploadResponseModel.Result">
            <summary>
            The Result of the DirectUploadResponse
            </summary>
        </member>
        <member name="P:Api.Modules.CloudFlare.Models.DirectUploadResponseModel.ResultInfo">
            <summary>
            Extra info from the Result as an object
            </summary>
        </member>
        <member name="P:Api.Modules.CloudFlare.Models.DirectUploadResponseModel.Success">
            <summary>
            A boolean to check if the response was successful
            </summary>
        </member>
        <member name="P:Api.Modules.CloudFlare.Models.DirectUploadResponseModel.Errors">
            <summary>
            The errors of the response
            </summary>
        </member>
        <member name="P:Api.Modules.CloudFlare.Models.DirectUploadResponseModel.Messages">
            <summary>
            The messages of the response
            </summary>
        </member>
        <member name="T:Api.Modules.CloudFlare.Models.UploadImageResult">
            <summary>
            This inner class describes an object for the result of an image being uploaded
            </summary>
        </member>
        <member name="P:Api.Modules.CloudFlare.Models.UploadImageResult.Id">
            <summary>
            The ID of the result
            </summary>
        </member>
        <member name="P:Api.Modules.CloudFlare.Models.UploadImageResult.Filename">
            <summary>
            The filename of the result
            </summary>
        </member>
        <member name="P:Api.Modules.CloudFlare.Models.UploadImageResult.Uploaded">
            <summary>
            The date and time of the result
            </summary>
        </member>
        <member name="P:Api.Modules.CloudFlare.Models.UploadImageResult.RequireSignedURLs">
            <summary>
            Checks if Signed URLs are needed
            </summary>
        </member>
        <member name="P:Api.Modules.CloudFlare.Models.UploadImageResult.Variants">
            <summary>
            List of the different Variants in the result
            </summary>
        </member>
        <member name="T:Api.Modules.CloudFlare.Models.UploadImageResponseModel">
            <summary>
            A class describing an object for the response of an Image being uploaded
            </summary>
        </member>
        <member name="P:Api.Modules.CloudFlare.Models.UploadImageResponseModel.Result">
            <summary>
            The result within the response
            </summary>
        </member>
        <member name="P:Api.Modules.CloudFlare.Models.UploadImageResponseModel.ResultInfo">
            <summary>
            An object with extra info from the result in the response
            </summary>
        </member>
        <member name="P:Api.Modules.CloudFlare.Models.UploadImageResponseModel.Success">
            <summary>
            Checks if the response is successful
            </summary>
        </member>
        <member name="P:Api.Modules.CloudFlare.Models.UploadImageResponseModel.Errors">
            <summary>
            The errors of the response
            </summary>
        </member>
        <member name="P:Api.Modules.CloudFlare.Models.UploadImageResponseModel.Messages">
            <summary>
            The messages of the response
            </summary>
        </member>
        <member name="T:Api.Modules.CloudFlare.Services.CloudFlareService">
            <inheritdoc cref="T:Api.Modules.CloudFlare.Interfaces.ICloudFlareService" />
        </member>
        <member name="M:Api.Modules.CloudFlare.Services.CloudFlareService.#ctor(GeeksCoreLibrary.Modules.Objects.Interfaces.IObjectsService)">
            <summary>
            Creates an instance of <see cref="T:Api.Modules.CloudFlare.Services.CloudFlareService"/>
            </summary>
        </member>
        <member name="M:Api.Modules.CloudFlare.Services.CloudFlareService.GetCloudFlareSettingsAsync">
            <summary>
            Get the proper settings for CloudFlare communication
            </summary>
            <returns>A <see cref="T:Api.Modules.CloudFlare.Models.CloudFlareSettingsModel"/> with System Object Values</returns>
        </member>
        <member name="M:Api.Modules.CloudFlare.Services.CloudFlareService.UploadImageAsync(System.String,System.Byte[])">
            <inheritdoc cref="T:Api.Modules.CloudFlare.Interfaces.ICloudFlareService" />
        </member>
        <member name="M:Api.Modules.CloudFlare.Services.CloudFlareService.DeleteImageAsync(System.String)">
            <inheritdoc cref="T:Api.Modules.CloudFlare.Interfaces.ICloudFlareService" />
        </member>
        <member name="T:Api.Modules.Communication.Controllers.CommunicationsController">
            <summary>
            A controller for loading and saving communication settings in the communication module.
            </summary>
        </member>
        <member name="M:Api.Modules.Communication.Controllers.CommunicationsController.#ctor(Api.Modules.Communication.Interfaces.ICommunicationsService)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.Communication.Controllers.CommunicationsController"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.Communication.Controllers.CommunicationsController.GetAllSettingsAsync(System.Boolean)">
            <summary>
            Get the settings of all communications of a specific type (such as SMS or e-mail).
            </summary>
            <param name="namesOnly">Optional: Whether to only get the names (and IDs) or everything.</param>
            <returns>A list of <see cref="T:GeeksCoreLibrary.Modules.Communication.Models.CommunicationSettingsModel"/>.</returns>
        </member>
        <member name="M:Api.Modules.Communication.Controllers.CommunicationsController.GetSettingsAsync(System.Int32,System.Boolean)">
            <summary>
            Get the settings of a specific row from wiser_communication.
            </summary>
            <param name="id">The ID of the communication settings to get.</param>
            <param name="nameOnly">Optional: Whether to only get the name (and ID) or everything.</param>
            <returns>A <see cref="T:GeeksCoreLibrary.Modules.Communication.Models.CommunicationSettingsModel"/> with the settings, or <see langword="null"/> if it doesn't exist.</returns>
        </member>
        <member name="M:Api.Modules.Communication.Controllers.CommunicationsController.SaveSettingsAsync(GeeksCoreLibrary.Modules.Communication.Models.CommunicationSettingsModel)">
            <summary>
            Create new settings or updates existing settings (based on <see cref="P:GeeksCoreLibrary.Modules.Communication.Models.CommunicationSettingsModel.Id"/>).
            </summary>
            <param name="settings">The <see cref="T:GeeksCoreLibrary.Modules.Communication.Models.CommunicationSettingsModel"/> to create or update.</param>
        </member>
        <member name="M:Api.Modules.Communication.Controllers.CommunicationsController.DeleteSettingsAsync(System.Int32)">
            <summary>
            Deletes a row of communication settings.
            </summary>
            <param name="id">The ID of the settings to delete.</param>
        </member>
        <member name="M:Api.Modules.Communication.Controllers.CommunicationsController.SendEmailAsync(GeeksCoreLibrary.Modules.Communication.Models.SingleCommunicationModel)">
            <summary>
            Send an e-mail to someone.
            </summary>
            <param name="communication">The <see cref="T:GeeksCoreLibrary.Modules.Communication.Models.SingleCommunicationModel"/> with information for sending the e-mail.</param>
        </member>
        <member name="T:Api.Modules.Communication.Interfaces.ICommunicationsService">
            <summary>
            A service for loading and saving communication settings in the communication module.
            </summary>
        </member>
        <member name="M:Api.Modules.Communication.Interfaces.ICommunicationsService.GetSettingsAsync(System.Int32,System.Boolean)">
            <summary>
            Get the settings of a specific row from wiser_communication.
            </summary>
            <param name="id">The ID of the communication settings to get.</param>
            <param name="nameOnly">Optional: Whether to only get the name (and ID) or everything.</param>
            <returns>A <see cref="T:GeeksCoreLibrary.Modules.Communication.Models.CommunicationSettingsModel"/> with the settings, or <see langword="null"/> if it doesn't exist.</returns>
        </member>
        <member name="M:Api.Modules.Communication.Interfaces.ICommunicationsService.GetSettingsAsync(System.Nullable{GeeksCoreLibrary.Modules.Communication.Enums.CommunicationTypes},System.Boolean)">
            <summary>
            Get the settings of all communications of a specific type (such as SMS or e-mail).
            </summary>
            <param name="type">Optional: The <see cref="T:GeeksCoreLibrary.Modules.Communication.Enums.CommunicationTypes"/> to get the settings for. Leave null to get everything.</param>
            <param name="namesOnly">Optional: Whether to only get the names (and IDs) or everything.</param>
            <returns>A list of <see cref="T:GeeksCoreLibrary.Modules.Communication.Models.CommunicationSettingsModel"/>.</returns>
        </member>
        <member name="M:Api.Modules.Communication.Interfaces.ICommunicationsService.SaveSettingsAsync(System.Security.Claims.ClaimsIdentity,GeeksCoreLibrary.Modules.Communication.Models.CommunicationSettingsModel)">
            <summary>
            Create new settings or updates existing settings (based on <see cref="P:GeeksCoreLibrary.Modules.Communication.Models.CommunicationSettingsModel.Id"/>).
            </summary>
            <param name="identity">The <see cref="T:System.Security.Claims.ClaimsIdentity"/> of the authenticated user.</param>
            <param name="settings">The <see cref="T:GeeksCoreLibrary.Modules.Communication.Models.CommunicationSettingsModel"/> to create or update.</param>
        </member>
        <member name="M:Api.Modules.Communication.Interfaces.ICommunicationsService.DeleteSettingsAsync(System.Security.Claims.ClaimsIdentity,System.Int32)">
            <summary>
            Deletes a row of communication settings.
            </summary>
            <param name="identity">The <see cref="T:System.Security.Claims.ClaimsIdentity"/> of the authenticated user.</param>
            <param name="id">The ID of the settings to delete.</param>
        </member>
        <member name="M:Api.Modules.Communication.Interfaces.ICommunicationsService.SendEmailAsync(System.Security.Claims.ClaimsIdentity,GeeksCoreLibrary.Modules.Communication.Models.SingleCommunicationModel)">
            <summary>
            Send an e-mail to someone.
            </summary>
            <param name="identity">The <see cref="T:System.Security.Claims.ClaimsIdentity"/> of the authenticated user.</param>
            <param name="communication">The <see cref="T:GeeksCoreLibrary.Modules.Communication.Models.SingleCommunicationModel"/> with information for sending the e-mail.</param>
        </member>
        <member name="T:Api.Modules.Communication.Services.CommunicationsService">
            <inheritdoc cref="T:Api.Modules.Communication.Interfaces.ICommunicationsService" />
        </member>
        <member name="M:Api.Modules.Communication.Services.CommunicationsService.#ctor(GeeksCoreLibrary.Modules.Communication.Interfaces.ICommunicationsService)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.Communication.Services.CommunicationsService"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.Communication.Services.CommunicationsService.GetSettingsAsync(System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Communication.Services.CommunicationsService.GetSettingsAsync(System.Nullable{GeeksCoreLibrary.Modules.Communication.Enums.CommunicationTypes},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Communication.Services.CommunicationsService.SaveSettingsAsync(System.Security.Claims.ClaimsIdentity,GeeksCoreLibrary.Modules.Communication.Models.CommunicationSettingsModel)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Communication.Services.CommunicationsService.DeleteSettingsAsync(System.Security.Claims.ClaimsIdentity,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Communication.Services.CommunicationsService.SendEmailAsync(System.Security.Claims.ClaimsIdentity,GeeksCoreLibrary.Modules.Communication.Models.SingleCommunicationModel)">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.ContentBuilder.Controllers.ContentBuilderController">
            <summary>
            A controller for the content builder, to get HTML, snippets etc.
            </summary>
        </member>
        <member name="M:Api.Modules.ContentBuilder.Controllers.ContentBuilderController.#ctor(Api.Modules.ContentBuilder.Interfaces.IContentBuilderService,Microsoft.Extensions.Options.IOptions{GeeksCoreLibrary.Core.Models.GclSettings})">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.ContentBuilder.Controllers.ContentBuilderController"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.ContentBuilder.Controllers.ContentBuilderController.GetSnippetsAsync">
            <summary>
            Gets all snippets for the content builder. Snippets are pieces of HTML that the user can add in the Content Builder.
            </summary>
            <returns>A list with zero or more <see cref="T:Api.Modules.ContentBuilder.Models.ContentBuilderSnippetModel"/>.</returns>
        </member>
        <member name="M:Api.Modules.ContentBuilder.Controllers.ContentBuilderController.GetTemplatesAsync">
            <summary>
            Gets all templates for the content box. Templates are pieces of HTML that the user can add in the Content Box.
            </summary>
            <returns>A list with zero or more <see cref="T:Api.Modules.ContentBuilder.Models.ContentBuilderSnippetModel"/>.</returns>
        </member>
        <member name="M:Api.Modules.ContentBuilder.Controllers.ContentBuilderController.GetTemplateCategoriesAsync">
            <summary>
            Gets all categories for templates for the content box. Templates are pieces of HTML that the user can add in the Content Box.
            </summary>
            <returns>A list with zero or more <see cref="T:Api.Modules.ContentBuilder.Models.ContentBuilderSnippetModel"/>.</returns>
        </member>
        <member name="M:Api.Modules.ContentBuilder.Controllers.ContentBuilderController.GetHtmlAsync(System.UInt64,System.String,System.String)">
            <summary>
            Gets the HTML of an item, for the Content Builder.
            </summary>
            <param name="itemId">The ID of the Wiser item that contains the HTML to get.</param>
            <param name="languageCode">Optional: The language code for the HTML, in case of a multi language website.</param>
            <param name="propertyName">Optional: The name of the property in the Wiser item that contains the HTML. Default value is "html".</param>
            <returns>The HTML as a string.</returns>
        </member>
        <member name="M:Api.Modules.ContentBuilder.Controllers.ContentBuilderController.GetFrameworkAsync">
            <summary>
            Gets the framework to use for the content builder.
            </summary>
            <returns>The name of the framework to use.</returns>
        </member>
        <member name="M:Api.Modules.ContentBuilder.Controllers.ContentBuilderController.GetTemplateJavascriptFileAsync(Api.Modules.Customers.Models.CustomerInformationModel)">
            <summary>
            Gets the template javascript file for the ContentBox so that the tenant's templates can be used in the ContentBox.
            </summary>
            <returns>A string with the contents of the javascript file.</returns>
        </member>
        <member name="T:Api.Modules.ContentBuilder.Interfaces.IContentBuilderService">
            <summary>
            A service for the content builder, to get HTML, snippets etc.
            </summary>
        </member>
        <member name="M:Api.Modules.ContentBuilder.Interfaces.IContentBuilderService.GetSnippetsAsync(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Gets all snippets for the content builder. Snippets are pieces of HTML that the user can add in the Content Builder.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <returns>A list with zero or more <see cref="T:Api.Modules.ContentBuilder.Models.ContentBuilderSnippetModel"/>.</returns>
        </member>
        <member name="M:Api.Modules.ContentBuilder.Interfaces.IContentBuilderService.GetTemplatesAsync(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Gets all templates for the content box. Templates are pieces of HTML that the user can add in the Content Box.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <returns>A list with zero or more <see cref="T:Api.Modules.ContentBuilder.Models.ContentBuilderSnippetModel"/>.</returns>
        </member>
        <member name="M:Api.Modules.ContentBuilder.Interfaces.IContentBuilderService.GetTemplateCategoriesAsync(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Gets all categories of templates for the content box. Templates are pieces of HTML that the user can add in the Content Box.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <returns>A list with zero or more <see cref="T:Api.Modules.ContentBuilder.Models.ContentBuilderSnippetModel"/>.</returns>
        </member>
        <member name="M:Api.Modules.ContentBuilder.Interfaces.IContentBuilderService.GetTemplateJavascriptFileAsync(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Gets the template javascript file for the ContentBox so that the tenant's templates can be used in the ContentBox.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <returns>A string with the contents of the javascript file.</returns>
        </member>
        <member name="M:Api.Modules.ContentBuilder.Interfaces.IContentBuilderService.GetHtmlAsync(System.Security.Claims.ClaimsIdentity,System.UInt64,System.String,System.String)">
            <summary>
            Gets the HTML of an item, for the Content Builder.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="itemId">The ID of the Wiser item that contains the HTML to get.</param>
            <param name="languageCode">Optional: The language code for the HTML, in case of a multi language website.</param>
            <param name="propertyName">Optional: The name of the property in the Wiser item that contains the HTML. Default value is "html".</param>
            <returns>The HTML as a string.</returns>
        </member>
        <member name="M:Api.Modules.ContentBuilder.Interfaces.IContentBuilderService.GetFrameworkAsync">
            <summary>
            Gets the framework to use for the content builder.
            </summary>
            <returns>The name of the framework to use.</returns>
        </member>
        <member name="T:Api.Modules.ContentBuilder.Models.ContentBoxTemplateJavascriptModel">
            <summary>
            Model class to get the ContentBoxTemplates for Javascript
            </summary>
        </member>
        <member name="P:Api.Modules.ContentBuilder.Models.ContentBoxTemplateJavascriptModel.Thumbnail">
            <summary>
            Gets or sets the URL to the thumbnail image.
            </summary>
        </member>
        <member name="P:Api.Modules.ContentBuilder.Models.ContentBoxTemplateJavascriptModel.Category">
            <summary>
            Gets or sets the ID of the category.
            </summary>
        </member>
        <member name="P:Api.Modules.ContentBuilder.Models.ContentBoxTemplateJavascriptModel.DesignId">
            <summary>
            Gets or sets the ID of the design
            </summary>
        </member>
        <member name="P:Api.Modules.ContentBuilder.Models.ContentBoxTemplateJavascriptModel.Html">
            <summary>
            Gets or sets the HTML of the snippet.
            </summary>
        </member>
        <member name="P:Api.Modules.ContentBuilder.Models.ContentBoxTemplateJavascriptModel.ContentCss">
            <summary>
            Gets or sets the CSS file that is needed for the contents of this template.
            </summary>
        </member>
        <member name="P:Api.Modules.ContentBuilder.Models.ContentBoxTemplateJavascriptModel.ContentClass">
            <summary>
            Gets or sets the CSS class that the outer element of the template should get.
            </summary>
        </member>
        <member name="T:Api.Modules.ContentBuilder.Models.ContentBoxTemplateModel">
            <summary>
            Model class for ContentBoxTemplates
            </summary>
        </member>
        <member name="P:Api.Modules.ContentBuilder.Models.ContentBoxTemplateModel.Id">
            <summary>
            Gets or sets the ID.
            </summary>
        </member>
        <member name="P:Api.Modules.ContentBuilder.Models.ContentBoxTemplateModel.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Api.Modules.ContentBuilder.Models.ContentBoxTemplateModel.Thumbnail">
            <summary>
            Gets or sets the URL to the thumbnail image.
            </summary>
        </member>
        <member name="P:Api.Modules.ContentBuilder.Models.ContentBoxTemplateModel.CategoryId">
            <summary>
            Gets or sets the ID of the category.
            </summary>
        </member>
        <member name="P:Api.Modules.ContentBuilder.Models.ContentBoxTemplateModel.Category">
            <summary>
            Gets or sets the name of the category.
            </summary>
        </member>
        <member name="P:Api.Modules.ContentBuilder.Models.ContentBoxTemplateModel.Html">
            <summary>
            Gets or sets the HTML of the snippet.
            </summary>
        </member>
        <member name="P:Api.Modules.ContentBuilder.Models.ContentBoxTemplateModel.ContentCss">
            <summary>
            Gets or sets the CSS file that is needed for the contents of this template.
            </summary>
        </member>
        <member name="P:Api.Modules.ContentBuilder.Models.ContentBoxTemplateModel.ContentClass">
            <summary>
            Gets or sets the CSS class that the outer element of the template should get.
            </summary>
        </member>
        <member name="T:Api.Modules.ContentBuilder.Models.ContentBuilderSnippetModel">
            <summary>
            A model for a Content Builder HTML snippet.
            </summary>
        </member>
        <member name="P:Api.Modules.ContentBuilder.Models.ContentBuilderSnippetModel.Id">
            <summary>
            Gets or sets the ID.
            </summary>
        </member>
        <member name="P:Api.Modules.ContentBuilder.Models.ContentBuilderSnippetModel.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Api.Modules.ContentBuilder.Models.ContentBuilderSnippetModel.Thumbnail">
            <summary>
            Gets or sets the URL to the thumbnail image.
            </summary>
        </member>
        <member name="P:Api.Modules.ContentBuilder.Models.ContentBuilderSnippetModel.CategoryId">
            <summary>
            Gets or sets the ID of the category.
            </summary>
        </member>
        <member name="P:Api.Modules.ContentBuilder.Models.ContentBuilderSnippetModel.Category">
            <summary>
            Gets or sets the name of the category.
            </summary>
        </member>
        <member name="P:Api.Modules.ContentBuilder.Models.ContentBuilderSnippetModel.Html">
            <summary>
            Gets or sets the HTML of the snippet.
            </summary>
        </member>
        <member name="T:Api.Modules.ContentBuilder.Services.ContentBuilderService">
            <inheritdoc cref="T:Api.Modules.ContentBuilder.Interfaces.IContentBuilderService" />
        </member>
        <member name="M:Api.Modules.ContentBuilder.Services.ContentBuilderService.#ctor(GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection,GeeksCoreLibrary.Modules.Objects.Interfaces.IObjectsService,GeeksCoreLibrary.Core.Interfaces.IWiserItemsService,Api.Modules.Customers.Interfaces.IWiserCustomersService)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.ContentBuilder.Services.ContentBuilderService"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.ContentBuilder.Services.ContentBuilderService.GetSnippetsAsync(System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.ContentBuilder.Services.ContentBuilderService.GetTemplatesAsync(System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.ContentBuilder.Services.ContentBuilderService.GetTemplateCategoriesAsync(System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.ContentBuilder.Services.ContentBuilderService.GetTemplateJavascriptFileAsync(System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.ContentBuilder.Services.ContentBuilderService.GetHtmlAsync(System.Security.Claims.ClaimsIdentity,System.UInt64,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.ContentBuilder.Services.ContentBuilderService.GetFrameworkAsync">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.Customers.Controllers.CustomersController">
            <summary>
            A controller for getting data about users that can authenticate with Wiser.
            </summary>
        </member>
        <member name="M:Api.Modules.Customers.Controllers.CustomersController.#ctor(Api.Modules.Customers.Interfaces.IWiserCustomersService)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.Customers.Controllers.CustomersController"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.Customers.Controllers.CustomersController.GetTitleAsync(System.String)">
            <summary>
            Method for getting the title of a customer, to show in the browser tab.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:GeeksCoreLibrary.Core.Models.WiserItemModel"/>, but only with names and IDs.</returns>
        </member>
        <member name="M:Api.Modules.Customers.Controllers.CustomersController.Exists(System.String,System.String)">
            <summary>
            Method for getting information about a single customer.
            </summary>
            <param name="name">The name of a customer.</param>
            <param name="subDomain">The sub domain for the customer.</param>
            <returns>A <see cref="T:Api.Modules.Customers.Enums.CustomerExistsResults"/>.</returns>
        </member>
        <member name="M:Api.Modules.Customers.Controllers.CustomersController.Create(Api.Modules.Customers.Models.CustomerModel,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Method for creating a new Wiser customer.
            </summary>
            <param name="customer">The customer to create.</param>
            <param name="isWebShop">Is this customer going to have a web shop?</param>
            <param name="isConfigurator">Is this customer going to have a configurator?</param>
            <param name="isMultiLanguage">If the customer's website going to support multiple languages?</param>
            <returns>A <see cref="T:Api.Modules.Customers.Models.CustomerModel"/>.</returns>
        </member>
        <member name="T:Api.Modules.Customers.Controllers.UsersController">
            <summary>
            A controller for getting data about users that can authenticate with Wiser.
            </summary>
        </member>
        <member name="M:Api.Modules.Customers.Controllers.UsersController.#ctor(Api.Modules.Customers.Interfaces.IUsersService)">
            <summary>
            Creates a new instance of UsersController.
            </summary>
        </member>
        <member name="M:Api.Modules.Customers.Controllers.UsersController.Get(System.Boolean)">
            <summary>
            Method for getting a list of all users for the authenticated customer.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:GeeksCoreLibrary.Core.Models.WiserItemModel"/>, but only with names and IDs.</returns>
        </member>
        <member name="M:Api.Modules.Customers.Controllers.UsersController.GetUserData">
            <summary>
            Gets the data of the authenticated user.
            </summary>
            <returns>A UserModel with the data of the authenticated user.</returns>
        </member>
        <member name="M:Api.Modules.Customers.Controllers.UsersController.ResetPassword(Api.Modules.Customers.Models.ResetPasswordRequestModel)">
            <summary>
            Sends a new password to a user.
            </summary>
            <param name="resetPasswordRequestModel">The information for the account to reset the password.</param>
            <returns>Always returns true, unless an exception occurred.</returns>
        </member>
        <member name="M:Api.Modules.Customers.Controllers.UsersController.UpdatePassword(Api.Modules.Customers.Models.ChangePasswordModel)">
            <summary>
            Changes the password of a user.
            </summary>
            <param name="passwords">The old and new passwords of the user.</param>
        </member>
        <member name="M:Api.Modules.Customers.Controllers.UsersController.GetSettingsAsync(System.String,System.String)">
            <summary>
            Gets settings for the authenticated user for a specific group of settings.
            </summary>
            <param name="groupName">The group that the settings belong to.</param>
            <param name="key">The unique key for the settings.</param>
            <returns>The saved JSON object serialized as a string, or null if no setting for the given group and key were found.</returns>
        </member>
        <member name="M:Api.Modules.Customers.Controllers.UsersController.SaveSettingsAsync(System.String,System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Saves settings for the authenticated user that belong to a specific group.
            </summary>
            <param name="groupName">The group that the settings belong to.</param>
            <param name="key">The unique key for the grid settings. This should be unique for each grid in Wiser, so that no 2 grids use the same settings.</param>
            <param name="settings">A JSON object with the settings to save.</param>
            <returns>A boolean whether the save action was successful.</returns>
        </member>
        <member name="M:Api.Modules.Customers.Controllers.UsersController.GetGridSettingsAsync(System.String)">
            <summary>
            Gets settings for a grid for the authenticated user, so that users can keep their state of all grids in Wiser.
            </summary>
            <param name="key">The unique key for the grid settings. This should be unique for each grid in Wiser, so that no 2 grids use the same settings.</param>
        </member>
        <member name="M:Api.Modules.Customers.Controllers.UsersController.SaveGridSettingsAsync(System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Saves settings for a grid for the authenticated user, so that the next time the grid is loaded, the user keeps those settings.
            </summary>
            <param name="key">The unique key for the grid settings. This should be unique for each grid in Wiser, so that no 2 grids use the same settings.</param>
            <param name="settings">A JSON object with the settings to save.</param>
        </member>
        <member name="M:Api.Modules.Customers.Controllers.UsersController.GetPinnedModulesAsync">
            <summary>
            Gets the pinned modules for the authenticated user, so that users can keep their state of the pinned modules in Wiser.
            </summary>
        </member>
        <member name="M:Api.Modules.Customers.Controllers.UsersController.SavePinnedModulesAsync(System.Collections.Generic.List{System.Int32})">
            <summary>
            Save the list of pinned modules to the user details, so that next time the user will see the same pinned modules.
            </summary>
            <param name="moduleIds">The list of module IDs that the user has pinned.</param>
        </member>
        <member name="M:Api.Modules.Customers.Controllers.UsersController.SaveAutoLoadModulesAsync(System.Collections.Generic.List{System.Int32})">
            <summary>
            Save the list of modules that should be automatically started when the user logs in, to the user details.
            </summary>
            <param name="moduleIds">The list of module IDs that the user has set as auto load.</param>
        </member>
        <member name="M:Api.Modules.Customers.Controllers.UsersController.UpdateUserActiveTimeAsync(System.String)">
            <summary>
            Updates the time the current user has been active in Wiser.
            </summary>
            <param name="encryptedLoginLogId">The encrypted ID of the log table.</param>
        </member>
        <member name="M:Api.Modules.Customers.Controllers.UsersController.ResetTimeActiveChangedAsync(System.String)">
            <summary>
            Updates the time the current user has been active in Wiser.
            </summary>
            <param name="encryptedLoginLogId">The encrypted ID of the log table.</param>
        </member>
        <member name="M:Api.Modules.Customers.Controllers.UsersController.GetRolesAsync(System.Boolean)">
            <summary>
            Gets all available roles for users.
            </summary>
            <param name="includePermissions">Optional: Whether to include all permissions that each role has. Default is <see langword="false"/>.</param>
            <returns>A list of <see cref="T:GeeksCoreLibrary.Core.Models.RoleModel"/> with all available roles that users can have.</returns>
        </member>
        <member name="M:Api.Modules.Customers.Controllers.UsersController.GenerateTotpBackupCodesAsync">
            <summary>
            (Re)generate backup codes for TOTP (2FA) authentication.
            This will delete any remaining backup codes from the user and generate new ones.
            They will be hashed before they're saved in the database and can therefor only be shown to the user once!
            </summary>
            <returns>A list with the new backup codes.</returns>
        </member>
        <member name="M:Api.Modules.Customers.Controllers.UsersController.GetDashboardSettingsAsync">
            <summary>
            Will attempt to retrieve the saved layout data for the authenticated user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Customers.Controllers.UsersController.SaveDashboardSettingsAsync(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Will attempt to save the given layout data to the authenticated user.
            </summary>
            <param name="layoutData">A JSON object containing the layout data to save.</param>
            <returns></returns>
        </member>
        <member name="T:Api.Modules.Customers.Enums.CustomerExistsResults">
            <summary>
            All possible results for the customer exists check.
            </summary>
        </member>
        <member name="F:Api.Modules.Customers.Enums.CustomerExistsResults.Available">
            <summary>
            The name and sub domain are both still available.
            </summary>
        </member>
        <member name="F:Api.Modules.Customers.Enums.CustomerExistsResults.NameNotAvailable">
            <summary>
            The name is already in use by another customer.
            </summary>
        </member>
        <member name="F:Api.Modules.Customers.Enums.CustomerExistsResults.SubDomainNotAvailable">
            <summary>
            The sub domain is already in use by another customer.
            </summary>
        </member>
        <member name="T:Api.Modules.Customers.Interfaces.IUsersService">
            <summary>
            Interface for operations related to Wiser users (users that can log in to Wiser).
            </summary>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IUsersService.GetAsync(System.Boolean)">
            <summary>
            Gets a list of all users for a customer.
            </summary>
            <param name="includeAdminUsers">Optional: Whether to also get the admin users from the main Wiser database. Default is false.</param>
            <returns>A list of <see cref="T:GeeksCoreLibrary.Core.Models.WiserItemModel">ItemModel</see>.</returns>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IUsersService.LoginAdminAccountAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Method for logging in admin accounts.
            </summary>
            <param name="username">The e-mail address of the admin account.</param>
            <param name="password">The password of the admin account.</param>
            <param name="ipAddress">The IP address of the user that is trying to login.</param>
            <param name="totpPin">When the user is logging in with TOTP, then the PIN of the user should be entered here. </param>
            <returns>A populated <see cref="T:Api.Core.Models.AdminAccountModel"/> if successful, a 401 error if not.</returns>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IUsersService.LoginCustomerAsync(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Security.Claims.ClaimsIdentity,System.String,System.String)">
            <summary>
            Login a customer to Wiser. Normal users login with their username and password.
            Admin accounts login via their own credentials and can then login as any other user.
            </summary>
            <param name="username">The username of the user to login as.</param>
            <param name="password">The password of the user. Can be empty if logging in with an admin account.</param>
            <param name="encryptedAdminAccountId">Optional: The encrypted admin account ID.</param>
            <param name="subDomain">The Wiser sub domain used to access the site.</param>
            <param name="generateAuthenticationTokenForCookie">Optional: Indicate whether to generate a token for a login cookie so that the user stays login for a certain amount of time.</param>
            <param name="ipAddress">The IP address of the user.</param>
            <param name="identity">The <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see> of the authenticated user to check for rights.</param>
            <param name="totpPin">When the user is logging in with TOTP, then the PIN of the user should be entered here. </param>
            <param name="totpBackupCode">When the user entered a backup code to access their account, instead of a PIN.</param>
            <returns>Either an unauthorized error, or the <see cref="T:Api.Modules.Customers.Models.UserModel"/> of the user that is trying to login.</returns>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IUsersService.ResetPasswordAsync(Api.Modules.Customers.Models.ResetPasswordRequestModel,System.Security.Claims.ClaimsIdentity)">
            <summary>
            Sends a new password to a user.
            </summary>
            <param name="resetPasswordRequestModel">The information for the account to reset the password.</param>
            <param name="identity">The <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see> of the authenticated user to check for rights.</param>
            <returns>Always returns true, unless an exception occurred.</returns>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IUsersService.ValidateLoginCookieAsync(System.String,System.String,System.String,System.String,System.String,System.Security.Claims.ClaimsIdentity)">
            <summary>
            Method for validating a "Remember me" cookie.
            </summary>
            <param name="cookieValue">The exact contents of the cookie.</param>
            <param name="subDomain">The Wiser sub domain used to access the site.</param>
            <param name="ipAddress">Optional: The IP address of the user that is trying to login.</param>
            <param name="sessionId">Optional: The ID of the current session of the user.</param>
            <param name="encryptedAdminAccountId">Optional: The encrypted admin account ID.</param>
            <param name="identity">The <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see> of the authenticated user to check for rights.</param>
            <returns>Whether the cookie is (still) valid. If it's not valid, an error will be returned. Otherwise the user ID will be returned (encrypted).</returns>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IUsersService.ChangePasswordAsync(System.Security.Claims.ClaimsIdentity,Api.Modules.Customers.Models.ChangePasswordModel)">
            <summary>
            Changes the password of a user.
            </summary>
            <param name="identity">The <see cref="T:System.Security.Claims.ClaimsIdentity"/> of the authenticated client.</param>
            <param name="passwords">The old and new passwords of the user.</param>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IUsersService.ChangeEmailAddressAsync(System.UInt64,System.String,System.String,System.Security.Claims.ClaimsIdentity)">
            <summary>
            Changes the e-mail address of a user.
            </summary>
            <param name="userId">The ID of the user.</param>
            <param name="subDomain">The Wiser sub domain used to access the site.</param>
            <param name="newEmailAddress">The new e-mail address.</param>
            <param name="identity">The <see cref="T:System.Security.Claims.ClaimsIdentity"/> of the authenticated client.</param>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IUsersService.GetUserDataAsync(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Gets data for the logged in user, such as the encrypted ID (which is only valid for 1 hour), for use with json.jcl.
            </summary>
            <param name="identity">The <see cref="T:System.Security.Claims.ClaimsIdentity"/> of the authenticated client.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IUsersService.GetUserDataAsync(Api.Modules.Customers.Interfaces.IUsersService,System.Security.Claims.ClaimsIdentity)">
            <summary>
            Gets data for the logged in user, such as the encrypted ID (which is only valid for 1 hour), for use with json.jcl.
            </summary>
            <param name="usersService">The <see cref="T:Api.Modules.Customers.Interfaces.IUsersService"/> to use, to prevent duplicate code while using caching with the decorator pattern, while still being able to use caching in calls to other methods in this method.</param>
            <param name="identity">The <see cref="T:System.Security.Claims.ClaimsIdentity"/> of the authenticated client.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IUsersService.GetSettingsAsync(System.Security.Claims.ClaimsIdentity,System.String,System.String,System.String)">
            <summary>
            Gets settings for the authenticated user for a specific group of settings.
            </summary>
            <param name="identity">The <see cref="T:System.Security.Claims.ClaimsIdentity"/> of the authenticated client.</param>
            <param name="groupName">The group that the settings belong to.</param>
            <param name="uniqueKey">The unique key for the settings.</param>
            <param name="defaultValue">Optional: The default value to return if there is no setting saved with the given group name and key.</param>
            <returns>The settings as a JSON string.</returns>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IUsersService.GetGridSettingsAsync(System.Security.Claims.ClaimsIdentity,System.String)">
            <summary>
            Gets settings for a grid for the authenticated user, so that users can keep their state of all grids in Wiser.
            </summary>
            <param name="identity">The <see cref="T:System.Security.Claims.ClaimsIdentity"/> of the authenticated client.</param>
            <param name="uniqueKey">The unique key for the grid settings. This should be unique for each grid in Wiser, so that no 2 grids use the same settings.</param>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IUsersService.GetPinnedModulesAsync(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Gets the pinned modules for the authenticated user, so that users can keep their state of the pinned modules in Wiser.
            </summary>
            <param name="identity">The <see cref="T:System.Security.Claims.ClaimsIdentity"/> of the authenticated client.</param>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IUsersService.GetAutoLoadModulesAsync(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Gets the modules that should be auto loaded, for the authenticated user. These modules should be automatically started when the user logs in.
            </summary>
            <param name="identity">The <see cref="T:System.Security.Claims.ClaimsIdentity"/> of the authenticated client.</param>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IUsersService.SaveSettingsAsync(System.Security.Claims.ClaimsIdentity,System.String,System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Saves settings for the authenticated user that belong to a specific group.
            </summary>
            <param name="identity">The <see cref="T:System.Security.Claims.ClaimsIdentity"/> of the authenticated client.</param>
            <param name="groupName">The group that the settings belong to.</param>
            <param name="uniqueKey">The unique key for the grid settings. This should be unique for each grid in Wiser, so that no 2 grids use the same settings.</param>
            <param name="settings">A JSON object with the settings to save.</param>
            <returns>A boolean whether the save action was successful.</returns>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IUsersService.SaveGridSettingsAsync(System.Security.Claims.ClaimsIdentity,System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Saves settings for a grid for the authenticated user, so that the next time the grid is loaded, the user keeps those settings.
            </summary>
            <param name="identity">The <see cref="T:System.Security.Claims.ClaimsIdentity"/> of the authenticated client.</param>
            <param name="uniqueKey">The unique key for the grid settings. This should be unique for each grid in Wiser, so that no 2 grids use the same settings.</param>
            <param name="settings">A JSON object with the settings to save.</param>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IUsersService.SavePinnedModulesAsync(System.Security.Claims.ClaimsIdentity,System.Collections.Generic.List{System.Int32})">
            <summary>
            Save the list of pinned modules to the user details, so that next time the user will see the same pinned modules.
            </summary>
            <param name="identity">The <see cref="T:System.Security.Claims.ClaimsIdentity"/> of the authenticated client.</param>
            <param name="moduleIds">The list of module IDs that the user has pinned.</param>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IUsersService.SaveAutoLoadModulesAsync(System.Security.Claims.ClaimsIdentity,System.Collections.Generic.List{System.Int32})">
            <summary>
            Save the list of modules that should be automatically started when the user logs in, to the user details.
            </summary>
            <param name="identity">The <see cref="T:System.Security.Claims.ClaimsIdentity"/> of the authenticated client.</param>
            <param name="moduleIds">The list of module IDs that the user has set as auto load.</param>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IUsersService.GetUserEmailAddressAsync(System.UInt64)">
            <summary>
            Get the e-mail address of the user.
            </summary>
            <param name="id">The ID of the user.</param>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IUsersService.GetWiserSettingsForUserAsync(System.String)">
            <summary>
            Get some settings for Wiser.
            </summary>
            <param name="encryptionKey">The encryption key of the customer.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IUsersService.GenerateAndSaveNewRefreshTokenAsync(System.String,System.String,System.String)">
            <summary>
            Generates a new refresh token and saves it in the database. The refresh token can be used to re-authenticate without having to enter credentials again.
            </summary>
            <param name="cookieSelector"></param>
            <param name="subDomain">The Wiser sub domain used to access the site.</param>
            <param name="ticket">The serialized ticket from the OWIN context.</param>
            <returns>The newly generated refresh token.</returns>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IUsersService.UseRefreshTokenAsync(System.String,System.String)">
            <summary>
            Gets the ticket corresponding to a refresh token from the database and then deleted that refresh token, so that it can only be used once.
            </summary>
            <param name="subDomain">The Wiser sub domain used to access the site.</param>
            <param name="refreshToken">The refresh token.</param>
            <returns>The serialized ticket for OWIN context.</returns>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IUsersService.UpdateUserTimeActiveAsync(System.Security.Claims.ClaimsIdentity,System.String)">
            <summary>
            Updates the time the logged in user has been active.
            </summary>
            <param name="identity">The <see cref="T:System.Security.Claims.ClaimsIdentity"/> of the authenticated client.</param>
            <param name="encryptedLoginLogId">The encrypted ID of the log table.</param>
            <returns>An <see cref="T:System.Int64"/> indicating how long the user has been active.</returns>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IUsersService.ResetTimeActiveChangedAsync(System.Security.Claims.ClaimsIdentity,System.String)">
            <summary>
            Resets the last time the "time active" field was updated to the current time.
            </summary>
            <param name="identity">The <see cref="T:System.Security.Claims.ClaimsIdentity"/> of the authenticated client.</param>
            <param name="encryptedLoginLogId">The encrypted ID of the log table.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the request was successful.</returns>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IUsersService.GetRolesAsync(System.Boolean)">
            <summary>
            Gets all available roles for users.
            </summary>
            <param name="includePermissions">Optional: Whether to include all permissions that each role has. Default is <see langword="false"/>.</param>
            <returns>A list of <see cref="T:GeeksCoreLibrary.Core.Models.RoleModel"/> with all available roles that users can have.</returns>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IUsersService.ValidateTotpPin(System.String,System.String)">
            <summary>
            Authenticates the TOTP code with the unique key of an user (2FA).
            </summary>
            <param name="key">Secret stored key</param>
            <param name="code">Code from authenticator app</param>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IUsersService.SetUpTotpAuthentication(System.String,System.String)">
            <summary>
            Setup TOTP authentication (2FA).
            </summary>
            <param name="account">Account-name (equal to e-mail address)</param>
            <param name="key">Secret stored key</param>
            <returns>QR Image URL</returns>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IUsersService.GenerateTotpBackupCodesAsync(System.Security.Claims.ClaimsIdentity)">
            <summary>
            (Re)generate backup codes for TOTP (2FA) authentication.
            This will delete any remaining backup codes from the user and generate new ones.
            They will be hashed before they're saved in the database and can therefor only be shown to the user once!
            </summary>
            <param name="identity">The <see cref="T:System.Security.Claims.ClaimsIdentity"/> of the authenticated client.</param>
            <returns>A list with the new backup codes.</returns>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IUsersService.GetDashboardSettingsAsync(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Gets the layout data of the dashboard of the currently logged in user.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <returns>A JSON string representing the layout data.</returns>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IUsersService.SaveDashboardSettingsAsync(System.Security.Claims.ClaimsIdentity,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Saves the layout data of the dashboard to the currently logged in user.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="settings">The JSON that represents the dashboard layout data.</param>
            <returns>A boolean whether the saving of the data was successful.</returns>
        </member>
        <member name="T:Api.Modules.Customers.Interfaces.IWiserCustomersService">
            <summary>
            Interface for operations related to Wiser users (users that can log in to Wiser).
            </summary>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IWiserCustomersService.GetSingleAsync(System.Security.Claims.ClaimsIdentity,System.Boolean)">
            <summary>
            Get a single customer via <see cref="T:System.Security.Claims.ClaimsIdentity"/>.
            </summary>
            <param name="identity">The <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see> of the authenticated user.</param>
            <param name="includeDatabaseInformation">Optional: Whether to also get the connection information for the database of the customer. Default is <see langword="false"/>.</param>
            <returns>The <see cref="T:Api.Modules.Customers.Models.CustomerModel"/>.</returns>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IWiserCustomersService.GetSingleAsync(System.Int32,System.Boolean)">
            <summary>
            Get a single customer via ID.
            </summary>
            <param name="id">The ID of the customer.</param>
            <param name="includeDatabaseInformation">Optional: Whether to also get the connection information for the database of the customer. Default is <see langword="false"/>.</param>
            <returns>The <see cref="T:Api.Modules.Customers.Models.CustomerModel"/>.</returns>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IWiserCustomersService.GetEncryptionKey(System.Security.Claims.ClaimsIdentity,System.Boolean)">
            <summary>
            Get the encryption key for a customer via <see cref="T:System.Security.Claims.ClaimsIdentity"/>.
            </summary>
            <param name="identity">The <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see> of the authenticated user to check for rights.</param>
            <param name="forceLiveKey">Always give back the live encryption key, even on the test environment.</param>
            <returns>The encryption key as string.</returns>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IWiserCustomersService.DecryptValue``1(System.String,System.Security.Claims.ClaimsIdentity)">
            <summary>
            Decrypts a value using the encryption key that is saved for the customer.
            This uses the encryption that adds a date, so that these encrypted values expire after a certain amount of time.
            </summary>
            <typeparam name="T">The return type.</typeparam>
            <param name="encryptedValue">The input.</param>
            <param name="identity">The identity of the authenticated client. The customerId will be retrieved from this.</param>
            <returns>The decrypted value in the requested type.</returns>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IWiserCustomersService.DecryptValue``1(System.String,Api.Modules.Customers.Models.CustomerModel)">
            <summary>
            Decrypts a value using the encryption key that is saved for the customer.
            This uses the encryption that adds a date, so that these encrypted values expire after a certain amount of time.
            </summary>
            <typeparam name="T">The return type.</typeparam>
            <param name="encryptedValue">The input.</param>
            <param name="customer">The <see cref="T:Api.Modules.Customers.Models.CustomerModel"/>.</param>
            <returns>The decrypted value in the requested type.</returns>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IWiserCustomersService.EncryptValue(System.Object,System.Security.Claims.ClaimsIdentity)">
            <summary>
            Encrypts a value using the encryption key that is saved for the customer.
            This uses the encryption that adds a date, so that these encrypted values expire after a certain amount of time.
            </summary>
            <param name="valueToEncrypt">The input.</param>
            <param name="identity">The identity of the authenticated client. The customerId will be retrieved from this.</param>
            <returns>The decrypted value in the requested type.</returns>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IWiserCustomersService.EncryptValue(System.Object,Api.Modules.Customers.Models.CustomerModel)">
            <summary>
            Encrypts a value using the encryption key that is saved for the customer.
            This uses the encryption that adds a date, so that these encrypted values expire after a certain amount of time.
            </summary>
            <param name="valueToEncrypt">The input.</param>
            <param name="customer">The <see cref="T:Api.Modules.Customers.Models.CustomerModel"/>.</param>
            <returns>The decrypted value in the requested type.</returns>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IWiserCustomersService.CustomerExistsAsync(System.String,System.String)">
            <summary>
            Check if a customer already exists.
            </summary>
            <param name="name">The name of the customer.</param>
            <param name="subDomain">The sub domain of the customer.</param>
            <returns>A <see cref="T:Api.Modules.Customers.Enums.CustomerExistsResults"/>.</returns>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IWiserCustomersService.CreateCustomerAsync(Api.Modules.Customers.Models.CustomerModel,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new Wiser customer/tenant.
            </summary>
            <param name="customer">The data for the new customer.</param>
            <param name="isWebShop">Optional: Indicate whether or not this customer is getting a webshop. Default is <see langword="false"/>.</param>
            <param name="isConfigurator">Optional: Indicate whether or not this customer is getting a configurator. Default is <see langword="false"/>.</param>
            <param name="isMultiLanguage">Optional: Indicate whether or not the website is going to support multiple languages.</param>
            <returns>The newly created <see cref="T:Api.Modules.Customers.Models.CustomerModel"/>.</returns>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IWiserCustomersService.GetTitleAsync(System.String)">
            <summary>
            Gets the title for the browser tab for a customer, based on sub domain.
            </summary>
            <param name="subDomain">The sub domain of the customer.</param>
            <returns>The title for the browser tab.</returns>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IWiserCustomersService.IsMainDatabase(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Get whether or not a sub domain is empty or the sub domain of the main Wiser database.
            </summary>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IWiserCustomersService.IsMainDatabase(System.String)">
            <summary>
            Get whether or not a sub domain is empty or the sub domain of the main Wiser database.
            </summary>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IWiserCustomersService.CreateOrUpdateCustomerAsync(Api.Modules.Customers.Models.CustomerModel)">
            <summary>
            Inserts or updates a customer in the database, based on <see cref="P:Api.Modules.Customers.Models.CustomerModel.Id"/>.
            </summary>
            <param name="customer">The customer to add or update.</param>
        </member>
        <member name="M:Api.Modules.Customers.Interfaces.IWiserCustomersService.GenerateConnectionStringFromCustomer(Api.Modules.Customers.Models.CustomerModel,System.Boolean)">
            <summary>
            Generates a connection string for a customer.
            </summary>
            <param name="customer">The customer.</param>
            <param name="passwordIsEncrypted">Whether the password is saved encrypted in the <see cref="T:Api.Modules.Customers.Models.CustomerModel"/>.</param>
        </member>
        <member name="T:Api.Modules.Customers.Models.ApiTableNames">
            <summary>
            Names of tables that are only used in the Wiser API.
            </summary>
        </member>
        <member name="F:Api.Modules.Customers.Models.ApiTableNames.WiserCustomers">
            <summary>
            The table that contains all tenants/customers of Wiser.
            </summary>
        </member>
        <member name="T:Api.Modules.Customers.Models.ChangePasswordModel">
            <summary>
            A model with properties to change a password.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.ChangePasswordModel.OldPassword">
            <summary>
            The old password.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.ChangePasswordModel.NewPassword">
            <summary>
            The new password.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.ChangePasswordModel.NewPasswordRepeat">
            <summary>
            The new password for a second time, has to be the same as <see cref="P:Api.Modules.Customers.Models.ChangePasswordModel.NewPassword">NewPassword</see>.
            </summary>
        </member>
        <member name="T:Api.Modules.Customers.Models.ConnectionInformationModel">
            <summary>
            A model with connection information. Can be used to store credentials to a database connection or an FTP connection or something similar.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.ConnectionInformationModel.Host">
            <summary>
            Gets or sets the hostname / IP address.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.ConnectionInformationModel.Username">
            <summary>
            Gets or sets the username.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.ConnectionInformationModel.Password">
            <summary>
            Gets or sets the (encrypted) password.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.ConnectionInformationModel.PortNumber">
            <summary>
            Gets or sets the port number.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.ConnectionInformationModel.DatabaseName">
            <summary>
            Gets or sets the name of the database. Only used for connections with a databases (obviously).
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.ConnectionInformationModel.RootFolder">
            <summary>
            Gets or sets the root folder. Only used for FTP connections.
            </summary>
        </member>
        <member name="T:Api.Modules.Customers.Models.CustomerInformationModel">
            <summary>
            Information about the authenticated user.
            This is used for some controller methods where it's not possible to authenticate via OAUTH2, such as an URL to a file.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.CustomerInformationModel.encryptedCustomerId">
            <summary>
            Gets or sets the encrypted ID of the customer the user belongs to.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.CustomerInformationModel.encryptedUserId">
            <summary>
            Gets or sets the encrypted ID the authenticated user.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.CustomerInformationModel.username">
            <summary>
            Gets or sets the name of the user.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.CustomerInformationModel.userEmailAddress">
            <summary>
            Gets or sets the e-mail address.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.CustomerInformationModel.userType">
            <summary>
            Gets or sets the type of user. 
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.CustomerInformationModel.isTest">
            <summary>
            Gets or sets whether this is a test environment.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.CustomerInformationModel.subDomain">
            <summary>
            Gets or sets the sub domain that is being used for Wiser.
            </summary>
        </member>
        <member name="T:Api.Modules.Customers.Models.CustomerModel">
            <summary>
            A customer that uses Wiser.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.CustomerModel.Id">
            <summary>
            Gets or sets the unique internal ID of this item.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.CustomerModel.CustomerId">
            <summary>
            Gets or sets the customer ID. In most cases this is the same as <see cref="P:Api.Modules.Customers.Models.CustomerModel.Id"/>, but there are exception.
            This is a separate database column that can be used to enter the ID of another customer, if you copied the database of that customer,
            because that ID is saved in several tables, which you don't have to change then.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.CustomerModel.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.CustomerModel.Database">
            <summary>
            Gets or sets the information required to connect to the database of the customer.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.CustomerModel.EncryptionKey">
            <summary>
            Gets or sets the encryption key for Wiser data.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.CustomerModel.SubDomain">
            <summary>
            Gets or sets the sub domain for Wiser.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.CustomerModel.WiserTitle">
            <summary>
            Gets or sets the title to show in the browser tab when the user opens Wiser for this tenant/customer.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.CustomerModel.WiserSettings">
            <summary>
            Gets or sets extra Wiser settings, for easy_objects.
            This is only used for creating a new customer via Wiser 3.
            </summary>
        </member>
        <member name="M:Api.Modules.Customers.Models.CustomerModel.FromDataRow(System.Data.DataRow)">
            <summary>
            Convert a <see cref="T:System.Data.DataRow"/> to an <see cref="T:Api.Modules.Customers.Models.CustomerModel"/>.
            </summary>
            <param name="dataRow">The <see cref="T:System.Data.DataRow"/> to convert.</param>
            <returns></returns>
        </member>
        <member name="T:Api.Modules.Customers.Models.MergeChangesToMainBranchResultModel">
            <summary>
            A model for the result for synchronising changes from an environment to the production environment of a customer/tenant.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.MergeChangesToMainBranchResultModel.SuccessfulChanges">
            <summary>
            Gets or sets the amount of successfully synchronised changes.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.MergeChangesToMainBranchResultModel.Errors">
            <summary>
            Gets or sets the list of errors that occurred.
            </summary>
        </member>
        <member name="T:Api.Modules.Customers.Models.ResetPasswordRequestModel">
            <summary>
            A model to request a password reset.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.ResetPasswordRequestModel.Username">
            <summary>
            Gets or sets the username of the user that forgot their password.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.ResetPasswordRequestModel.EmailAddress">
            <summary>
            Gets or sets the e-mail address of the user that forgot their password.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.ResetPasswordRequestModel.LanguageCode">
            <summary>
            Optional: Gets or sets the language code of the language used in Wiser. Default is "nl".
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.ResetPasswordRequestModel.SubDomain">
            <summary>
            Gets or sets the Wiser sub domain used to access the site.
            </summary>
        </member>
        <member name="T:Api.Modules.Customers.Models.TotpAuthenticationModel">
            <summary>
            A mode for using time-based one-time password authentication in Wiser.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.TotpAuthenticationModel.RequiresSetup">
            <summary>
            Gets or sets whether Google Authentication still needs to be setup for the user.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.TotpAuthenticationModel.Enabled">
            <summary>
            Gets or sets whether to use Google Authentication for the user.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.TotpAuthenticationModel.QrImageUrl">
            <summary>
            Gets or sets the URL for the QR code image.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.TotpAuthenticationModel.SecretKey">
            <summary>
            Gets or sets the secure ID.
            </summary>
        </member>
        <member name="T:Api.Modules.Customers.Models.UserModel">
            <summary>
            A Wiser user.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.UserModel.Id">
            <summary>
            Gets or sets the unique ID of this user.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.UserModel.EncryptedId">
            <summary>
            Gets or sets the encrypted ID for Wiser.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.UserModel.Name">
            <summary>
            Gets or sets the full name.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.UserModel.EncryptedCustomerId">
            <summary>
             Gets or sets the encrypted customer if for Wiser.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.UserModel.Password">
            <summary>
            Gets or sets the password.
            Will not be serialized to the output, only for internal usage.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.UserModel.Username">
            <summary>
            Gets or sets the username (for logging in).
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.UserModel.EmailAddress">
            <summary>
            Gets or sets the e-mail address.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.UserModel.LastLoginDate">
            <summary>
            Gets or sets the date and time of the user's last successful login attempt.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.UserModel.LastLoginIpAddress">
            <summary>
            Gets or sets the IP address the used used during it's last successful login attempt.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.UserModel.TotpAuthentication">
            <summary>
            Gets or sets the TOTP settings (2FA).
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.UserModel.CurrentBranchName">
            <summary>
            Gets or sets the name of the current branch / customer.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.UserModel.CurrentBranchId">
            <summary>
            Gets or sets the ID of the current branch / customer.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.UserModel.MainBranchName">
            <summary>
            Gets or sets the name of the main branch / customer.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.UserModel.CurrentBranchIsMainBranch">
            <summary>
            Gets or sets whether the current environment is the production environment.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.UserModel.CookieValue">
            <summary>
            Gets or sets the value that should be saved in a "Remember me" cookie. This will only contain a value if returned by the login method.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.UserModel.RequirePasswordChange">
            <summary>
            Gets or sets whether the user has to change their password the next time they login.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.UserModel.Role">
            <summary>
            Gets or sets the role of the user.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.UserModel.ZeroEncrypted">
            <summary>
            Gets or sets the number 0, encrypted with the user's encryption ID.
            This is needed for some Wiser API functions.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.UserModel.FilesRootId">
            <summary>
            Gets or sets the (encrypted) ID of the root directory for the general file uploader.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.UserModel.PlainFilesRootId">
            <summary>
            Gets or sets the plain ID of the root directory for general file uploader.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.UserModel.ImagesRootId">
            <summary>
            Gets or sets the (encrypted) ID of the root directory for the general image uploader.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.UserModel.PlainImagesRootId">
            <summary>
            Gets or sets the plain ID of the root directory for general image uploader.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.UserModel.TemplatesRootId">
            <summary>
            Gets or sets the (encrypted) ID of the root directory for the general template uploader.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.UserModel.PlainTemplatesRootId">
            <summary>
            Gets or sets the plain ID of the root directory for general template uploader.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.UserModel.MainDomain">
            <summary>
            Gets or sets the main domain. This is used for generating URLs for images, files etc in HTML editors.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.UserModel.EncryptedLoginLogId">
            <summary>
            Gets or sets the encrypted ID of the entry in the login log table.
            This will be used to update the time the user is active.
            </summary>
        </member>
        <member name="T:Api.Modules.Customers.Models.ValidateCookieModel">
            <summary>
            A model for validating authentication cookies / tokens.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.ValidateCookieModel.Success">
            <summary>
            Gets or sets whether the authentication was successful.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.ValidateCookieModel.MessageOrValue">
            <summary>
            Gets or sets the value or (error) message.
            </summary>
        </member>
        <member name="P:Api.Modules.Customers.Models.ValidateCookieModel.UserData">
            <summary>
            Gets or sets the data of the authenticated user.
            </summary>
        </member>
        <member name="T:Api.Modules.Customers.Services.CachedUsersService">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedUsersService.#ctor(LazyCache.IAppCache,Microsoft.Extensions.Options.IOptions{Api.Core.Models.ApiSettings},GeeksCoreLibrary.Core.Interfaces.ICacheService,Api.Modules.Customers.Interfaces.IUsersService,GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection)">
            <summary>
            Creates a new instance of CachedUsersService.
            </summary>
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedUsersService.GetAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedUsersService.LoginAdminAccountAsync(System.String,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedUsersService.LoginCustomerAsync(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Security.Claims.ClaimsIdentity,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedUsersService.ResetPasswordAsync(Api.Modules.Customers.Models.ResetPasswordRequestModel,System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedUsersService.ValidateLoginCookieAsync(System.String,System.String,System.String,System.String,System.String,System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedUsersService.ChangePasswordAsync(System.Security.Claims.ClaimsIdentity,Api.Modules.Customers.Models.ChangePasswordModel)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedUsersService.ChangeEmailAddressAsync(System.UInt64,System.String,System.String,System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedUsersService.GetUserDataAsync(System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedUsersService.GetUserDataAsync(Api.Modules.Customers.Interfaces.IUsersService,System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedUsersService.GetSettingsAsync(System.Security.Claims.ClaimsIdentity,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedUsersService.GetGridSettingsAsync(System.Security.Claims.ClaimsIdentity,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedUsersService.GetPinnedModulesAsync(System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedUsersService.GetAutoLoadModulesAsync(System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedUsersService.SaveSettingsAsync(System.Security.Claims.ClaimsIdentity,System.String,System.String,Newtonsoft.Json.Linq.JToken)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedUsersService.SaveGridSettingsAsync(System.Security.Claims.ClaimsIdentity,System.String,Newtonsoft.Json.Linq.JToken)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedUsersService.SavePinnedModulesAsync(System.Security.Claims.ClaimsIdentity,System.Collections.Generic.List{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedUsersService.SaveAutoLoadModulesAsync(System.Security.Claims.ClaimsIdentity,System.Collections.Generic.List{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedUsersService.GetUserEmailAddressAsync(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedUsersService.GetWiserSettingsForUserAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedUsersService.GenerateAndSaveNewRefreshTokenAsync(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedUsersService.UseRefreshTokenAsync(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedUsersService.UpdateUserTimeActiveAsync(System.Security.Claims.ClaimsIdentity,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedUsersService.ResetTimeActiveChangedAsync(System.Security.Claims.ClaimsIdentity,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedUsersService.GetRolesAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedUsersService.ValidateTotpPin(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedUsersService.SetUpTotpAuthentication(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedUsersService.GenerateTotpBackupCodesAsync(System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedUsersService.GetDashboardSettingsAsync(System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedUsersService.SaveDashboardSettingsAsync(System.Security.Claims.ClaimsIdentity,Newtonsoft.Json.Linq.JToken)">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.Customers.Services.CachedWiserCustomersService">
            <summary>
            Service for operations related to Wiser customers.
            </summary>
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedWiserCustomersService.#ctor(LazyCache.IAppCache,Microsoft.Extensions.Options.IOptions{Api.Core.Models.ApiSettings},GeeksCoreLibrary.Core.Interfaces.ICacheService,Api.Modules.Customers.Interfaces.IWiserCustomersService)">
            <summary>
            Creates a new instance of WiserCustomersService.
            </summary>
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedWiserCustomersService.GetSingleAsync(System.Security.Claims.ClaimsIdentity,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedWiserCustomersService.GetSingleAsync(System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedWiserCustomersService.GetEncryptionKey(System.Security.Claims.ClaimsIdentity,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedWiserCustomersService.DecryptValue``1(System.String,System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedWiserCustomersService.DecryptValue``1(System.String,Api.Modules.Customers.Models.CustomerModel)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedWiserCustomersService.EncryptValue(System.Object,System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedWiserCustomersService.EncryptValue(System.Object,Api.Modules.Customers.Models.CustomerModel)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedWiserCustomersService.CustomerExistsAsync(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedWiserCustomersService.CreateCustomerAsync(Api.Modules.Customers.Models.CustomerModel,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedWiserCustomersService.GetTitleAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedWiserCustomersService.IsMainDatabase(System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedWiserCustomersService.IsMainDatabase(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedWiserCustomersService.CreateOrUpdateCustomerAsync(Api.Modules.Customers.Models.CustomerModel)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.CachedWiserCustomersService.GenerateConnectionStringFromCustomer(Api.Modules.Customers.Models.CustomerModel,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.Customers.Services.UsersService">
            <summary>
            Service for operations related to Wiser users (users that can log in to Wiser).
            </summary>
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.#ctor(Api.Modules.Customers.Interfaces.IWiserCustomersService,Microsoft.Extensions.Options.IOptions{Api.Core.Models.ApiSettings},GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection,Microsoft.Extensions.Logging.ILogger{Api.Modules.Customers.Services.UsersService},Api.Modules.Templates.Interfaces.ITemplatesService,GeeksCoreLibrary.Modules.Communication.Interfaces.ICommunicationsService,Microsoft.Extensions.Options.IOptions{GeeksCoreLibrary.Core.Models.GclSettings},GeeksCoreLibrary.Core.Interfaces.IRolesService,GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseHelpersService)">
            <summary>
            Initializes a new instance of <see cref="T:Api.Modules.Customers.Services.UsersService"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.GetAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.LoginAdminAccountAsync(System.String,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.LoginCustomerAsync(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Security.Claims.ClaimsIdentity,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.ResetPasswordAsync(Api.Modules.Customers.Models.ResetPasswordRequestModel,System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.ValidateLoginCookieAsync(System.String,System.String,System.String,System.String,System.String,System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.ChangePasswordAsync(System.Security.Claims.ClaimsIdentity,Api.Modules.Customers.Models.ChangePasswordModel)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.ChangeEmailAddressAsync(System.UInt64,System.String,System.String,System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.GetUserDataAsync(System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.GetUserDataAsync(Api.Modules.Customers.Interfaces.IUsersService,System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.GetSettingsAsync(System.Security.Claims.ClaimsIdentity,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.GetGridSettingsAsync(System.Security.Claims.ClaimsIdentity,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.GetPinnedModulesAsync(System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.GetAutoLoadModulesAsync(System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.SaveSettingsAsync(System.Security.Claims.ClaimsIdentity,System.String,System.String,Newtonsoft.Json.Linq.JToken)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.SaveGridSettingsAsync(System.Security.Claims.ClaimsIdentity,System.String,Newtonsoft.Json.Linq.JToken)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.SavePinnedModulesAsync(System.Security.Claims.ClaimsIdentity,System.Collections.Generic.List{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.SaveAutoLoadModulesAsync(System.Security.Claims.ClaimsIdentity,System.Collections.Generic.List{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.GetUserEmailAddressAsync(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.GetWiserSettingsForUserAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.GenerateAndSaveNewRefreshTokenAsync(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.UseRefreshTokenAsync(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.UpdateUserTimeActiveAsync(System.Security.Claims.ClaimsIdentity,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.ResetTimeActiveChangedAsync(System.Security.Claims.ClaimsIdentity,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.GetRolesAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.GetDashboardSettingsAsync(System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.SaveDashboardSettingsAsync(System.Security.Claims.ClaimsIdentity,Newtonsoft.Json.Linq.JToken)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.ValidateAdminAccountAsync(System.String,System.Security.Claims.ClaimsIdentity)">
            <summary>
            Validates an encrypted admin account ID.
            It checks if it contains a valid integer and then checks in the database if that ID actually exists and whether that user is still active.
            </summary>
            <param name="encryptedAdminAccountId">The encrypted admin account ID.</param>
            <param name="identity">The <see cref="T:System.Security.Claims.ClaimsIdentity">ClaimsIdentity</see> of the authenticated user to check for rights.</param>
            <returns>A boolean indicating whether this admin account is valid and still active.</returns>
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.ValidateAdminAccountIdAsync(System.UInt64,System.Security.Claims.ClaimsIdentity)">
            <summary>
            Validates the ID of an admin account, to check if that user exists and is still active.
            </summary>
            <param name="id">The ID of the admin account.</param>
            <param name="identity">Optional: The <see cref="T:System.Security.Claims.ClaimsIdentity"/> of the authenticated user.</param>
            <returns>A boolean, indicating whether this admin account is allowed to login or not.</returns>
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.GenerateNewCookieTokenAsync(System.UInt64)">
            <summary>
            Generates a new token for a "remember me" cookie.
            </summary>
            <param name="userId">The ID of the user to generate the token for.</param>
            <returns>The value that should be saved in the cookie.</returns>
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.UsernameIsBlockedAsync(System.String,GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection,System.Int32,System.String)">
            <summary>
            Check in the database whether a certain username is blocked from logging in as a customer or admin account.
            </summary>
            <param name="username">The username to check.</param>
            <param name="connection"></param>
            <param name="maximumLoginAttemptsAllowed"></param>
            <param name="loginAttemptsTableName"></param>
            <returns>true = blocked, false = not blocked</returns>
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.AddFailedLoginAttemptAsync(System.String,System.String)">
            <summary>
            Increases the failed login attempts counter for an IP address in the database.
            </summary>
            <param name="ipAddress">The IP address that is trying to login.</param>
            <param name="username">The username that is trying to login.</param>
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.ResetFailedLoginAttemptAsync(System.String)">
            <summary>
            Reset the failed login attempts counter for an username in the database.
            </summary>
            <param name="username">The username that is trying to login.</param>
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.LogDateAndIpOfLoginAsync(System.String,System.UInt64)">
            <summary>
            Logs the current date time and the IP address of the user at the moment they logged in.
            </summary>
            <param name="ipAddress">The IP address of the user.</param>
            <param name="userId">The ID of the user.</param>
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.LogSuccessfulLoginAttemptAsync(System.UInt64)">
            <summary>
            Add an entry to the login log table.
            </summary>
            <param name="userId"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.ValidateTotpPin(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.SetUpTotpAuthentication(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.GenerateTotpBackupCodesAsync(System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.HandleTotpAuthenticationAsync(System.String,System.String,Api.Modules.Customers.Models.TotpAuthenticationModel,System.UInt64,System.String,GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection)">
            <summary>
            Handle TOTP authentication for users and admins.
            </summary>
            <param name="totpPin">The TOTP PIN that the user entered, if any.</param>
            <param name="totpBackupCode">The TOTP backup code that the user entered, if any.</param>
            <param name="totpAuthentication">The <see cref="T:Api.Modules.Customers.Models.TotpAuthenticationModel"/> with the TOTP settings.</param>
            <param name="userId">The ID of the user.</param>
            <param name="userName">The full name of the user</param>
            <param name="connectionToUse">The database connection to use (wiserDatabaseConnection for admins and clientDatabaseConnection for normal users).</param>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Customers.Services.UsersService.KeepTablesUpToDateAsync(System.String)">
            <summary>
            Checks if the MySQL tables for the login log is up-to-date.
            </summary>
        </member>
        <member name="T:Api.Modules.Customers.Services.WiserCustomersService">
            <summary>
            Service for operations related to Wiser customers.
            </summary>
        </member>
        <member name="M:Api.Modules.Customers.Services.WiserCustomersService.#ctor(GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection,Microsoft.Extensions.Options.IOptions{Api.Core.Models.ApiSettings},Microsoft.Extensions.Options.IOptions{GeeksCoreLibrary.Core.Models.GclSettings},GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseHelpersService,Microsoft.Extensions.Logging.ILogger{Api.Modules.Customers.Services.WiserCustomersService},Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            Creates a new instance of WiserCustomersService.
            </summary>
        </member>
        <member name="M:Api.Modules.Customers.Services.WiserCustomersService.GetSingleAsync(System.Security.Claims.ClaimsIdentity,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.WiserCustomersService.GetSingleAsync(System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.WiserCustomersService.GetEncryptionKey(System.Security.Claims.ClaimsIdentity,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.WiserCustomersService.DecryptValue``1(System.String,System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.WiserCustomersService.DecryptValue``1(System.String,Api.Modules.Customers.Models.CustomerModel)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.WiserCustomersService.EncryptValue(System.Object,System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.WiserCustomersService.EncryptValue(System.Object,Api.Modules.Customers.Models.CustomerModel)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.WiserCustomersService.CustomerExistsAsync(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.WiserCustomersService.CreateCustomerAsync(Api.Modules.Customers.Models.CustomerModel,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.WiserCustomersService.GetTitleAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.WiserCustomersService.IsMainDatabase(System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.WiserCustomersService.IsMainDatabase(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.WiserCustomersService.CreateOrUpdateCustomerAsync(Api.Modules.Customers.Models.CustomerModel)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Customers.Services.WiserCustomersService.GenerateConnectionStringFromCustomer(Api.Modules.Customers.Models.CustomerModel,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.Dashboard.Controllers.DashboardController">
            <summary>
            A controller for the content builder, to get HTML, snippets etc.
            </summary>
        </member>
        <member name="M:Api.Modules.Dashboard.Controllers.DashboardController.#ctor(Api.Modules.Dashboard.Interfaces.IDashboardService)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.Dashboard.Controllers.DashboardController"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.Dashboard.Controllers.DashboardController.Get(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Boolean)">
            <summary>
            Retrieve dashboard data.
            </summary>
            <param name="periodFrom">The minimum <see cref="T:System.DateTime"/> of the data.</param>
            <param name="periodTo">The maximum <see cref="T:System.DateTime"/> of the data.</param>
            <param name="branchId">Which branch should be used. A value of 0 means current branch, and -1 means all branches.</param>
            <param name="forceRefresh">Whether the data should be refreshed instead of cached data being used.</param>
            <returns>A <see cref="T:Api.Modules.Dashboard.Models.DashboardDataModel"/> object.</returns>
        </member>
        <member name="M:Api.Modules.Dashboard.Controllers.DashboardController.GetDataSelectorResultAsync">
            <summary>
            Gets the result of the data selector that has the "show in dashboard" option enabled, or null if no data
            selector has that option enabled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Dashboard.Controllers.DashboardController.GetWtsServicesAsync">
            <summary>
            Get the services from the WTS.
            </summary>
            <returns>A <see cref="T:GeeksCoreLibrary.Modules.WiserDashboard.Models.Service"/> object containing various information about the usage of Wiser.</returns>
        </member>
        <member name="M:Api.Modules.Dashboard.Controllers.DashboardController.PauseServiceAsync(System.Int32,System.Boolean)">
            <summary>
            Pause or unpause a service from the WTS.
            </summary>
            <param name="id">The ID of the service to change the state of.</param>
            <param name="state">The state to set. True to pause, false to unpause.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Dashboard.Controllers.DashboardController.ExtraRunServiceAsync(System.Int32,System.Boolean)">
            <summary>
            Mark or unmark a service from the WTS to perform an extra run.
            </summary>
            <param name="id">The ID of the service to change the state of.</param>
            <param name="state">The state to set. True to mark, false to unmark.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Dashboard.Controllers.DashboardController.GetWtsServiceLogsAsync(System.Int32)">
            <summary>
            Get the logs from a specific service.
            </summary>
            <param name="id">The ID of the service.</param>
            <returns></returns>
        </member>
        <member name="T:Api.Modules.Dashboard.Enums.PeriodFilterTypes">
            <summary>
            Determines how the data period filter affects which items are retrieved.
            </summary>
        </member>
        <member name="F:Api.Modules.Dashboard.Enums.PeriodFilterTypes.All">
            <summary>
            Retrieve all items (ignores period filter).
            </summary>
        </member>
        <member name="F:Api.Modules.Dashboard.Enums.PeriodFilterTypes.NewlyCreated">
            <summary>
            Retrieve all items that were created within the period filter.
            </summary>
        </member>
        <member name="F:Api.Modules.Dashboard.Enums.PeriodFilterTypes.Changed">
            <summary>
            Retrieve all items that were changed within the period filter.
            </summary>
        </member>
        <member name="F:Api.Modules.Dashboard.Enums.PeriodFilterTypes.Active">
            <summary>
            TODO: No function yet.
            </summary>
        </member>
        <member name="F:Api.Modules.Dashboard.Enums.PeriodFilterTypes.Archived">
            <summary>
            TODO: No function yet.
            </summary>
        </member>
        <member name="T:Api.Modules.Dashboard.Enums.ServiceExtraRunStates">
            <summary>
            All of the states a Service can be in when for an Extra Run
            </summary>
        </member>
        <member name="F:Api.Modules.Dashboard.Enums.ServiceExtraRunStates.Marked">
            <summary>
            Service is marked to make an extra run.
            </summary>
        </member>
        <member name="F:Api.Modules.Dashboard.Enums.ServiceExtraRunStates.Unmarked">
            <summary>
            Service is unmarked to make an extra run, extra run request has been cancelled.
            </summary>
        </member>
        <member name="F:Api.Modules.Dashboard.Enums.ServiceExtraRunStates.ServiceRunning">
            <summary>
            Service is currently running and state can't be changed.
            </summary>
        </member>
        <member name="F:Api.Modules.Dashboard.Enums.ServiceExtraRunStates.WtsOffline">
            <summary>
            Service is not being run by an WTS and can't be started.
            </summary>
        </member>
        <member name="T:Api.Modules.Dashboard.Enums.ServicePauseStates">
            <summary>
            An enum with all the states that a ServicePause can have
            </summary>
        </member>
        <member name="F:Api.Modules.Dashboard.Enums.ServicePauseStates.Paused">
            <summary>
            The Service is Paused
            </summary>
        </member>
        <member name="F:Api.Modules.Dashboard.Enums.ServicePauseStates.Unpaused">
            <summary>
            The Service is Unpaused
            </summary>
        </member>
        <member name="F:Api.Modules.Dashboard.Enums.ServicePauseStates.WillPauseAfterRunFinished">
            <summary>
            The Service will Pause after a run has finished
            </summary>
        </member>
        <member name="T:Api.Modules.Dashboard.Interfaces.IDashboardService">
            <summary>
            A service for the dashboard, to get usage data, etc.
            </summary>
        </member>
        <member name="M:Api.Modules.Dashboard.Interfaces.IDashboardService.GetDataAsync(System.Security.Claims.ClaimsIdentity,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Boolean)">
            <summary>
            Retrieves the data for the dashboard. The default data will be cached for a day (in the database), but can optionally be forced to be refreshed.
            If <paramref name="periodFrom"/> and/or <paramref name="periodTo"/> is set, the data will always be retrieved on-demand.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="periodFrom">Optional: The starting date and time to limit the time period of the data. The default is <see langword="null"/>.</param>
            <param name="periodTo">Optional: The ending date time to limit the time period of the data. The default is <see langword="null"/>.</param>
            <param name="branchId">Optional: The ID of the branch. The default is 0, which refers to the current branch.</param>
            <param name="forceRefresh">Optional: Whether to force a refresh of the data. The default is false.</param>
            <returns>A <see cref="T:Api.Modules.Dashboard.Models.DashboardDataModel"/> object containing various information about the usage of Wiser.</returns>
        </member>
        <member name="M:Api.Modules.Dashboard.Interfaces.IDashboardService.GetWtsServicesAsync(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Retrieves the latest state of the services managed by the WTS.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <returns>A collection of <see cref="T:GeeksCoreLibrary.Modules.WiserDashboard.Models.Service"/> objects.</returns>
        </member>
        <member name="M:Api.Modules.Dashboard.Interfaces.IDashboardService.GetWtsServiceLogsAsync(System.Security.Claims.ClaimsIdentity,System.Int32)">
            <summary>
            Retrieves the logs from the given service.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="id">The ID of the service to get the logs from.</param>
            <returns>A collection of logs.</returns>
        </member>
        <member name="M:Api.Modules.Dashboard.Interfaces.IDashboardService.SetWtsServicePauseStateAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.Boolean)">
            <summary>
            Set the pause state of a service.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="id">The ID of the service to set the pause state of.</param>
            <param name="state">The pause state.</param>
            <returns>Returns the pause state based on the given action.</returns>
        </member>
        <member name="M:Api.Modules.Dashboard.Interfaces.IDashboardService.SetWtsServiceExtraRunStateAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.Boolean)">
            <summary>
            Set the extra run state of a service.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="id">The ID of the service to set the extra run state of.</param>
            <param name="state">The extra run state.</param>
            <returns>Returns the extra run state based on the given action.</returns>
        </member>
        <member name="M:Api.Modules.Dashboard.Interfaces.IDashboardService.GetDataSelectorResultAsync(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Gets the result from the data selector that has the option "show in dashboard" enabled. If no data selector has
            that option enabled, <see langword="null"/> is returned instead.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken"/> containing the data selector result.</returns>
        </member>
        <member name="T:Api.Modules.Dashboard.Models.DashboardDataModel">
            <summary>
            This class describes an object for Data in an Dashboard
            </summary>
        </member>
        <member name="P:Api.Modules.Dashboard.Models.DashboardDataModel.Items">
            <summary>
            Gets or sets a list of entities with their usage. This list will contain the 8 entities with the highest amount of entities.
            </summary>
        </member>
        <member name="P:Api.Modules.Dashboard.Models.DashboardDataModel.Entities">
            <summary>
            Gets or sets the entities data. This is a count of the total amount of items for these entities, as well as the
            module ID and icon that is associated with the entities.
            </summary>
        </member>
        <member name="P:Api.Modules.Dashboard.Models.DashboardDataModel.UserLoginCountTop10">
            <summary>
            Gets or sets the amount of times the top 10 users have logged in.
            </summary>
        </member>
        <member name="P:Api.Modules.Dashboard.Models.DashboardDataModel.UserLoginCountOther">
            <summary>
            Gets or sets the amount of times all other users have logged in (users that aren't in the top 10).
            </summary>
        </member>
        <member name="P:Api.Modules.Dashboard.Models.DashboardDataModel.UserLoginActiveTop10">
            <summary>
            Gets or sets the amount of time in seconds the top 10 users have spent logged in.
            </summary>
        </member>
        <member name="P:Api.Modules.Dashboard.Models.DashboardDataModel.UserLoginActiveOther">
            <summary>
            Gets or sets the amount of time in seconds all other users have spent logged in (users that aren't in the top 10).
            </summary>
        </member>
        <member name="P:Api.Modules.Dashboard.Models.DashboardDataModel.OpenTaskAlerts">
            <summary>
            Gets or sets the dictionary containing the open task alerts.
            The key is the name of the user and the value the amount of task alerts that are still open for that user.
            </summary>
        </member>
        <member name="T:Api.Modules.Dashboard.Models.ItemsCountModel">
            <summary>
            This class describes an object that keeps count of the amount of items that an Entity has
            </summary>
        </member>
        <member name="P:Api.Modules.Dashboard.Models.ItemsCountModel.EntityName">
            <summary>
            Gets or sets the name of the entity. This will be the friendly name if the entity has one.
            </summary>
        </member>
        <member name="P:Api.Modules.Dashboard.Models.ItemsCountModel.AmountOfItems">
            <summary>
            Gets or sets the amount of items that have this entity type.
            </summary>
        </member>
        <member name="P:Api.Modules.Dashboard.Models.ItemsCountModel.AmountOfArchivedItems">
            <summary>
            Gets or sets the amount of items in the archive that have this entity type.
            </summary>
        </member>
        <member name="T:Api.Modules.Dashboard.Models.ServiceLog">
            <summary>
            This class describes an object that keeps a log of a service
            </summary>
        </member>
        <member name="P:Api.Modules.Dashboard.Models.ServiceLog.Id">
            <summary>
            Gets or sets the ID of the log.
            </summary>
        </member>
        <member name="P:Api.Modules.Dashboard.Models.ServiceLog.Level">
            <summary>
            Gets or sets the level the log has been written on.
            </summary>
        </member>
        <member name="P:Api.Modules.Dashboard.Models.ServiceLog.Scope">
            <summary>
            Gets or sets the scope that generated the log.
            </summary>
        </member>
        <member name="P:Api.Modules.Dashboard.Models.ServiceLog.Source">
            <summary>
            Gets or sets the source of the log.
            </summary>
        </member>
        <member name="P:Api.Modules.Dashboard.Models.ServiceLog.Configuration">
            <summary>
            Gets or sets the name of the configuration that generated the log.
            </summary>
        </member>
        <member name="P:Api.Modules.Dashboard.Models.ServiceLog.TimeId">
            <summary>
            Gets or sets the time ID of the run scheme that generated the log.
            </summary>
        </member>
        <member name="P:Api.Modules.Dashboard.Models.ServiceLog.Order">
            <summary>
            Gets or sets the order of the action that generated the log.
            </summary>
        </member>
        <member name="P:Api.Modules.Dashboard.Models.ServiceLog.AddedOn">
            <summary>
            Gets or sets the date the log has been added on.
            </summary>
        </member>
        <member name="P:Api.Modules.Dashboard.Models.ServiceLog.Message">
            <summary>
            Gets or sets the content of the log.
            </summary>
        </member>
        <member name="P:Api.Modules.Dashboard.Models.ServiceLog.IsTest">
            <summary>
            Gets or sets if the log is from a test environment.
            </summary>
        </member>
        <member name="T:Api.Modules.Dashboard.Models.UserDataModel">
            <summary>
            This class describes an object that keeps login data about a user
            </summary>
        </member>
        <member name="P:Api.Modules.Dashboard.Models.UserDataModel.Username">
            <summary>
            Gets or sets the name of the user.
            </summary>
        </member>
        <member name="P:Api.Modules.Dashboard.Models.UserDataModel.LoginCount">
            <summary>
            Gets or sets the amount of times the user has logged into Wiser.
            </summary>
        </member>
        <member name="P:Api.Modules.Dashboard.Models.UserDataModel.LoginTime">
            <summary>
            Gets or sets the time the user has spent logged in.
            </summary>
        </member>
        <member name="T:Api.Modules.Dashboard.Services.DashboardService">
            <inheritdoc cref="T:Api.Modules.Dashboard.Interfaces.IDashboardService" />
        </member>
        <member name="M:Api.Modules.Dashboard.Services.DashboardService.#ctor(GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection,GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseHelpersService,Api.Modules.Branches.Interfaces.IBranchesService,Api.Modules.TaskAlerts.Interfaces.ITaskAlertsService,Api.Modules.DataSelectors.Interfaces.IDataSelectorsService)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.Dashboard.Services.DashboardService"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.Dashboard.Services.DashboardService.GetDataAsync(System.Security.Claims.ClaimsIdentity,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Dashboard.Services.DashboardService.GetItemsCountAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
            <summary>
            Retrieves the item counts for the different filters. Optionally filtered on period, and optionally from a different database (for branches).
            </summary>
            <param name="periodFrom">The starting date when items were created or changed.</param>
            <param name="periodTo">The ending date when items were created or changed.</param>
            <param name="databaseName">The database name of a branch. Set to null or empty string to use current branch.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Dashboard.Services.DashboardService.AddItemCountsToResult(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Api.Modules.Dashboard.Models.ItemsCountModel}},System.String,System.Collections.Generic.List{Api.Modules.Dashboard.Models.ItemsCountModel})">
            <summary>
            Adds a list of item counts to a dictionary.
            </summary>
            <param name="result"></param>
            <param name="collectionName"></param>
            <param name="itemsCountList"></param>
        </member>
        <member name="M:Api.Modules.Dashboard.Services.DashboardService.GetItemsCountWithFilterAsync(Api.Modules.Dashboard.Enums.PeriodFilterTypes,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
            <summary>
            Retrieves the amount of items, optionally filtered on a period.
            </summary>
            <param name="periodFilterType">The filter type. Only works if <paramref name="periodFrom"/> and <paramref name="periodTo"/> are set.</param>
            <param name="periodFrom">The minimum age of the data.</param>
            <param name="periodTo">The maximum age of the data.</param>
            <param name="databaseName">The name of a branch database that should be used. Can be empty to use current branch.</param>
            <returns>A list of all items and the amount of those items that exist.</returns>
        </member>
        <member name="M:Api.Modules.Dashboard.Services.DashboardService.GetUserDataAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
            <summary>
            Retriever user login data. This is how many times users have logged in and how long they have stayed logged in.
            This is not per user, but rather a difference between the top 10 users and the remaining users.
            </summary>
            <param name="periodFrom">The minimum age of the data.</param>
            <param name="periodTo">The maximum age of the data.</param>
            <param name="databaseName">The name of a branch database that should be used. Can be empty to use current branch.</param>
            <returns>A <see cref="T:System.ValueTuple"/> containing the top 10 login counts and times, and the remaining login counts and times.</returns>
        </member>
        <member name="M:Api.Modules.Dashboard.Services.DashboardService.GetEntitiesDataAsync(System.String)">
            <summary>
            Retrieves the data about the entities that should be shown in the dashboard.
            </summary>
            <param name="databaseName">The name of a branch database that should be used. Can be empty to use current branch.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> containing <see cref="T:Api.Modules.EntityTypes.Models.EntityTypeModel"/> objects.</returns>
        </member>
        <member name="M:Api.Modules.Dashboard.Services.DashboardService.GetOpenTaskAlertsAsync(System.Security.Claims.ClaimsIdentity,System.String)">
            <summary>
            Retrieves all open task alerts for all users and tallies them per user.
            </summary>
        </member>
        <member name="M:Api.Modules.Dashboard.Services.DashboardService.CombineResults(System.Collections.Generic.IEnumerable{Api.Modules.Dashboard.Models.DashboardDataModel})">
            <summary>
            Takes multiple instances of <see cref="T:Api.Modules.Dashboard.Models.DashboardDataModel"/> objects and combines them into one.
            </summary>
            <param name="sources">A list of <see cref="T:Api.Modules.Dashboard.Models.DashboardDataModel"/> objects to combine into one.</param>
            <returns>The combined <see cref="T:Api.Modules.Dashboard.Models.DashboardDataModel"/> object.</returns>
        </member>
        <member name="M:Api.Modules.Dashboard.Services.DashboardService.CheckAndUpdateTablesAsync(System.String)">
            <summary>
            Makes sure the necessary table exist and that the necessary tables have the necessary columns.
            </summary>
            <param name="databaseName">The name of the database that is currently being worked in (for the branches functionality).</param>
        </member>
        <member name="M:Api.Modules.Dashboard.Services.DashboardService.RefreshTableDataAsync(System.String)">
            <summary>
            Refreshes the base Wiser statistics data. This is without a period, and will be remembered for a day.
            </summary>
            <param name="databaseName">The name of the database that is currently being worked in (for the branches functionality).</param>
        </member>
        <member name="M:Api.Modules.Dashboard.Services.DashboardService.GetWtsServicesAsync(System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Dashboard.Services.DashboardService.GetWtsServiceLogsAsync(System.Security.Claims.ClaimsIdentity,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Dashboard.Services.DashboardService.SetWtsServicePauseStateAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Dashboard.Services.DashboardService.SetWtsServiceExtraRunStateAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Dashboard.Services.DashboardService.GetDataSelectorResultAsync(System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Dashboard.Services.DashboardService.KeepTablesUpToDateAsync(System.String)">
            <summary>
            Checks if the MySQL tables for the dashboard is up-to-date.
            </summary>
        </member>
        <member name="T:Api.Modules.DataSelectors.Controllers.DataSelectorsController">
            <summary>
            Controller for the data selector in Wiser.
            </summary>
        </member>
        <member name="M:Api.Modules.DataSelectors.Controllers.DataSelectorsController.#ctor(Api.Modules.DataSelectors.Interfaces.IDataSelectorsService,GeeksCoreLibrary.Modules.DataSelector.Interfaces.IDataSelectorsService)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.DataSelectors.Controllers.DataSelectorsController"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.DataSelectors.Controllers.DataSelectorsController.GetEntityPropertiesAsync(System.String,System.Boolean)">
            <summary>
            Retrieves the entity properties belonging to the given entity name.
            </summary>
            <param name="entityName">The name of the entity.</param>
            <param name="forExportMode">Whether the data selector is in export mode.</param>
        </member>
        <member name="M:Api.Modules.DataSelectors.Controllers.DataSelectorsController.GetAsync(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get the saved data selectors.
            </summary>
            <param name="forExportModule">Optional: Set to true to only get data selectors that can be shown in the export module.</param>
            <param name="forRendering">Optional: Set to true to only get data selectors to use with templating rendering.</param>
            <param name="forCommunicationModule">Optional: Set to true to only get data selectors that can be shown in the communication module.</param>
            <returns>A list of <see cref="T:Api.Modules.DataSelectors.Models.DataSelectorModel"/>.</returns>
        </member>
        <member name="M:Api.Modules.DataSelectors.Controllers.DataSelectorsController.GetTemplatesAsync">
            <summary>
            Get templates that can be used with data selectors.
            </summary>
            <returns>A list of WiserItemModel.</returns>
        </member>
        <member name="M:Api.Modules.DataSelectors.Controllers.DataSelectorsController.SaveAsync(Api.Modules.DataSelectors.Models.DataSelectorModel)">
            <summary>
            Save a data selector.
            </summary>
        </member>
        <member name="M:Api.Modules.DataSelectors.Controllers.DataSelectorsController.GenerateSignatureAsync(System.Collections.Generic.SortedList{System.String,System.String})">
            <summary>
            Generate a signature.
            </summary>
            <param name="values">The values used for the signature.</param>
        </member>
        <member name="M:Api.Modules.DataSelectors.Controllers.DataSelectorsController.GetResultsAsync(Api.Modules.DataSelectors.Models.WiserDataSelectorRequestModel)">
            <summary>
            Get the result of the data selector based on the request.
            </summary>
            <param name="dataFromUri">The request containing the information for the data selector in the query.</param>
        </member>
        <member name="M:Api.Modules.DataSelectors.Controllers.DataSelectorsController.GetQueryAsync(Api.Modules.DataSelectors.Models.WiserDataSelectorRequestModel)">
            <summary>
            Get the query of the data selector based on the request.
            </summary>
            <param name="dataFromUri">The request containing the information for the data selector in the query.</param>
        </member>
        <member name="M:Api.Modules.DataSelectors.Controllers.DataSelectorsController.ToExcelAsync(Api.Modules.DataSelectors.Models.WiserDataSelectorRequestModel)">
            <summary>
            Get the result of the data selector based on the request as an Excel file.
            </summary>
            <param name="dataFromUri">The request containing the information for the data selector in the query.</param>
        </member>
        <member name="M:Api.Modules.DataSelectors.Controllers.DataSelectorsController.ToHtmlAsync(Api.Modules.DataSelectors.Models.WiserDataSelectorRequestModel)">
            <summary>
            Get the result of the data selector based on the request as a HTML page.
            </summary>
            <param name="dataFromUri">The request containing the information for the data selector in the query.</param>
        </member>
        <member name="M:Api.Modules.DataSelectors.Controllers.DataSelectorsController.ToPdfAsync(Api.Modules.DataSelectors.Models.WiserDataSelectorRequestModel)">
            <summary>
            Get the result of the data selector based on the request as a PDF file.
            </summary>
            <param name="dataFromUri">The request containing the information for the data selector in the query.</param>
        </member>
        <member name="M:Api.Modules.DataSelectors.Controllers.DataSelectorsController.PreviewForHtmlEditorAsync">
            <summary>
            Replaces data selectors in a string to preview them in an HTML editor.
            </summary>
        </member>
        <member name="M:Api.Modules.DataSelectors.Controllers.DataSelectorsController.GetDataSelectorResultsAsJson(System.Int32,System.Boolean,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Execute a data selector by ID and return the results as JSON.
            </summary>
            <param name="id">The ID from the data selector.</param>
            <param name="asKeyValuePair">If set to true the result of the date selector will be converted to a single object. Only columns with the names "key" and "value" are used.</param>
            <param name="parameters">The parameters to set before executing the query.</param>
            <returns>The results of the data selector as JSON.</returns>
        </member>
        <member name="M:Api.Modules.DataSelectors.Controllers.DataSelectorsController.CheckForDashboardConflictAsync(System.Int32)">
            <summary>
            Checks if there is a data selector that already has "show in dashboard" enabled. If so, the name of the
            data selector will be returned. Otherwise, `null`.
            </summary>
            <param name="id">The ID of the current data selector, which will be excluded from the check. This will be 0 if it's a new data selector.</param>
            <returns>Name of a data selector that has "show in dashboard" enabled, or <see langword="null">null</see> if no data selector has that option enabled.</returns>
        </member>
        <member name="M:Api.Modules.DataSelectors.Controllers.DataSelectorsController.CombineDataSelectorRequestModels(Api.Modules.DataSelectors.Models.WiserDataSelectorRequestModel,Api.Modules.DataSelectors.Models.WiserDataSelectorRequestModel)">
            <summary>
            Combine two <see cref="T:Api.Modules.DataSelectors.Models.WiserDataSelectorRequestModel"/>s. Used to combine information from the body with the information from the query.
            </summary>
            <param name="model1">The first <see cref="T:Api.Modules.DataSelectors.Models.WiserDataSelectorRequestModel"/>.</param>
            <param name="model2">The second <see cref="T:Api.Modules.DataSelectors.Models.WiserDataSelectorRequestModel"/>.</param>
        </member>
        <member name="T:Api.Modules.DataSelectors.Interfaces.IDataSelectorsService">
            <summary>
            Service for the data selector in Wiser.
            </summary>
        </member>
        <member name="M:Api.Modules.DataSelectors.Interfaces.IDataSelectorsService.GetEntityProperties(System.String,System.Boolean,System.Security.Claims.ClaimsIdentity)">
            <summary>
            Retrieves the entity properties belonging to the given entity name.
            </summary>
            <param name="entityName">The name of the entity.</param>
            <param name="forExportMode">Whether the data selector is in export mode.</param>
            <param name="identity">The identity of the authenticated user.</param>
        </member>
        <member name="M:Api.Modules.DataSelectors.Interfaces.IDataSelectorsService.GetAsync(System.Security.Claims.ClaimsIdentity,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get the saved data selectors.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="forExportModule">Optional: Set to true to only get data selectors that can be shown in the export module.</param>
            <param name="forRendering">Optional: Set to true to only get data selectors to use with templating rendering.</param>
            <param name="forCommunicationModule">Optional: Set to true to only get data selectors that can be shown in the communication module.</param>
            <returns>A list of <see cref="T:Api.Modules.DataSelectors.Models.DataSelectorModel"/>.</returns>
        </member>
        <member name="M:Api.Modules.DataSelectors.Interfaces.IDataSelectorsService.SaveAsync(System.Security.Claims.ClaimsIdentity,Api.Modules.DataSelectors.Models.DataSelectorModel)">
            <summary>
            Saves a data selector based on name. The ID will be ignored. If a data selector with the given name already exists, it will be overwritten.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="data">The data to save.</param>
        </member>
        <member name="M:Api.Modules.DataSelectors.Interfaces.IDataSelectorsService.GenerateSignatureAsync(System.Collections.Generic.SortedList{System.String,System.String},System.Security.Claims.ClaimsIdentity)">
            <summary>
            Generate a signature.
            </summary>
            <param name="values">The values used for the signature.</param>
            <param name="identity">The identity of the authenticated user.</param>
        </member>
        <member name="M:Api.Modules.DataSelectors.Interfaces.IDataSelectorsService.GetResultsAsync(Api.Modules.DataSelectors.Models.WiserDataSelectorRequestModel,System.Security.Claims.ClaimsIdentity)">
            <summary>
            Get the result of the data selector based on the request.
            </summary>
            <param name="data">The request containing the information for the data selector.</param>
            <param name="identity">The identity of the authenticated user.</param>
        </member>
        <member name="M:Api.Modules.DataSelectors.Interfaces.IDataSelectorsService.GetQueryAsync(Api.Modules.DataSelectors.Models.WiserDataSelectorRequestModel,System.Security.Claims.ClaimsIdentity)">
            <summary>
            Get the query of the data selector based on the request.
            </summary>
            <param name="data">The request containing the information for the data selector.</param>
            <param name="identity">The identity of the authenticated user.</param>
        </member>
        <member name="M:Api.Modules.DataSelectors.Interfaces.IDataSelectorsService.ToExcelAsync(Api.Modules.DataSelectors.Models.WiserDataSelectorRequestModel,System.Security.Claims.ClaimsIdentity)">
            <summary>
            Get the result of the data selector based on the request as an Excel file.
            </summary>
            <param name="data">The request containing the information for the data selector.</param>
            <param name="identity">The identity of the authenticated user.</param>
        </member>
        <member name="M:Api.Modules.DataSelectors.Interfaces.IDataSelectorsService.ToHtmlAsync(Api.Modules.DataSelectors.Models.WiserDataSelectorRequestModel,System.Security.Claims.ClaimsIdentity)">
            <summary>
            Get the result of the data selector based on the request as a HTML page.
            </summary>
            <param name="data">The request containing the information for the data selector.</param>
            <param name="identity">The identity of the authenticated user.</param>
        </member>
        <member name="M:Api.Modules.DataSelectors.Interfaces.IDataSelectorsService.ToPdfAsync(Api.Modules.DataSelectors.Models.WiserDataSelectorRequestModel,System.Security.Claims.ClaimsIdentity)">
            <summary>
            Get the result of the data selector based on the request as a PDF file.
            </summary>
            <param name="data">The request containing the information for the data selector.</param>
            <param name="identity">The identity of the authenticated user.</param>
        </member>
        <member name="M:Api.Modules.DataSelectors.Interfaces.IDataSelectorsService.CreateFileResult(Api.Modules.DataSelectors.Models.WiserDataSelectorRequestModel,Api.Core.Services.ServiceResult{System.Byte[]},System.String,System.String,System.String)">
            <summary>
            Create a file result for the user to download.
            </summary>
            <param name="data">The request containing the information for the data selector.</param>
            <param name="result">The result of the data selector.</param>
            <param name="defaultFileName">The default name for the file if no name has been set in the request.</param>
            <param name="extension">The extension of the file to save as.</param>
            <param name="contentType">The content type of the file.</param>
        </member>
        <member name="M:Api.Modules.DataSelectors.Interfaces.IDataSelectorsService.SetFileName(Api.Modules.DataSelectors.Models.WiserDataSelectorRequestModel,Api.Core.Services.ServiceResult{Microsoft.AspNetCore.Mvc.FileContentResult},System.String,System.String)">
            <summary>
            Set the correct name for the file result.
            </summary>
            <param name="data">The request containing the information for the data selector.</param>
            <param name="result">The file result of the data selector.</param>
            <param name="defaultFileName">The default name for the file if no name has been set in the request.</param>
            <param name="extension">The extension of the file to save as.</param>
        </member>
        <member name="M:Api.Modules.DataSelectors.Interfaces.IDataSelectorsService.GetTemplatesAsync(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Get templates that can be used with data selectors.
            </summary>
            <returns>A list of WiserItemModel.</returns>
        </member>
        <member name="M:Api.Modules.DataSelectors.Interfaces.IDataSelectorsService.GetDataSelectorResultAsJsonAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.Boolean,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Boolean)">
            <summary>
            Execute a data selector by ID and return the results as JSON.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="id">The ID of the data selector.</param>
            <param name="asKeyValuePair">If set to true the result of the query will be converted to a single object. Only columns with the names "key" and "value" are used.</param>
            <param name="parameters">The parameters to set before executing the data selector.</param>
            <param name="skipPermissionsCheck">Optional: Whether the permissions check should be skipped. This should only ever be set to <see langword="true"/> when calling this function internally.</param>
            <returns>The results of the data selector as JSON.</returns>
        </member>
        <member name="M:Api.Modules.DataSelectors.Interfaces.IDataSelectorsService.CheckDashboardConflictAsync(System.Int32)">
            <summary>
            Checks if there is a data selector that already has "show in dashboard" enabled. If so, the name of the
            data selector will be returned. Otherwise, <see langword="null">null</see>.
            </summary>
            <param name="id">The ID of the current data selector, which will be excluded from the check. This will be 0 if it's a new data selector.</param>
            <returns>Name of a data selector that has "show in dashboard" enabled, or <see langword="null">null</see> if no data selector has that option enabled.</returns>
        </member>
        <member name="T:Api.Modules.DataSelectors.Models.DataSelectorEntityPropertyModel">
            <summary>
            The model for an entity property for the data selector.
            </summary>
        </member>
        <member name="P:Api.Modules.DataSelectors.Models.DataSelectorEntityPropertyModel.UniqueId">
            <summary>
            Gets or sets the unique ID of the property. Will be comprised of the property name and, if export mode is enabled, the language code.
            </summary>
        </member>
        <member name="P:Api.Modules.DataSelectors.Models.DataSelectorEntityPropertyModel.EntityName">
            <summary>
            Gets or sets the name of the entity this property belongs to.
            </summary>
        </member>
        <member name="P:Api.Modules.DataSelectors.Models.DataSelectorEntityPropertyModel.DisplayName">
            <summary>
            Gets or sets the display name of the property.
            </summary>
        </member>
        <member name="P:Api.Modules.DataSelectors.Models.DataSelectorEntityPropertyModel.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
        </member>
        <member name="P:Api.Modules.DataSelectors.Models.DataSelectorEntityPropertyModel.LanguageCode">
            <summary>
            Gets or sets the language code of the field. Will always be empty if export mode is not enabled.
            </summary>
        </member>
        <member name="T:Api.Modules.DataSelectors.Models.DataSelectorModel">
            <summary>
            A model for a Wiser data selector.
            </summary>
        </member>
        <member name="P:Api.Modules.DataSelectors.Models.DataSelectorModel.Id">
            <summary>
            Gets or sets the ID of the data selector.
            </summary>
        </member>
        <member name="P:Api.Modules.DataSelectors.Models.DataSelectorModel.EncryptedId">
            <summary>
            Gets or sets the encrypted ID of the data selector.
            </summary>
        </member>
        <member name="P:Api.Modules.DataSelectors.Models.DataSelectorModel.Name">
            <summary>
            Gets or sets the name of the data selector.
            </summary>
        </member>
        <member name="P:Api.Modules.DataSelectors.Models.DataSelectorModel.Removed">
            <summary>
            Gets or sets whether the data selector has been removed.
            </summary>
        </member>
        <member name="P:Api.Modules.DataSelectors.Models.DataSelectorModel.RequestJson">
            <summary>
            Gets or sets the request JSON.
            </summary>
        </member>
        <member name="P:Api.Modules.DataSelectors.Models.DataSelectorModel.SavedJson">
            <summary>
            Gets or sets the saved JSON.
            </summary>
        </member>
        <member name="P:Api.Modules.DataSelectors.Models.DataSelectorModel.ShowInExportModule">
            <summary>
            Gets or sets whether this should be shown in the export module.
            </summary>
        </member>
        <member name="P:Api.Modules.DataSelectors.Models.DataSelectorModel.ShowInCommunicationModule">
            <summary>
            Gets or sets whether this should be shown in the communication module.
            </summary>
        </member>
        <member name="P:Api.Modules.DataSelectors.Models.DataSelectorModel.AvailableForRendering">
            <summary>
            Gets or sets whether this should be available for rendering as dynamic data in an HTML editor in Wiser.
            </summary>
        </member>
        <member name="P:Api.Modules.DataSelectors.Models.DataSelectorModel.ShowInDashboard">
            <summary>
            Gets or sets whether the result of this data selector should be shown in the "Dataselector" tile of the dashboard.
            </summary>
        </member>
        <member name="P:Api.Modules.DataSelectors.Models.DataSelectorModel.DefaultTemplate">
            <summary>
            Gets or sets the ID of the default HTML template for rendering. Only applicable if <see cref="P:Api.Modules.DataSelectors.Models.DataSelectorModel.AvailableForRendering"/> is set to <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Api.Modules.DataSelectors.Models.DataSelectorModel.AllowedRoles">
            <summary>
            Gets or sets the roles that are allowed to execute the data selector from the API.
            </summary>
        </member>
        <member name="T:Api.Modules.DataSelectors.Models.DataSelectorSignatureResultModel">
            <summary>
            The model for a Wiser data selector signature result.
            </summary>
        </member>
        <member name="P:Api.Modules.DataSelectors.Models.DataSelectorSignatureResultModel.Signature">
            <summary>
            Gets or sets the signature.
            </summary>
        </member>
        <member name="P:Api.Modules.DataSelectors.Models.DataSelectorSignatureResultModel.ExtraQueryString">
            <summary>
            Gets or sets the extra query string.
            </summary>
        </member>
        <member name="T:Api.Modules.DataSelectors.Models.WiserDataSelectorRequestModel">
            <summary>
            Class that represents the query string variables for a get_items request.
            </summary>
        </member>
        <member name="P:Api.Modules.DataSelectors.Models.WiserDataSelectorRequestModel.EncryptedDataSelectorId">
            <summary>
            Gets or sets the encrypted ID of the data selector.
            </summary>
        </member>
        <member name="T:Api.Modules.DataSelectors.Services.DataSelectorsService">
            <summary>
            Service for the data selector in Wiser.
            </summary>
        </member>
        <member name="M:Api.Modules.DataSelectors.Services.DataSelectorsService.#ctor(Api.Modules.Customers.Interfaces.IWiserCustomersService,GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection,Microsoft.AspNetCore.Http.IHttpContextAccessor,GeeksCoreLibrary.Modules.DataSelector.Interfaces.IDataSelectorsService,GeeksCoreLibrary.Modules.Exports.Interfaces.IExcelService,GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseHelpersService,GeeksCoreLibrary.Core.Interfaces.IWiserItemsService)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.DataSelectors.Services.DataSelectorsService"/>
            </summary>
        </member>
        <member name="M:Api.Modules.DataSelectors.Services.DataSelectorsService.GetEntityProperties(System.String,System.Boolean,System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.DataSelectors.Services.DataSelectorsService.GetAsync(System.Security.Claims.ClaimsIdentity,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.DataSelectors.Services.DataSelectorsService.SaveAsync(System.Security.Claims.ClaimsIdentity,Api.Modules.DataSelectors.Models.DataSelectorModel)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.DataSelectors.Services.DataSelectorsService.GenerateSignatureAsync(System.Collections.Generic.SortedList{System.String,System.String},System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.DataSelectors.Services.DataSelectorsService.GetResultsAsync(Api.Modules.DataSelectors.Models.WiserDataSelectorRequestModel,System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.DataSelectors.Services.DataSelectorsService.GetQueryAsync(Api.Modules.DataSelectors.Models.WiserDataSelectorRequestModel,System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.DataSelectors.Services.DataSelectorsService.ToExcelAsync(Api.Modules.DataSelectors.Models.WiserDataSelectorRequestModel,System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.DataSelectors.Services.DataSelectorsService.ToHtmlAsync(Api.Modules.DataSelectors.Models.WiserDataSelectorRequestModel,System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.DataSelectors.Services.DataSelectorsService.ToPdfAsync(Api.Modules.DataSelectors.Models.WiserDataSelectorRequestModel,System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.DataSelectors.Services.DataSelectorsService.CreateFileResult(Api.Modules.DataSelectors.Models.WiserDataSelectorRequestModel,Api.Core.Services.ServiceResult{System.Byte[]},System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.DataSelectors.Services.DataSelectorsService.SetFileName(Api.Modules.DataSelectors.Models.WiserDataSelectorRequestModel,Api.Core.Services.ServiceResult{Microsoft.AspNetCore.Mvc.FileContentResult},System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.DataSelectors.Services.DataSelectorsService.GetTemplatesAsync(System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.DataSelectors.Services.DataSelectorsService.GetDataSelectorResultAsJsonAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.Boolean,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.DataSelectors.Services.DataSelectorsService.CheckDashboardConflictAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.DigitalOcean.Controllers.DigitalOceanController">
            <summary>
            A controller for doing things with DigitalOcean.
            </summary>
        </member>
        <member name="M:Api.Modules.DigitalOcean.Controllers.DigitalOceanController.#ctor(Api.Modules.DigitalOcean.Interfaces.IDigitalOceanService)">
            <summary>
            Controller for calling the Digital Ocean API. 
            </summary>
        </member>
        <member name="M:Api.Modules.DigitalOcean.Controllers.DigitalOceanController.Authorize">
            <summary>
            Redirect to the Digital Ocean authorization page.
            </summary>
        </member>
        <member name="M:Api.Modules.DigitalOcean.Controllers.DigitalOceanController.CallbackAsync(System.String)">
            <summary>
            Processes a call back from Digital Ocean's OAUTH2 authentication.
            </summary>
            <param name="code">The authentication code from Digital Ocean.</param>
        </member>
        <member name="M:Api.Modules.DigitalOcean.Controllers.DigitalOceanController.DatabasesAsync">
            <summary>
            Gets information about a database cluster.
            </summary>
        </member>
        <member name="M:Api.Modules.DigitalOcean.Controllers.DigitalOceanController.CreateDatabaseAsync(Api.Modules.DigitalOcean.Models.CreateDatabaseRequestModel)">
            <summary>
            Create a new database in a cluster.
            </summary>
            <param name="body">The data of the new database to create.</param>
        </member>
        <member name="T:Api.Modules.DigitalOcean.Interfaces.IDigitalOceanService">
            <summary>
            An interface for the Digital Ocean Service
            </summary>
        </member>
        <member name="M:Api.Modules.DigitalOcean.Interfaces.IDigitalOceanService.AuthorizationRedirect">
            <summary>
            Redirect to the Digital Ocean authorization page.
            </summary>
        </member>
        <member name="M:Api.Modules.DigitalOcean.Interfaces.IDigitalOceanService.ProcessCallbackAsync(System.String)">
            <summary>
            Processes a callback from Digital Ocean's OAUTH2 authentication.
            </summary>
            <param name="code">The authentication code from Digital Ocean.</param>
        </member>
        <member name="M:Api.Modules.DigitalOcean.Interfaces.IDigitalOceanService.DatabaseListAsync(System.String)">
            <summary>
            Gets information about a database cluster.
            </summary>
        </member>
        <member name="M:Api.Modules.DigitalOcean.Interfaces.IDigitalOceanService.CreateDatabaseAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Create a new database in a cluster.
            </summary>
        </member>
        <member name="M:Api.Modules.DigitalOcean.Interfaces.IDigitalOceanService.RestrictMysqlUserToDbAsync(Api.Modules.DigitalOcean.Models.CreateDatabaseApiResponseModel,System.String)">
            <summary>
            Restricts a MySQL User in the database
            </summary>
        </member>
        <member name="T:Api.Modules.DigitalOcean.Models.CreateDatabaseApiResponseModel">
            <inheritdoc />
        </member>
        <member name="P:Api.Modules.DigitalOcean.Models.CreateDatabaseApiResponseModel.Database">
            <summary>
            Name of the database
            </summary>
        </member>
        <member name="P:Api.Modules.DigitalOcean.Models.CreateDatabaseApiResponseModel.Cluster">
            <summary>
            The cluster of the database
            </summary>
        </member>
        <member name="T:Api.Modules.DigitalOcean.Models.CreateDatabaseRequestModel">
            <summary>
            This class describes an object with data about making a new database
            </summary>
        </member>
        <member name="P:Api.Modules.DigitalOcean.Models.CreateDatabaseRequestModel.DatabaseCluster">
            <summary>
            The cluster of the database
            </summary>
        </member>
        <member name="P:Api.Modules.DigitalOcean.Models.CreateDatabaseRequestModel.Database">
            <summary>
            The name of the database
            </summary>
        </member>
        <member name="P:Api.Modules.DigitalOcean.Models.CreateDatabaseRequestModel.User">
            <summary>
            The user of the database
            </summary>
        </member>
        <member name="T:Api.Modules.DigitalOcean.Models.DatabaseApiModel">
            <summary>
            Model for a Digital Ocean database,
            </summary>
        </member>
        <member name="P:Api.Modules.DigitalOcean.Models.DatabaseApiModel.Id">
            <summary>
            A unique ID that can be used to identify and reference a database cluster.
            </summary>
        </member>
        <member name="P:Api.Modules.DigitalOcean.Models.DatabaseApiModel.Name">
            <summary>
            A unique, human-readable name referring to a database cluster.
            </summary>
        </member>
        <member name="P:Api.Modules.DigitalOcean.Models.DatabaseApiModel.Engine">
            <summary>
            A slug representing the database engine used for the cluster. The possible values are: "pg" for PostgreSQL, "mysql" for MySQL, "redis" for Redis, and "mongodb" for MongoDB.
            </summary>
        </member>
        <member name="P:Api.Modules.DigitalOcean.Models.DatabaseApiModel.Version">
            <summary>
            A string representing the version of the database engine in use for the cluster.
            </summary>
        </member>
        <member name="P:Api.Modules.DigitalOcean.Models.DatabaseApiModel.Region">
            <summary>
            The slug identifier for the region where the database cluster is located.
            </summary>
        </member>
        <member name="P:Api.Modules.DigitalOcean.Models.DatabaseApiModel.DatabaseNames">
            <summary>
            An array of strings containing the names of databases created in the database cluster.
            </summary>
        </member>
        <member name="T:Api.Modules.DigitalOcean.Models.DatabaseConnectionApiModel">
            <summary>
            This class describes an object that makes a connection to the database via an API
            </summary>
        </member>
        <member name="P:Api.Modules.DigitalOcean.Models.DatabaseConnectionApiModel.Protocol">
            <summary>
            Protocol that will be used
            </summary>
        </member>
        <member name="P:Api.Modules.DigitalOcean.Models.DatabaseConnectionApiModel.Uri">
            <summary>
            The URI that will be used
            </summary>
        </member>
        <member name="P:Api.Modules.DigitalOcean.Models.DatabaseConnectionApiModel.Database">
            <summary>
            Name of the database
            </summary>
        </member>
        <member name="P:Api.Modules.DigitalOcean.Models.DatabaseConnectionApiModel.Host">
            <summary>
            Hostname of the database
            </summary>
        </member>
        <member name="P:Api.Modules.DigitalOcean.Models.DatabaseConnectionApiModel.Port">
            <summary>
            Port of the database
            </summary>
        </member>
        <member name="P:Api.Modules.DigitalOcean.Models.DatabaseConnectionApiModel.User">
            <summary>
            Username of the user that will be logged in
            </summary>
        </member>
        <member name="P:Api.Modules.DigitalOcean.Models.DatabaseConnectionApiModel.Password">
            <summary>
            Password of the user that will be logged in
            </summary>
        </member>
        <member name="P:Api.Modules.DigitalOcean.Models.DatabaseConnectionApiModel.Ssl">
            <summary>
            SSL that can be used for logging in
            </summary>
        </member>
        <member name="T:Api.Modules.DigitalOcean.Models.DigitalOceanSettings">
            <summary>
            Settings for connecting with the Digital Ocean API.
            </summary>
        </member>
        <member name="P:Api.Modules.DigitalOcean.Models.DigitalOceanSettings.ClientId">
            <summary>
            Gets or sets the client ID.
            </summary>
        </member>
        <member name="P:Api.Modules.DigitalOcean.Models.DigitalOceanSettings.ClientSecret">
            <summary>
            Gets or sets the client secret.
            </summary>
        </member>
        <member name="T:Api.Modules.DigitalOcean.Models.ExtendedDatabaseApiModel">
            <inheritdoc />
        </member>
        <member name="P:Api.Modules.DigitalOcean.Models.ExtendedDatabaseApiModel.Connection">
            <summary>
            Connection to the database
            </summary>
        </member>
        <member name="T:Api.Modules.DigitalOcean.Models.GetDatabaseResponseModel">
            <summary>
            Class that describes an object which has a response from a database
            </summary>
        </member>
        <member name="P:Api.Modules.DigitalOcean.Models.GetDatabaseResponseModel.Database">
            <summary>
            An object of the database that should be returned
            </summary>
        </member>
        <member name="T:Api.Modules.DigitalOcean.Models.GetDatabasesResponseModel">
            <summary>
            Model for response of the get database endpoint of the Digital Ocean API.
            </summary>
        </member>
        <member name="P:Api.Modules.DigitalOcean.Models.GetDatabasesResponseModel.Databases">
            <summary>
            Gets or sets the list of databases.
            </summary>
        </member>
        <member name="T:Api.Modules.DigitalOcean.Models.PostDatabaseUserResponseModel">
            <summary>
            A model that contains the response of database users from the Digital Ocean API.
            </summary>
        </member>
        <member name="P:Api.Modules.DigitalOcean.Models.PostDatabaseUserResponseModel.Users">
            <summary>
            List of users that have access to the Digital Ocean database
            </summary>
        </member>
        <member name="T:Api.Modules.DigitalOcean.Models.UserApiModel">
            <summary>
            Model class for a user to the Digital Ocean database
            </summary>
        </member>
        <member name="P:Api.Modules.DigitalOcean.Models.UserApiModel.Name">
            <summary>
            Username of the user in the Digital Ocean database
            </summary>
        </member>
        <member name="P:Api.Modules.DigitalOcean.Models.UserApiModel.Role">
            <summary>
            Role of the user in the Digital Ocean database
            </summary>
        </member>
        <member name="P:Api.Modules.DigitalOcean.Models.UserApiModel.Password">
            <summary>
            Password of the user in the Digital Ocean database
            </summary>
        </member>
        <member name="T:Api.Modules.DigitalOcean.Services.DigitalOceanService">
            <inheritdoc cref="T:Api.Modules.DigitalOcean.Interfaces.IDigitalOceanService" />
        </member>
        <member name="M:Api.Modules.DigitalOcean.Services.DigitalOceanService.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor,Microsoft.Extensions.Options.IOptions{Api.Modules.DigitalOcean.Models.DigitalOceanSettings})">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.DigitalOcean.Services.DigitalOceanService"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.DigitalOcean.Services.DigitalOceanService.AuthorizationRedirect">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.DigitalOcean.Services.DigitalOceanService.ProcessCallbackAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.DigitalOcean.Services.DigitalOceanService.DatabaseListAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.DigitalOcean.Services.DigitalOceanService.CreateDatabaseAsync(System.String,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.DigitalOcean.Services.DigitalOceanService.RestrictMysqlUserToDbAsync(Api.Modules.DigitalOcean.Models.CreateDatabaseApiResponseModel,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.EntityProperties.Controllers.EntityPropertiesController">
            <summary>
            Controller for all CRUD functions for entity properties.
            </summary>
        </member>
        <member name="M:Api.Modules.EntityProperties.Controllers.EntityPropertiesController.#ctor(Api.Modules.EntityProperties.Interfaces.IEntityPropertiesService)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.EntityProperties.Controllers.EntityPropertiesController"/>.
            </summary>
            <param name="entityPropertiesService"></param>
        </member>
        <member name="M:Api.Modules.EntityProperties.Controllers.EntityPropertiesController.GetAsync">
            <summary>
            Get all entity properties. 
            </summary>
            <returns>A List of <see cref="T:Api.Modules.EntityProperties.Models.EntityPropertyModel"/> with all settings.</returns>
        </member>
        <member name="M:Api.Modules.EntityProperties.Controllers.EntityPropertiesController.GetAsync(System.Int32)">
            <summary>
            Get entity property based on ID. 
            </summary>
            <param name="id">The ID from wiser_entityproperty.</param>
            <returns>A <see cref="T:Api.Modules.EntityProperties.Models.EntityPropertyModel"/> with all settings.</returns>
        </member>
        <member name="M:Api.Modules.EntityProperties.Controllers.EntityPropertiesController.GetPropertiesOfEntityAsync(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get all entity properties of a specific entity.
            </summary>
            <param name="entityName">The name of the entity.</param>
            <param name="onlyEntityTypesWithDisplayName">Only get properties with a display name.</param>
            <param name="onlyEntityTypesWithPropertyName">Only get properties with a property name.</param>
            <param name="addIdProperty">Add a property for the id.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> with all properties of a specific entity.</returns>
        </member>
        <member name="M:Api.Modules.EntityProperties.Controllers.EntityPropertiesController.CreateAsync(Api.Modules.EntityProperties.Models.EntityPropertyModel)">
            <summary>
            Creates a new entity property.
            </summary>
            <param name="entityProperty">The entity property to create.</param>
            <returns>The newly created entity property.</returns>
        </member>
        <member name="M:Api.Modules.EntityProperties.Controllers.EntityPropertiesController.UpdateAsync(System.Int32,Api.Modules.EntityProperties.Models.EntityPropertyModel)">
            <summary>
            Updates an existing entity property.
            </summary>
            <param name="id">The ID from of the entity property.</param>
            <param name="entityProperty">The new data to save.</param>
        </member>
        <member name="M:Api.Modules.EntityProperties.Controllers.EntityPropertiesController.DuplicateAsync(System.Int32,System.String)">
            <summary>
            Duplicates an entity property.
            </summary>
            <param name="id">The ID of the entity property to duplicate.</param>
            <param name="newName">The name for the new entity property.</param>
        </member>
        <member name="M:Api.Modules.EntityProperties.Controllers.EntityPropertiesController.DeleteAsync(System.Int32)">
            <summary>
            Deletes an entity property.
            </summary>
            <param name="id">The ID of the entity property to delete.</param>
        </member>
        <member name="M:Api.Modules.EntityProperties.Controllers.EntityPropertiesController.CopyToAllAvailableLanguagesAsync(System.Int32,Api.Modules.EntityProperties.Enums.CopyToOtherLanguagesTabOptions)">
            <summary>
            Copies an entity property to all other available languages that don't have this property yet.
            </summary>
            <param name="id">The ID of the entity property to copy.</param>
            <param name="tabOption">The tab to add the new fields too.</param>
        </member>
        <member name="M:Api.Modules.EntityProperties.Controllers.EntityPropertiesController.FixOrderingAsync(System.String)">
            <summary>
            Fixes the ordering of an entity property
            </summary>
            <param name="entityName">The name of the entity property</param>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.EntityProperties.Controllers.EntityPropertiesController.FixOrderingAsync(System.Int32)">
            <summary>
            Fixes the ordering of a link type
            </summary>
            <param name="linkType">The ID of a link type</param>
            <returns></returns>
        </member>
        <member name="T:Api.Modules.EntityProperties.Enums.CopyToOtherLanguagesTabOptions">
            <summary>
            Enumeration with options for which tab(s) to add fields to when copying them to other languages.
            </summary>
        </member>
        <member name="F:Api.Modules.EntityProperties.Enums.CopyToOtherLanguagesTabOptions.General">
            <summary>
            Add the field to the general tab.
            </summary>
        </member>
        <member name="F:Api.Modules.EntityProperties.Enums.CopyToOtherLanguagesTabOptions.LanguageCode">
            <summary>
            Add the field to the tab with the language code.
            </summary>
        </member>
        <member name="F:Api.Modules.EntityProperties.Enums.CopyToOtherLanguagesTabOptions.LanguageName">
            <summary>
            Add the field to the tab with the language code.
            </summary>
        </member>
        <member name="T:Api.Modules.EntityProperties.Enums.DependencyActions">
            <summary>
            An enum containing all possible action for a dependency between two fields.
            </summary>
        </member>
        <member name="F:Api.Modules.EntityProperties.Enums.DependencyActions.ToggleVisibility">
            <summary>
            Toggle the visibility of the field, based on the value of the dependant field.
            </summary>
        </member>
        <member name="F:Api.Modules.EntityProperties.Enums.DependencyActions.Refresh">
            <summary>
            Automatically refresh the field when the value of the dependant field gets changed.
            </summary>
        </member>
        <member name="T:Api.Modules.EntityProperties.Enums.EntityPropertyInputTypes">
            <summary>
            All available input types for a Entity Property
            </summary>
        </member>
        <member name="T:Api.Modules.EntityProperties.Enums.EntityPropertyLabelStyles">
            <summary>
            An enum containing all possible label styles for fields.
            </summary>
        </member>
        <member name="F:Api.Modules.EntityProperties.Enums.EntityPropertyLabelStyles.Normal">
            <summary>
            The label is shown above the field.
            </summary>
        </member>
        <member name="F:Api.Modules.EntityProperties.Enums.EntityPropertyLabelStyles.Inline">
            <summary>
            The label is shown left of the field.
            </summary>
        </member>
        <member name="F:Api.Modules.EntityProperties.Enums.EntityPropertyLabelStyles.Float">
            <summary>
            The label will be shown inside the field as a placeholder while the field is empty and will be moved to above the field when it does contain a value.
            </summary>
        </member>
        <member name="T:Api.Modules.EntityProperties.Enums.FilterOperators">
            <summary>
            An enum containing all possible operators for filters.
            </summary>
        </member>
        <member name="F:Api.Modules.EntityProperties.Enums.FilterOperators.Equals">
            <summary>
            The value should be the same as the other value.
            </summary>
        </member>
        <member name="F:Api.Modules.EntityProperties.Enums.FilterOperators.NotEquals">
            <summary>
            The value should be different from the other value.
            </summary>
        </member>
        <member name="F:Api.Modules.EntityProperties.Enums.FilterOperators.Contains">
            <summary>
            The value should contain the other value.
            </summary>
        </member>
        <member name="F:Api.Modules.EntityProperties.Enums.FilterOperators.DoesNotContain">
            <summary>
            The value should not contain the other value.
            </summary>
        </member>
        <member name="F:Api.Modules.EntityProperties.Enums.FilterOperators.StartsWith">
            <summary>
            The value should start with the other value.
            </summary>
        </member>
        <member name="F:Api.Modules.EntityProperties.Enums.FilterOperators.DoesNotStartWith">
            <summary>
            The value should not start with the other value.
            </summary>
        </member>
        <member name="F:Api.Modules.EntityProperties.Enums.FilterOperators.EndsWith">
            <summary>
            The value should end with the other value.
            </summary>
        </member>
        <member name="F:Api.Modules.EntityProperties.Enums.FilterOperators.DoesNotEndWith">
            <summary>
            The value should not end with the other value.
            </summary>
        </member>
        <member name="F:Api.Modules.EntityProperties.Enums.FilterOperators.IsEmpty">
            <summary>
            The value should be empty or null.
            </summary>
        </member>
        <member name="F:Api.Modules.EntityProperties.Enums.FilterOperators.IsNotEmpty">
            <summary>
            The value should not be empty and not be null.
            </summary>
        </member>
        <member name="F:Api.Modules.EntityProperties.Enums.FilterOperators.GreaterThanOrEqualTo">
            <summary>
            The value should be greater than or equal to the other value.
            </summary>
        </member>
        <member name="F:Api.Modules.EntityProperties.Enums.FilterOperators.GreaterThan">
            <summary>
            The value should be greater than the other value.
            </summary>
        </member>
        <member name="F:Api.Modules.EntityProperties.Enums.FilterOperators.LessThanOrEqualTo">
            <summary>
            The value should be less than or equal to the other value.
            </summary>
        </member>
        <member name="F:Api.Modules.EntityProperties.Enums.FilterOperators.LessThan">
            <summary>
            The value should be less than the other value.
            </summary>
        </member>
        <member name="M:Api.Modules.EntityProperties.Helpers.EntityPropertyHelper.ToInputType(System.String)">
            <summary>
            Converts a string to its equivalent <see cref="T:Api.Modules.EntityProperties.Enums.EntityPropertyInputTypes"/> enum value. 
            </summary>
            <param name="value">The string to convert.</param>
            <returns>One of the values of <see cref="T:Api.Modules.EntityProperties.Enums.EntityPropertyInputTypes"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When <paramref name="value"/> doesn't contain a supported value.</exception>
        </member>
        <member name="T:Api.Modules.EntityProperties.Interfaces.IEntityPropertiesService">
            <summary>
            Interface for all CRUD operations for entity properties (from the table wiser_entityproperty).
            </summary>
        </member>
        <member name="M:Api.Modules.EntityProperties.Interfaces.IEntityPropertiesService.GetAsync(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Get all entity properties. 
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <returns>A List of <see cref="T:Api.Modules.EntityProperties.Models.EntityPropertyModel"/> with all settings.</returns>
        </member>
        <member name="M:Api.Modules.EntityProperties.Interfaces.IEntityPropertiesService.GetAsync(System.Security.Claims.ClaimsIdentity,System.Int32)">
            <summary>
            Get entity property based on ID. 
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="id">The ID of the settings from wiser_entityproperty.</param>
            <returns>An <see cref="T:Api.Modules.EntityProperties.Models.EntityPropertyModel"/> with all settings.</returns>
        </member>
        <member name="M:Api.Modules.EntityProperties.Interfaces.IEntityPropertiesService.GetPropertiesOfEntityAsync(System.Security.Claims.ClaimsIdentity,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get all entity properties of a specific entity.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="entityName">The name of the entity.</param>
            <param name="onlyEntityTypesWithDisplayName">Only get properties with a display name.</param>
            <param name="onlyEntityTypesWithPropertyName">Only get properties with a property name.</param>
            <param name="addIdProperty">Add a property for the id.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> with all properties of a specific entity.</returns>
        </member>
        <member name="M:Api.Modules.EntityProperties.Interfaces.IEntityPropertiesService.CreateAsync(System.Security.Claims.ClaimsIdentity,Api.Modules.EntityProperties.Models.EntityPropertyModel)">
            <summary>
            Creates a new entity property.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="entityProperty">The entity property to create.</param>
            <returns>The newly created link settings.</returns>
        </member>
        <member name="M:Api.Modules.EntityProperties.Interfaces.IEntityPropertiesService.UpdateAsync(System.Security.Claims.ClaimsIdentity,System.Int32,Api.Modules.EntityProperties.Models.EntityPropertyModel)">
            <summary>
            Updates an existing entity property.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="id">The ID of the entity property to update.</param>
            <param name="entityProperty">The new data to save.</param>
        </member>
        <member name="M:Api.Modules.EntityProperties.Interfaces.IEntityPropertiesService.DuplicateAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.String)">
            <summary>
            Duplicates an entity property.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="id">The ID of the entity property to duplicate.</param>
            <param name="newName">The name for the new entity property.</param>
        </member>
        <member name="M:Api.Modules.EntityProperties.Interfaces.IEntityPropertiesService.DeleteAsync(System.Security.Claims.ClaimsIdentity,System.Int32)">
            <summary>
            Deletes an entity property.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="id">The ID of the entity property to delete.</param>
        </member>
        <member name="M:Api.Modules.EntityProperties.Interfaces.IEntityPropertiesService.CopyToAllAvailableLanguagesAsync(System.Security.Claims.ClaimsIdentity,System.Int32,Api.Modules.EntityProperties.Enums.CopyToOtherLanguagesTabOptions)">
            <summary>
            Copies an entity property to all other available languages that don't have this property yet.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="id">The ID of the entity property to copy.</param>
            <param name="tabOption">The tab to add the new fields too.</param>
        </member>
        <member name="M:Api.Modules.EntityProperties.Interfaces.IEntityPropertiesService.FixOrderingAsync(System.Security.Claims.ClaimsIdentity,System.String,System.Int32)">
            <summary>
            Fixes the ordering of all fields for a specific entity type or link type, so that all fields have consecutive order numbers.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="entityType">Optional: The entity type to fix the ordering for. Leave empty if you want to do it for link fields instead of entity fields.</param>
            <param name="linkType">Optional: The link type to fix the ordering for. Leave empty if you want to do it for entity fields instead of link fields.</param>
        </member>
        <member name="T:Api.Modules.EntityProperties.Models.EntityPropertyDependencyModel">
            <summary>
            A model for a dependency of an entity property within Wiser.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyDependencyModel.Field">
            <summary>
            Gets or sets the name of the property it depends on.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyDependencyModel.Operator">
            <summary>
            Gets or sets the type of dependency operator.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyDependencyModel.Value">
            <summary>
            Gets or sets the value used in the operator.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyDependencyModel.Action">
            <summary>
            Gets or sets the action it depends on.
            </summary>
        </member>
        <member name="T:Api.Modules.EntityProperties.Models.EntityPropertyModel">
            <summary>
            A model for the property of an entity within Wiser.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyModel.Id">
            <summary>
            Gets or sets the ID.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyModel.ModuleId">
            <summary>
            Gets or sets the ID of the module. This can be 0 if the property should be available for all modules.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyModel.EntityType">
            <summary>
            Gets or sets the name of the entity.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyModel.LinkType">
            <summary>
            Gets or sets the link type if the property is used in a connection between two items.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyModel.PropertyName">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyModel.LanguageCode">
            <summary>
            Gets or sets the language code.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyModel.TabName">
            <summary>
            Gets or sets the name of the tab the property is shown in.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyModel.GroupName">
            <summary>
            Gets or sets the name of the group the property is in.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyModel.InputType">
            <summary>
            Gets or sets the input type.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyModel.DisplayName">
            <summary>
            Gets or sets the name to display.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyModel.Ordering">
            <summary>
            Gets or sets the order the property is shown in.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyModel.Explanation">
            <summary>
            Gets or sets an explanation shown with the property.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyModel.ExtendedExplanation">
            <summary>
            Gets or sets an extended explanation shown with the property.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyModel.RegexValidation">
            <summary>
            Gets or sets the regex used for validation.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyModel.Mandatory">
            <summary>
            Gets or sets if the property is mandatory to be filled.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyModel.ReadOnly">
            <summary>
            Gets or sets if the property can only be read.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyModel.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyModel.Width">
            <summary>
            Gets or sets the width the property is shown with.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyModel.Height">
            <summary>
            Gets or sets the height the property is shown with.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyModel.Options">
            <summary>
            Gets or sets the JSON object containing the options.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyModel.DataQuery">
            <summary>
            Gets or sets the query used to get data used to fill input types like combo boxes and grids.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyModel.ActionQuery">
            <summary>
            Gets or sets the query that needs to be performed when an action button is clicked.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyModel.SearchQuery">
            <summary>
            Gets or sets the query used to search within sub entities grids.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyModel.SearchCountQuery">
            <summary>
            Gets or sets the query used for the total count for the search query.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyModel.GridInsertQuery">
            <summary>
            Gets or sets a custom query to insert an item in the sub entities grid.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyModel.GridUpdateQuery">
            <summary>
            Gets or sets a custom query to update an item in the sub entities grid.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyModel.GridDeleteQuery">
            <summary>
            Gets or sets a custom query to delete an item in the sub entities grid.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyModel.DependsOn">
            <summary>
            Gets or sets the dependency op the property is it has one.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyModel.CustomScript">
            <summary>
            Gets or sets a custom javascript.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyModel.AlsoSaveSeoValue">
            <summary>
            Gets or sets if the property also needs to be saved with a SEO value.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyModel.SaveOnChange">
            <summary>
            Gets or sets if the item needs to be saved immediately when the value of the property has changed.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyModel.LabelStyle">
            <summary>
            Gets or sets the style of the label.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyModel.LabelWidth">
            <summary>
            Gets or sets the width of the label.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyModel.Overview">
            <summary>
            Gets or sets the information for the property in the overview.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyModel.EnableAggregation">
            <summary>
            Gets or sets whether to enable aggregation for this property.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyModel.AggregateOptions">
            <summary>
            Gets or sets the options for aggregation.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyModel.AccessKey">
            <summary>
            Gets or sets the access key for the field in Wiser.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyModel.VisibilityPathRegex">
            <summary>
            Gets or sets the regular expression to decide whether the field should be visible in Wiser, based on the full path of this item in the tree view.
            This is only used when the item is loaded via the tree view, not if it's loaded in other ways.
            </summary>
        </member>
        <member name="T:Api.Modules.EntityProperties.Models.EntityPropertyOverviewModel">
            <summary>
            A model for the entity property used in the overview within Wiser.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyOverviewModel.Visible">
            <summary>
            Get or sets if the entity property is visible in the overview.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityProperties.Models.EntityPropertyOverviewModel.Width">
            <summary>
            Gets or sets the width.
            </summary>
        </member>
        <member name="T:Api.Modules.EntityProperties.Services.EntityPropertiesService">
            <summary>
            Service for all CRUD operations for entity properties (from the table wiser_entityproperty).
            </summary>
        </member>
        <member name="M:Api.Modules.EntityProperties.Services.EntityPropertiesService.#ctor(GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection)">
            <summary>
            Create a new instance of <see cref="T:Api.Modules.EntityProperties.Services.EntityPropertiesService"/>
            </summary>
            <param name="clientDatabaseConnection"></param>
        </member>
        <member name="M:Api.Modules.EntityProperties.Services.EntityPropertiesService.GetAsync(System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.EntityProperties.Services.EntityPropertiesService.GetAsync(System.Security.Claims.ClaimsIdentity,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.EntityProperties.Services.EntityPropertiesService.GetPropertiesOfEntityAsync(System.Security.Claims.ClaimsIdentity,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.EntityProperties.Services.EntityPropertiesService.CreateAsync(System.Security.Claims.ClaimsIdentity,Api.Modules.EntityProperties.Models.EntityPropertyModel)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.EntityProperties.Services.EntityPropertiesService.UpdateAsync(System.Security.Claims.ClaimsIdentity,System.Int32,Api.Modules.EntityProperties.Models.EntityPropertyModel)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.EntityProperties.Services.EntityPropertiesService.DuplicateAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.EntityProperties.Services.EntityPropertiesService.DeleteAsync(System.Security.Claims.ClaimsIdentity,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.EntityProperties.Services.EntityPropertiesService.CopyToAllAvailableLanguagesAsync(System.Security.Claims.ClaimsIdentity,System.Int32,Api.Modules.EntityProperties.Enums.CopyToOtherLanguagesTabOptions)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.EntityProperties.Services.EntityPropertiesService.FixOrderingAsync(System.Security.Claims.ClaimsIdentity,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.EntityTypes.Controllers.EntityTypesController">
            <summary>
            Controller for doing things with Wiser entity types.
            An item in Wiser can have different entity types. This entity type decides what kind of item it is (order, basket, product, customer etc) and which fields will be available when opening the item in Wiser.
            </summary>
        </member>
        <member name="M:Api.Modules.EntityTypes.Controllers.EntityTypesController.#ctor(Api.Modules.EntityTypes.Interfaces.IEntityTypesService)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.EntityTypes.Controllers.EntityTypesController"/>.
            </summary>
            <param name="entityTypesService"></param>
        </member>
        <member name="M:Api.Modules.EntityTypes.Controllers.EntityTypesController.GetAsync(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets all available entity types.
            </summary>
            <param name="onlyEntityTypesWithDisplayName">Optional: Set to false to get all entity types, or true to get only entity types that have a display name.</param>
            <param name="includeCount">Optional: Whether to count how many items of each entity type exist in the database.</param>
            <param name="skipEntitiesWithoutItems">Optional: Whether to skip entities that have no items. Only works when includeCount is set to true.</param>
            <returns>A list of all available entity types.</returns>
        </member>
        <member name="M:Api.Modules.EntityTypes.Controllers.EntityTypesController.GetAsync(System.String,System.Int32)">
            <summary>
            Gets the settings for an entity type.
            </summary>
            <param name="entityType">The name of the entity type.</param>
            <param name="moduleId">Optional: The ID of the module, in case the entity type has different settings for different modules.</param>
            <returns>A <see cref="T:GeeksCoreLibrary.Core.Models.EntitySettingsModel"/> containing all settings of the entity type.</returns>
        </member>
        <member name="M:Api.Modules.EntityTypes.Controllers.EntityTypesController.GetViaIdAsync(System.Int32)">
            <summary>
            Gets the settings for an entity type.
            </summary>
            <param name="id">The id the entity type.</param>
            <returns>A <see cref="T:GeeksCoreLibrary.Core.Models.EntitySettingsModel"/> containing all settings of the entity type.</returns>
        </member>
        <member name="M:Api.Modules.EntityTypes.Controllers.EntityTypesController.GetAvailableEntityTypesAsync(System.Int32,System.String)">
            <summary>
            Gets all available entity types, based on module id and parent id.
            </summary>
            <param name="moduleId">The ID of the module.</param>
            <param name="parentId">Optional: The ID of the parent. Set to 0 or skip to use the root.</param>
            <returns>A list of available entity names.</returns>
        </member>
        <member name="M:Api.Modules.EntityTypes.Controllers.EntityTypesController.CreateAsync(System.String,System.Int32)">
            <summary>
            Creates a new entity type.
            </summary>
            <param name="name">The name of the new entity type.</param>
            <param name="moduleId">The module ID the new entity type is connected to.</param>
            <returns>The ID of the new entity type.</returns>
        </member>
        <member name="M:Api.Modules.EntityTypes.Controllers.EntityTypesController.UpdateAsync(System.Int32,GeeksCoreLibrary.Core.Models.EntitySettingsModel)">
            <summary>
            Updates an existing entity type.
            </summary>
            <param name="id">The ID of the entity type.</param>
            <param name="settings">The settings to save.</param>
        </member>
        <member name="M:Api.Modules.EntityTypes.Controllers.EntityTypesController.DeleteAsync(System.Int32)">
            <summary>
            Deletes an entity type. This will only delete the entity type itself, not any items that use this type.
            </summary>
            <param name="id">The ID of the entity type.</param>
        </member>
        <member name="M:Api.Modules.EntityTypes.Controllers.EntityTypesController.GetApiConnectionIdAsync(System.String,System.String)">
            <summary>
            Gets the ID of an API connection (from wiser_api_connection) for a specific entity and action.
            </summary>
            <param name="entityType">The name of the entity type to get the API connection ID for.</param>
            <param name="actionType">The action type, this can be "after_insert", "after_update", "before_update" or "before_delete".</param>
        </member>
        <member name="T:Api.Modules.EntityTypes.Interfaces.IEntityTypesService">
            <summary>
            Service for getting settings for entity types.
            </summary>
        </member>
        <member name="M:Api.Modules.EntityTypes.Interfaces.IEntityTypesService.GetAsync(System.Security.Claims.ClaimsIdentity,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets all available entity types.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="onlyEntityTypesWithDisplayName">Optional: Set to <see langword="false"/> to get all entity types, or <see langword="true"/> to get only entity types that have a display name. Default value is <see langword="true"/>.</param>
            <param name="includeCount">Optional: Whether to count how many items of each entity type exist in the database.</param>
            <param name="skipEntitiesWithoutItems">Optional: Whether to skip entities that have no items. Only works when includeCount is set to <see langword="true" />.</param>
            <returns>The list of entity types.</returns>
        </member>
        <member name="M:Api.Modules.EntityTypes.Interfaces.IEntityTypesService.GetAsync(System.Security.Claims.ClaimsIdentity,System.String,System.Int32)">
            <summary>
            Gets the settings for an entity type. These settings will be cached for 1 hour.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="entityType">The name of the entity type.</param>
            <param name="moduleId">Optional: The ID of the module, in case the entity type has different settings for different modules.</param>
            <returns>A <see cref="T:GeeksCoreLibrary.Core.Models.EntitySettingsModel"/> containing all settings of the entity type.</returns>
        </member>
        <member name="M:Api.Modules.EntityTypes.Interfaces.IEntityTypesService.GetAsync(System.Security.Claims.ClaimsIdentity,System.Int32)">
            <summary>
            Gets the settings for an entity type. These settings will be cached for 1 hour.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="id">The ID of the entity type.</param>
            <returns>A <see cref="T:GeeksCoreLibrary.Core.Models.EntitySettingsModel"/> containing all settings of the entity type.</returns>
        </member>
        <member name="M:Api.Modules.EntityTypes.Interfaces.IEntityTypesService.GetAvailableEntityTypesAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.String)">
            <summary>
            Gets all available entity types, based on module id and parent id.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="moduleId">The ID of the module.</param>
            <param name="parentId">Optional: The ID of the parent. Set to 0 or skip to use the root.</param>
            <returns>A list of available entity names.</returns>
        </member>
        <member name="M:Api.Modules.EntityTypes.Interfaces.IEntityTypesService.CreateAsync(System.Security.Claims.ClaimsIdentity,System.String,System.Int32)">
            <summary>
            Creates a new entity type.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="name">The name of the new entity type.</param>
            <param name="moduleId">The module ID the new entity type is linked to.</param>
            <returns>The ID of the new entity type.</returns>
        </member>
        <member name="M:Api.Modules.EntityTypes.Interfaces.IEntityTypesService.UpdateAsync(System.Security.Claims.ClaimsIdentity,System.Int32,GeeksCoreLibrary.Core.Models.EntitySettingsModel)">
            <summary>
            Creates a new entity type.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="id">The ID of the entity type.</param>
            <param name="settings">The settings to save.</param>
        </member>
        <member name="M:Api.Modules.EntityTypes.Interfaces.IEntityTypesService.DeleteAsync(System.Security.Claims.ClaimsIdentity,System.Int32)">
            <summary>
            Deletes an entity type. This will only delete the entity type itself, not any items that use this type.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="id">The ID of the entity type.</param>
        </member>
        <member name="M:Api.Modules.EntityTypes.Interfaces.IEntityTypesService.GetApiConnectionIdAsync(System.String,System.String)">
            <summary>
            Gets the ID of an API connection (from wiser_api_connection) for a specific entity and action.
            </summary>
            <param name="entityType">The name of the entity type to get the API connection ID for.</param>
            <param name="actionType">The action type, this can be "after_insert", "after_update", "before_update" or "before_delete".</param>
            <returns></returns>
        </member>
        <member name="T:Api.Modules.EntityTypes.Models.EntityTypeModel">
            <summary>
            The model for a Wiser entity type.
            An item in Wiser always has an entity type, this model contains information about such entity types.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityTypes.Models.EntityTypeModel.Id">
            <summary>
            Gets or sets the technical name.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityTypes.Models.EntityTypeModel.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityTypes.Models.EntityTypeModel.ModuleId">
            <summary>
            Gets or sets the ID of the module that this entity type belongs to.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityTypes.Models.EntityTypeModel.ModuleName">
            <summary>
            Gets or sets the name of the module that this entity type belongs to.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityTypes.Models.EntityTypeModel.ModuleIcon">
            <summary>
            Gets or sets the icon name of the module this entity type belongs to.
            </summary>
        </member>
        <member name="P:Api.Modules.EntityTypes.Models.EntityTypeModel.DedicatedTablePrefix">
            <summary>
            Gets or sets the prefix for the table that items of this type are stored in.
            If empty, they will be stored in wiser_item, otherwise in [DedicatedTablePrefix_wiser_item].
            </summary>
        </member>
        <member name="P:Api.Modules.EntityTypes.Models.EntityTypeModel.TotalItems">
            <summary>
            Gets or sets the total amount of items of this entity type.
            </summary>
        </member>
        <member name="T:Api.Modules.EntityTypes.Services.EntityTypesService">
            <inheritdoc cref="T:Api.Modules.EntityTypes.Interfaces.IEntityTypesService" />
        </member>
        <member name="M:Api.Modules.EntityTypes.Services.EntityTypesService.#ctor(Api.Modules.Customers.Interfaces.IWiserCustomersService,GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection,GeeksCoreLibrary.Core.Interfaces.IWiserItemsService,GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseHelpersService)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.EntityTypes.Services.EntityTypesService"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.EntityTypes.Services.EntityTypesService.GetAsync(System.Security.Claims.ClaimsIdentity,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.EntityTypes.Services.EntityTypesService.GetAsync(System.Security.Claims.ClaimsIdentity,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.EntityTypes.Services.EntityTypesService.GetAsync(System.Security.Claims.ClaimsIdentity,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.EntityTypes.Services.EntityTypesService.GetAvailableEntityTypesAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.EntityTypes.Services.EntityTypesService.CreateAsync(System.Security.Claims.ClaimsIdentity,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.EntityTypes.Services.EntityTypesService.UpdateAsync(System.Security.Claims.ClaimsIdentity,System.Int32,GeeksCoreLibrary.Core.Models.EntitySettingsModel)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.EntityTypes.Services.EntityTypesService.DeleteAsync(System.Security.Claims.ClaimsIdentity,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.EntityTypes.Services.EntityTypesService.GetApiConnectionIdAsync(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.Files.Controllers.FilesController">
            <summary>
            Controller for all operations that have something to do with Wiser item files.
            </summary>
        </member>
        <member name="M:Api.Modules.Files.Controllers.FilesController.#ctor(Api.Modules.Files.Interfaces.IFilesService,Microsoft.Extensions.Options.IOptions{GeeksCoreLibrary.Core.Models.GclSettings})">
            <summary>
            Initializes a new instance of <see cref="T:Api.Modules.Items.Controllers.ItemsController"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.Files.Controllers.FilesController.GetTreeAsync(System.UInt64)">
            <summary>
            Gets all items in a tree view from a parent.
            </summary>
            <param name="parentId">The parent ID. Enter 0 to get items from the root directory..</param>
            <returns>A list of <see cref="T:Api.Modules.Files.Models.FileTreeViewModel"/>.</returns>
        </member>
        <member name="M:Api.Modules.Files.Controllers.FilesController.UploadAsync(System.String,System.String,System.String,System.UInt64,System.Boolean,System.Boolean,System.String,System.Int32)">
            <summary>
            Upload one or more files for an item.
            The files should be included in the request as multi part form data.
            </summary>
            <param name="encryptedId">The encrypted ID of the item the file should be linked to.</param>
            <param name="propertyName">The name of the property that contains the file upload.</param>
            <param name="title">The title/description of the file.</param>
            <param name="itemLinkId">Optional: If the file should be added to a link between two items, instead of an item, enter the ID of that link here.</param>
            <param name="useTinyPng">Optional: Whether to use tiny PNG to compress image files, one or more image files are being uploaded.</param>
            <param name="entityType">Optional: When uploading a file for an item that has a dedicated table, enter the entity type name here so that we can see which table we need to add the file to.</param>
            <param name="linkType">Optional: When uploading a file for an item link that has a dedicated table, enter the link type here so that we can see which table we need to add the file to.</param>
            <param name="useCloudFlare">Optional: Whether to use CloudFlare to store image files.</param>
            <returns>A list of <see cref="T:Api.Modules.Files.Models.FileModel"/> with file data.</returns>
        </member>
        <member name="M:Api.Modules.Files.Controllers.FilesController.AddFileUrlAsync(System.String,Api.Modules.Files.Models.FileModel,System.String,System.UInt64,System.String,System.Int32)">
            <summary>
            Adds an URL to an external file.
            </summary>
            <param name="encryptedId">The encrypted ID of the item the file is linked to.</param>
            <param name="propertyName">The name of the property that contains the file upload.</param>
            <param name="file">The file data.</param>
            <param name="itemLinkId">Optional: If the file should be added to a link between two items, instead of an item, enter the ID of that link here.</param>
            <param name="entityType">Optional: When uploading a file for an item that has a dedicated table, enter the entity type name here so that we can see which table we need to add the file to.</param>
            <param name="linkType">Optional: When uploading a file for an item link that has a dedicated table, enter the link type here so that we can see which table we need to add the file to.</param>
            <returns>The <see cref="T:Api.Modules.Files.Models.FileModel">FileModel</see> of the new file.</returns>
        </member>
        <member name="M:Api.Modules.Files.Controllers.FilesController.GetFileAsync(System.String,System.Int32,System.String,Api.Modules.Customers.Models.CustomerInformationModel,System.UInt64,System.String,System.Int32)">
            <summary>
            Gets a file of an item.
            </summary>
            <param name="itemId">The encrypted ID of the item to get the file of.</param>
            <param name="fileId">The ID of the file to get.</param>
            <param name="fileName">The full file name to return (including extension).</param>
            <param name="customerInformation">Information about the authenticated user, such as the encrypted user ID.</param>
            <param name="itemLinkId">Optional: If the file should be added to a link between two items, instead of an item, enter the ID of that link here.</param>
            <param name="entityType">Optional: When uploading a file for an item that has a dedicated table, enter the entity type name here so that we can see which table we need to add the file to.</param>
            <param name="linkType">Optional: When uploading a file for an item link that has a dedicated table, enter the link type here so that we can see which table we need to add the file to.</param>
            <returns>The file contents.</returns>
        </member>
        <member name="M:Api.Modules.Files.Controllers.FilesController.DeleteFileAsync(System.String,System.Int32,System.UInt64,System.String,System.Int32)">
            <summary>
            Deletes a file.
            </summary>
            <param name="encryptedItemId">The encrypted ID of the item the file is linked to.</param>
            <param name="fileId">The ID of the file.</param>
            <param name="itemLinkId">Optional: If the file should be added to a link between two items, instead of an item, enter the ID of that link here.</param>
            <param name="entityType">Optional: When uploading a file for an item that has a dedicated table, enter the entity type name here so that we can see which table we need to add the file to.</param>
            <param name="linkType">Optional: When uploading a file for an item link that has a dedicated table, enter the link type here so that we can see which table we need to add the file to.</param>
        </member>
        <member name="M:Api.Modules.Files.Controllers.FilesController.RenameFileAsync(System.String,System.Int32,System.String,System.UInt64,System.String,System.Int32)">
            <summary>
            Change the name of a file.
            </summary>
            <param name="encryptedItemId">The encrypted ID of the item the file is linked to.</param>
            <param name="fileId">The ID of the file.</param>
            <param name="newName">The new name of the file.</param>
            <param name="itemLinkId">Optional: If the file should be added to a link between two items, instead of an item, enter the ID of that link here.</param>
            <param name="entityType">Optional: When uploading a file for an item that has a dedicated table, enter the entity type name here so that we can see which table we need to add the file to.</param>
            <param name="linkType">Optional: When uploading a file for an item link that has a dedicated table, enter the link type here so that we can see which table we need to add the file to.</param>
        </member>
        <member name="M:Api.Modules.Files.Controllers.FilesController.UpdateFileTitleAsync(System.String,System.Int32,System.String,System.UInt64,System.String,System.Int32)">
            <summary>
            Change the title/description of a file.
            </summary>
            <param name="encryptedItemId">The encrypted ID of the item the file is linked to.</param>
            <param name="fileId">The ID of the file.</param>
            <param name="newTitle">The new title/description of the file.</param>
            <param name="itemLinkId">Optional: If the file should be added to a link between two items, instead of an item, enter the ID of that link here.</param>
            <param name="entityType">Optional: When uploading a file for an item that has a dedicated table, enter the entity type name here so that we can see which table we need to add the file to.</param>
            <param name="linkType">Optional: When uploading a file for an item link that has a dedicated table, enter the link type here so that we can see which table we need to add the file to.</param>
        </member>
        <member name="M:Api.Modules.Files.Controllers.FilesController.UpdateExtraDataAsync(System.String,System.Int32,Api.Modules.Files.Models.FileExtraDataModel,System.UInt64,System.String,System.Int32)">
            <summary>
            Update the extra data of a file. This is data such as alt texts for different languages.
            </summary>
            <param name="encryptedItemId">The encrypted ID of the item the file is linked to.</param>
            <param name="fileId">The ID of the file.</param>
            <param name="extraData">The new information of the file.</param>
            <param name="itemLinkId">Optional: If the file should be added to a link between two items, instead of an item, enter the ID of that link here.</param>
            <param name="entityType">Optional: When uploading a file for an item that has a dedicated table, enter the entity type name here so that we can see which table we need to add the file to.</param>
            <param name="linkType">Optional: When uploading a file for an item link that has a dedicated table, enter the link type here so that we can see which table we need to add the file to.</param>
        </member>
        <member name="M:Api.Modules.Files.Controllers.FilesController.UpdateOrderingAsync(System.UInt64,System.Int32,System.Int32,System.Int32,System.String,System.UInt64,System.String,System.Int32)">
            <summary>
            Updates the ordering of a file.
            </summary>
            <param name="itemId">The ID of the item the file is linked to.</param>
            <param name="fileId">The ID of the file to update.</param>
            <param name="previousPosition">The current ordering number.</param>
            <param name="newPosition">The new ordering number.</param>
            <param name="propertyName">The name of the property that contains the file upload.</param>
            <param name="itemLinkId">Optional: If the file should be added to a link between two items, instead of an item, enter the ID of that link here.</param>
            <param name="entityType">Optional: When uploading a file for an item that has a dedicated table, enter the entity type name here so that we can see which table we need to add the file to.</param>
            <param name="linkType">Optional: When uploading a file for an item link that has a dedicated table, enter the link type here so that we can see which table we need to add the file to.</param>
        </member>
        <member name="T:Api.Modules.Files.Interfaces.IFilesService">
            <summary>
            Service for handling files for Wiser items.
            </summary>
        </member>
        <member name="M:Api.Modules.Files.Interfaces.IFilesService.GetTreeAsync(System.Security.Claims.ClaimsIdentity,System.UInt64)">
            <summary>
            Gets all items in a tree view from a parent.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="parentId">Optional: The parent ID. If no value is given, then the items in the root will be retrieved.</param>
            <returns>A list of <see cref="T:Api.Modules.Files.Models.FileTreeViewModel"/>.</returns>
        </member>
        <member name="M:Api.Modules.Files.Interfaces.IFilesService.UploadAsync(System.String,System.String,System.String,Microsoft.AspNetCore.Http.IFormFileCollection,System.Security.Claims.ClaimsIdentity,System.UInt64,System.Boolean,System.Boolean,System.String,System.Int32)">
            <summary>
            Upload one or more files for an item.
            </summary>
            <param name="encryptedId">The encrypted ID of the item the file should be linked to.</param>
            <param name="propertyName">The name of the property that contains the file upload.</param>
            <param name="title">The title/description of the file.</param>
            <param name="files">The uploaded files.</param>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="itemLinkId">Optional: If the file should be added to a link between two items, instead of an item, enter the ID of that link here.</param>
            <param name="useTinyPng">Optional: Whether to use tiny PNG to compress image files, one or more image files are being uploaded.</param>
            <param name="useCloudFlare">Optional: Whether to use CloudFlare to store image files.</param>
            <param name="entityType">Optional: When uploading a file for an item that has a dedicated table, enter the entity type name here so that we can see which table we need to add the file to.</param>
            <param name="linkType">Optional: When uploading a file for an item link that has a dedicated table, enter the link type here so that we can see which table we need to add the file to.</param>
            <returns>A list of <see cref="T:Api.Modules.Files.Models.FileModel"/> with file data.</returns>
        </member>
        <member name="M:Api.Modules.Files.Interfaces.IFilesService.SaveAsync(System.Security.Claims.ClaimsIdentity,System.Byte[],System.String,System.String,System.String,System.String,System.Collections.Generic.List{Api.Core.Models.FtpSettingsModel},System.String,System.UInt64,System.UInt64,System.Boolean,System.String,System.Int32)">
            <summary>
            Save a file to the database or FTP. By default, the file will be saved in the database (wiser_itemfile), unless FTP settings are given.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="fileBytes">The file contents.</param>
            <param name="contentType">The content type of the file.</param>
            <param name="fileName">The name of the file.</param>
            <param name="propertyName">The name of the property that contains the file upload.</param>
            <param name="title">The title/description of the file.</param>
            <param name="ftpSettings">Optional: If the file should be uploaded to an FTP server, enter those settings here.</param>
            <param name="ftpDirectory">Optional: If the file should be uploaded to an FTP server, enter the directory for that here.</param>
            <param name="itemId">Optional: The ID of the item the file should be linked to.</param>
            <param name="itemLinkId">Optional: If the file should be added to a link between two items, instead of an item, enter the ID of that link here.</param>
            <param name="useCloudFlare">Optional: Whether to use CloudFlare to store image files.</param>
            <param name="entityType">Optional: When uploading a file for an item that has a dedicated table, enter the entity type name here so that we can see which table we need to add the file to.</param>
            <param name="linkType">Optional: When uploading a file for an item link that has a dedicated table, enter the link type here so that we can see which table we need to add the file to.</param>
            <returns>A list of <see cref="T:Api.Modules.Files.Models.FileModel"/> with file data.</returns>
        </member>
        <member name="M:Api.Modules.Files.Interfaces.IFilesService.GetAsync(System.String,System.Int32,System.Security.Claims.ClaimsIdentity,System.UInt64,System.String,System.Int32)">
            <summary>
            Gets a file of an item.
            </summary>
            <param name="itemId">The encrypted ID of the item to get the file of.</param>
            <param name="fileId">The ID of the file to get.</param>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="itemLinkId">Optional: If the file should be added to a link between two items, instead of an item, enter the ID of that link here.</param>
            <param name="entityType">Optional: When uploading a file for an item that has a dedicated table, enter the entity type name here so that we can see which table we need to add the file to.</param>
            <param name="linkType">Optional: When uploading a file for an item link that has a dedicated table, enter the link type here so that we can see which table we need to add the file to.</param>
            <returns>The content type, contents and URL of the file.</returns>
        </member>
        <member name="M:Api.Modules.Files.Interfaces.IFilesService.DeleteAsync(System.String,System.Int32,System.Security.Claims.ClaimsIdentity,System.UInt64,System.String,System.Int32)">
            <summary>
            Deletes a file.
            </summary>
            <param name="encryptedItemId">The encrypted ID of the item the file is linked to.</param>
            <param name="fileId">The ID of the file.</param>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="itemLinkId">Optional: If the file should be added to a link between two items, instead of an item, enter the ID of that link here.</param>
            <param name="entityType">Optional: When uploading a file for an item that has a dedicated table, enter the entity type name here so that we can see which table we need to add the file to.</param>
            <param name="linkType">Optional: When uploading a file for an item link that has a dedicated table, enter the link type here so that we can see which table we need to add the file to.</param>
        </member>
        <member name="M:Api.Modules.Files.Interfaces.IFilesService.RenameAsync(System.String,System.Int32,System.String,System.Security.Claims.ClaimsIdentity,System.UInt64,System.String,System.Int32)">
            <summary>
            Change the name of a file.
            </summary>
            <param name="encryptedItemId">The encrypted ID of the item the file is linked to.</param>
            <param name="fileId">The ID of the file.</param>
            <param name="newName">The new name of the file.</param>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="itemLinkId">Optional: If the file should be added to a link between two items, instead of an item, enter the ID of that link here.</param>
            <param name="entityType">Optional: When uploading a file for an item that has a dedicated table, enter the entity type name here so that we can see which table we need to add the file to.</param>
            <param name="linkType">Optional: When uploading a file for an item link that has a dedicated table, enter the link type here so that we can see which table we need to add the file to.</param>
        </member>
        <member name="M:Api.Modules.Files.Interfaces.IFilesService.UpdateTitleAsync(System.String,System.Int32,System.String,System.Security.Claims.ClaimsIdentity,System.UInt64,System.String,System.Int32)">
            <summary>
            Change the title/description of a file.
            </summary>
            <param name="encryptedItemId">The encrypted ID of the item the file is linked to.</param>
            <param name="fileId">The ID of the file.</param>
            <param name="newTitle">The new title/description of the file.</param>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="itemLinkId">Optional: If the file should be added to a link between two items, instead of an item, enter the ID of that link here.</param>
            <param name="entityType">Optional: When uploading a file for an item that has a dedicated table, enter the entity type name here so that we can see which table we need to add the file to.</param>
            <param name="linkType">Optional: When uploading a file for an item link that has a dedicated table, enter the link type here so that we can see which table we need to add the file to.</param>
        </member>
        <member name="M:Api.Modules.Files.Interfaces.IFilesService.UpdateExtraDataAsync(System.String,System.Int32,Api.Modules.Files.Models.FileExtraDataModel,System.Security.Claims.ClaimsIdentity,System.UInt64,System.String,System.Int32)">
            <summary>
            Update the extra data of a file. This is data such as alt texts for different languages.
            </summary>
            <param name="encryptedItemId">The encrypted ID of the item the file is linked to.</param>
            <param name="fileId">The ID of the file.</param>
            <param name="extraData">The new information of the file.</param>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="itemLinkId">Optional: If the file should be added to a link between two items, instead of an item, enter the ID of that link here.</param>
            <param name="entityType">Optional: When uploading a file for an item that has a dedicated table, enter the entity type name here so that we can see which table we need to add the file to.</param>
            <param name="linkType">Optional: When uploading a file for an item link that has a dedicated table, enter the link type here so that we can see which table we need to add the file to.</param>
        </member>
        <member name="M:Api.Modules.Files.Interfaces.IFilesService.AddUrlAsync(System.String,System.String,Api.Modules.Files.Models.FileModel,System.Security.Claims.ClaimsIdentity,System.UInt64,System.String,System.Int32)">
            <summary>
            Adds an URL to an external file.
            </summary>
            <param name="encryptedItemId">The encrypted ID of the item the file is linked to.</param>
            <param name="propertyName">The name of the property that contains the file upload.</param>
            <param name="file">The file data.</param>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="itemLinkId">Optional: If the file should be added to a link between two items, instead of an item, enter the ID of that link here.</param>
            <param name="entityType">Optional: When uploading a file for an item that has a dedicated table, enter the entity type name here so that we can see which table we need to add the file to.</param>
            <param name="linkType">Optional: When uploading a file for an item link that has a dedicated table, enter the link type here so that we can see which table we need to add the file to.</param>
            <returns>The <see cref="T:Api.Modules.Files.Models.FileModel">FileModel</see> of the new file.</returns>
        </member>
        <member name="M:Api.Modules.Files.Interfaces.IFilesService.UpdateOrderingAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.Int32,System.Int32,System.UInt64,System.String,System.UInt64,System.String,System.Int32)">
            <summary>
            Updates the ordering of a file.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="fileId">The ID of the file to update.</param>
            <param name="previousPosition">The current ordering number.</param>
            <param name="newPosition">The new ordering number.</param>
            <param name="itemId">The ID of the item the file is linked to.</param>
            <param name="propertyName">The name of the property that contains the file upload.</param>
            <param name="itemLinkId">Optional: If the file should be added to a link between two items, instead of an item, enter the ID of that link here.</param>
            <param name="entityType">Optional: When uploading a file for an item that has a dedicated table, enter the entity type name here so that we can see which table we need to add the file to.</param>
            <param name="linkType">Optional: When uploading a file for an item link that has a dedicated table, enter the link type here so that we can see which table we need to add the file to.</param>
        </member>
        <member name="M:Api.Modules.Files.Interfaces.IFilesService.FixOrderingAsync(System.UInt64,System.UInt64,System.String,System.Security.Claims.ClaimsIdentity,System.String,System.Int32)">
            <summary>
            Make sure all files of the given item/link ID and property name have correct order numbers.
            For example, if there are 3 files that all have the number "0", they will be changes to 1, 2 and 3.
            </summary>
            <param name="itemId">The ID of the item the files belong to.</param>
            <param name="itemLinkId">The ID of the link, if the files belong to an item link.</param>
            <param name="propertyName">The name of the property the files belong to.</param>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="entityType">Optional: When uploading a file for an item that has a dedicated table, enter the entity type name here so that we can see which table we need to add the file to.</param>
            <param name="linkType">Optional: When uploading a file for an item link that has a dedicated table, enter the link type here so that we can see which table we need to add the file to.</param>
        </member>
        <member name="T:Api.Modules.Files.Interfaces.Repository.IFilesRepository">
            <summary>
            Service for doing CRUD operations on files in database.
            </summary>
        </member>
        <member name="M:Api.Modules.Files.Interfaces.Repository.IFilesRepository.GetTreeAsync(System.UInt64,System.String)">
            <summary>
            Gets all items in a tree view from a parent.
            </summary>
            <param name="parentId">Optional: The parent ID. If no value is given, then the items in the root will be retrieved.</param>
            <param name="tablePrefix">Optional: If the files and directories have their own dedicated tables for wiser_item and wiser_itemfile, enter the prefix for that here.</param>
            <returns>A list of <see cref="T:Api.Modules.Files.Models.FileTreeViewModel"/>.</returns>
        </member>
        <member name="T:Api.Modules.Files.Models.Constants">
            <summary>
            Constants for the files module.
            </summary>
        </member>
        <member name="F:Api.Modules.Files.Models.Constants.FilesDirectoryEntityType">
            <summary>
            The entity type that is used for directories of global files.
            </summary>
        </member>
        <member name="F:Api.Modules.Files.Models.Constants.ClosedDirectoryIconClass">
            <summary>
            The class name to use for the icon of a closed directory.
            </summary>
        </member>
        <member name="F:Api.Modules.Files.Models.Constants.OpenedDirectoryIconClass">
            <summary>
            The class name to use for the icon of an opened directory.
            </summary>
        </member>
        <member name="F:Api.Modules.Files.Models.Constants.GlobalFilePropertyName">
            <summary>
            The property name for a global file.
            </summary>
        </member>
        <member name="T:Api.Modules.Files.Models.FileExtraDataModel">
            <summary>
            A model for storing extra data for a file, such as alt texts in multiple languages for images.
            </summary>
        </member>
        <member name="P:Api.Modules.Files.Models.FileExtraDataModel.AltTexts">
            <summary>
            Gets or sets the alt texts for images in multiple languages.
            The key is the language code and the value is the alt text for that language.
            </summary>
        </member>
        <member name="T:Api.Modules.Files.Models.FileModel">
            <summary>
            A model for a Wiser file.
            </summary>
        </member>
        <member name="P:Api.Modules.Files.Models.FileModel.ItemId">
            <summary>
            Gets or sets the item ID of the item that the file belongs to.
            </summary>
        </member>
        <member name="P:Api.Modules.Files.Models.FileModel.FileId">
            <summary>
            Gets or sets the ID of the file.
            </summary>
        </member>
        <member name="P:Api.Modules.Files.Models.FileModel.ContentType">
            <summary>
            Gets or sets the content type of the file.
            </summary>
        </member>
        <member name="P:Api.Modules.Files.Models.FileModel.Name">
            <summary>
            Gets or sets the file name.
            </summary>
        </member>
        <member name="P:Api.Modules.Files.Models.FileModel.Title">
            <summary>
            Gets or sets the title/description of the file.
            </summary>
        </member>
        <member name="P:Api.Modules.Files.Models.FileModel.Extension">
            <summary>
            Gets or sets the file extension.
            </summary>
        </member>
        <member name="P:Api.Modules.Files.Models.FileModel.Size">
            <summary>
            Gets or sets the size of the file in bytes.
            </summary>
        </member>
        <member name="P:Api.Modules.Files.Models.FileModel.ContentUrl">
            <summary>
            Gets or sets the URL to the file, if this is an external file that is not saved in our database.
            </summary>
        </member>
        <member name="P:Api.Modules.Files.Models.FileModel.EntityType">
            <summary>
            Gets or sets the entity type of the corresponding item, if this is a file saved on an item.
            </summary>
        </member>
        <member name="P:Api.Modules.Files.Models.FileModel.LinkType">
            <summary>
            Gets or sets the type of the corresponding link, if this is a file saved on a link.
            </summary>
        </member>
        <member name="P:Api.Modules.Files.Models.FileModel.ExtraData">
            <summary>
            Gets or sets the object for storing extra data, such as alt texts in multiple languages for images.
            </summary>
        </member>
        <member name="T:Api.Modules.Files.Models.FileTreeViewModel">
            <summary>
            A model for a file or directory in a tree view.
            </summary>
        </member>
        <member name="P:Api.Modules.Files.Models.FileTreeViewModel.Id">
            <summary>
            Gets or sets the ID of the file.
            </summary>
        </member>
        <member name="P:Api.Modules.Files.Models.FileTreeViewModel.EncryptedId">
            <summary>
            Gets or sets the encrypted ID of the file.
            </summary>
        </member>
        <member name="P:Api.Modules.Files.Models.FileTreeViewModel.ItemId">
            <summary>
            Gets or sets the ID of the directory that the file is linked to.
            </summary>
        </member>
        <member name="P:Api.Modules.Files.Models.FileTreeViewModel.EncryptedItemId">
            <summary>
            Gets or sets the encrypted ID of the directory that the file is linked to.
            </summary>
        </member>
        <member name="P:Api.Modules.Files.Models.FileTreeViewModel.Name">
            <summary>
            Gets or sets the name of the file or directory.
            </summary>
        </member>
        <member name="P:Api.Modules.Files.Models.FileTreeViewModel.PropertyName">
            <summary>
            Gets or sets the property name of the file.
            </summary>
        </member>
        <member name="P:Api.Modules.Files.Models.FileTreeViewModel.IsDirectory">
            <summary>
            Gets or sets whether this is a directory.
            </summary>
        </member>
        <member name="P:Api.Modules.Files.Models.FileTreeViewModel.HasChildren">
            <summary>
            Gets or sets whether this directory has children (files or other directories).
            </summary>
        </member>
        <member name="P:Api.Modules.Files.Models.FileTreeViewModel.SpriteCssClass">
            <summary>
            Gets the CSS class for which icon to show when the item is collapsed in the tree view.
            </summary>
        </member>
        <member name="P:Api.Modules.Files.Models.FileTreeViewModel.CollapsedSpriteCssClass">
            <summary>
            Gets or sets the CSS class for which icon to show when the item is collapsed in the tree view.
            </summary>
        </member>
        <member name="P:Api.Modules.Files.Models.FileTreeViewModel.ExpandedSpriteCssClass">
            <summary>
            Gets or sets the CSS class for which icon to show when the item is expanded in the tree view.
            </summary>
        </member>
        <member name="P:Api.Modules.Files.Models.FileTreeViewModel.Html">
            <summary>
            Gets or sets the HTML, if this is an HTML file.
            </summary>
        </member>
        <member name="P:Api.Modules.Files.Models.FileTreeViewModel.ContentType">
            <summary>
            Gets or sets the content type of the file.
            </summary>
        </member>
        <member name="T:Api.Modules.Files.Services.FilesService">
            <inheritdoc cref="T:Api.Modules.Files.Interfaces.IFilesService" />
        </member>
        <member name="M:Api.Modules.Files.Services.FilesService.#ctor(Api.Modules.Customers.Interfaces.IWiserCustomersService,Microsoft.Extensions.Logging.ILogger{Api.Modules.Files.Services.FilesService},GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection,GeeksCoreLibrary.Core.Interfaces.IWiserItemsService,Api.Modules.CloudFlare.Interfaces.ICloudFlareService,Api.Modules.Files.Interfaces.Repository.IFilesRepository)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.Files.Services.FilesService"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.Files.Services.FilesService.GetTreeAsync(System.Security.Claims.ClaimsIdentity,System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Files.Services.FilesService.UploadAsync(System.String,System.String,System.String,Microsoft.AspNetCore.Http.IFormFileCollection,System.Security.Claims.ClaimsIdentity,System.UInt64,System.Boolean,System.Boolean,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Files.Services.FilesService.SaveAsync(System.Security.Claims.ClaimsIdentity,System.Byte[],System.String,System.String,System.String,System.String,System.Collections.Generic.List{Api.Core.Models.FtpSettingsModel},System.String,System.UInt64,System.UInt64,System.Boolean,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Files.Services.FilesService.GetAsync(System.String,System.Int32,System.Security.Claims.ClaimsIdentity,System.UInt64,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Files.Services.FilesService.DeleteAsync(System.String,System.Int32,System.Security.Claims.ClaimsIdentity,System.UInt64,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Files.Services.FilesService.RenameAsync(System.String,System.Int32,System.String,System.Security.Claims.ClaimsIdentity,System.UInt64,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Files.Services.FilesService.UpdateTitleAsync(System.String,System.Int32,System.String,System.Security.Claims.ClaimsIdentity,System.UInt64,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Files.Services.FilesService.UpdateExtraDataAsync(System.String,System.Int32,Api.Modules.Files.Models.FileExtraDataModel,System.Security.Claims.ClaimsIdentity,System.UInt64,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Files.Services.FilesService.AddUrlAsync(System.String,System.String,Api.Modules.Files.Models.FileModel,System.Security.Claims.ClaimsIdentity,System.UInt64,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Files.Services.FilesService.UpdateOrderingAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.Int32,System.Int32,System.UInt64,System.String,System.UInt64,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Files.Services.FilesService.FixOrderingAsync(System.UInt64,System.UInt64,System.String,System.Security.Claims.ClaimsIdentity,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.Files.Services.Repository.FilesRepository">
            <inheritdoc cref="T:Api.Modules.Files.Interfaces.Repository.IFilesRepository" />
        </member>
        <member name="M:Api.Modules.Files.Services.Repository.FilesRepository.#ctor(GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection)">
            <summary>
            Creates a new instance of the <see cref="T:Api.Modules.Files.Services.Repository.FilesRepository"/> class.
            </summary>
        </member>
        <member name="M:Api.Modules.Files.Services.Repository.FilesRepository.GetTreeAsync(System.UInt64,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.Google.Controllers.GoogleTranslateController">
            <summary>
            Controller for translating texts via the Google Translate API.
            </summary>
        </member>
        <member name="M:Api.Modules.Google.Controllers.GoogleTranslateController.#ctor(Api.Modules.Google.Interfaces.IGoogleTranslateService)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.Google.Controllers.GoogleTranslateController"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.Google.Controllers.GoogleTranslateController.GetSnippetsAsync(System.String,System.String,System.String)">
            <summary>
            Gets all snippets for the content builder. Snippets are pieces of HTML that the user can add in the Content Builder.
            </summary>
            <returns>A list with zero or more <see cref="T:Api.Modules.ContentBuilder.Models.ContentBuilderSnippetModel"/>.</returns>
        </member>
        <member name="T:Api.Modules.Google.Exceptions.InvalidApiKeyException">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Google.Exceptions.InvalidApiKeyException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.Google.Interfaces.IGoogleTranslateService">
            <summary>
            Service for translating texts via the Google Translate API.
            </summary>
        </member>
        <member name="M:Api.Modules.Google.Interfaces.IGoogleTranslateService.TranslateTextAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Translates plain text into something else, using the Google Translate API.
            </summary>
            <param name="textItems">The text strings to translate. Must not be null or contain null elements.</param>
            <param name="targetLanguageCode">The code for the language to translate into. Must not be null.</param>
            <param name="sourceLanguageCode">The code for the language to translate from. May be null, in which case the server will detect the source language.</param>
            <returns>A list of translations. This will be the same size as <paramref name="textItems"/>, in the same order.</returns>
        </member>
        <member name="M:Api.Modules.Google.Interfaces.IGoogleTranslateService.TranslateHtmlAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Translates HTML into something else, using the Google Translate API.
            </summary>
            <param name="htmlItems">The HTML strings to translate. Must not be null or contain null elements.</param>
            <param name="targetLanguageCode">The code for the language to translate into. Must not be null.</param>
            <param name="sourceLanguageCode">The code for the language to translate from. May be null, in which case the server will detect the source language.</param>
            <returns>A list of translations. This will be the same size as <paramref name="htmlItems"/>, in the same order.</returns>
        </member>
        <member name="T:Api.Modules.Google.Models.GoogleSettings">
            <summary>
            Settings for Google services/APIs.
            </summary>
        </member>
        <member name="P:Api.Modules.Google.Models.GoogleSettings.TranslationsApiKey">
            <summary>
            The API Key for Google Cloud Translations API.
            </summary>
        </member>
        <member name="T:Api.Modules.Google.Services.GoogleTranslateService">
            <inheritdoc cref="T:Api.Modules.Google.Interfaces.IGoogleTranslateService" />
        </member>
        <member name="M:Api.Modules.Google.Services.GoogleTranslateService.#ctor(Microsoft.Extensions.Options.IOptions{Api.Modules.Google.Models.GoogleSettings},Microsoft.AspNetCore.Http.IHttpContextAccessor,Microsoft.Extensions.Logging.ILogger{Api.Modules.Google.Services.GoogleTranslateService})">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.Google.Services.GoogleTranslateService"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.Google.Services.GoogleTranslateService.TranslateTextAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Google.Services.GoogleTranslateService.TranslateHtmlAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.Grids.Enums.EntityGridModes">
            <summary>
            An enum containing the different types of grids we can have.
            </summary>
        </member>
        <member name="F:Api.Modules.Grids.Enums.EntityGridModes.Normal">
            <summary>
            A normal entity grid, for showing a grid with linked entities of a certain type.
            </summary>
        </member>
        <member name="F:Api.Modules.Grids.Enums.EntityGridModes.LinkOverview">
            <summary>
            A link overview, this is used for the grid that you see when adding a new link to a normal entity grid.
            </summary>
        </member>
        <member name="F:Api.Modules.Grids.Enums.EntityGridModes.TaskHistory">
            <summary>
            A grid with task history, for the tasks module that can be opened via a button in the header of Wiser.
            </summary>
        </member>
        <member name="F:Api.Modules.Grids.Enums.EntityGridModes.ChangeHistory">
            <summary>
            The change history of an entity.
            </summary>
        </member>
        <member name="F:Api.Modules.Grids.Enums.EntityGridModes.CustomQuery">
            <summary>
            A grid with a custom query.
            </summary>
        </member>
        <member name="F:Api.Modules.Grids.Enums.EntityGridModes.SearchModule">
            <summary>
            The grid for the search module.
            </summary>
        </member>
        <member name="F:Api.Modules.Grids.Enums.EntityGridModes.ItemDetailsGroup">
            <summary>
            A grid for viewing and editing all item details (fields) of a certain group.
            This is meant for dynamic item details that can be imported or created manually,
            but we don't know before hand what they will be exactly and they can be different per item.
            </summary>
        </member>
        <member name="T:Api.Modules.Grids.Interfaces.IGridsService">
            <summary>
            A service for doing things with (Kendo) grids.
            </summary>
        </member>
        <member name="M:Api.Modules.Grids.Interfaces.IGridsService.GetEntityGridDataAsync(System.String,System.String,System.Int32,System.Int32,Api.Modules.Grids.Enums.EntityGridModes,Api.Modules.Kendo.Models.GridReadOptionsModel,System.Int32,System.String,System.String,System.String,System.Boolean,System.Security.Claims.ClaimsIdentity)">
            <summary>
            Get the data for a sub-entities-grid.
            </summary>
            <param name="encryptedId">The encrypted ID of the currently opened item that contains the sub-entities-grid.</param>
            <param name="entityType">The entity type of the currently opened item that contains the sub-entities-grid.</param>
            <param name="linkTypeNumber">The link type number to use for getting linked items.</param>
            <param name="moduleId">The module ID of the items to get.</param>
            <param name="mode">The mode that the sub-entities-grid is in.</param>
            <param name="options">The options for the grid.</param>
            <param name="propertyId">The ID of the corresponding row in wiser_entityproperty.</param>
            <param name="encryptedQueryId">Optional: The encrypted ID of the query to execute for getting the data.</param>
            <param name="encryptedCountQueryId">Optional: The encrypted ID of the query to execute for counting the total amount of items.</param>
            <param name="fieldGroupName">Optional: The field group name, when getting all fields of a group.</param>
            <param name="currentItemIsSourceId">Optional: Whether the opened item (that contains the sub-entities-grid) is the source instead of the destination.</param>
            <param name="identity">The identity of the authenticated user.</param>
            <returns>The data of the grid, as a <see cref="T:Api.Modules.Grids.Models.GridSettingsAndDataModel"/>.</returns>
        </member>
        <member name="M:Api.Modules.Grids.Interfaces.IGridsService.GetOverviewGridDataAsync(System.Int32,Api.Modules.Kendo.Models.GridReadOptionsModel,System.Security.Claims.ClaimsIdentity,System.Boolean)">
            <summary>
            Get the data and settings for a module with grid view mode enabled.
            </summary>
            <param name="moduleId">The ID of the module.</param>
            <param name="options">The options for the Kendo UI grid.</param>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="isForExport">Whether this data is going to be used to export it to Excel.</param>
        </member>
        <member name="M:Api.Modules.Grids.Interfaces.IGridsService.GetDataAsync(System.Int32,System.String,Api.Modules.Kendo.Models.GridReadOptionsModel,System.String,System.String,System.Security.Claims.ClaimsIdentity)">
            <summary>
            Get the data for a grid.
            </summary>
            <param name="propertyId">The ID of the corresponding row in wiser_entityproperty.</param>
            <param name="encryptedId">The encrypted ID of the currently opened item that contains the sub-entities-grid.</param>
            <param name="options">The options for the grid.</param>
            <param name="encryptedQueryId">Optional: The encrypted ID of the query to execute for getting the data.</param>
            <param name="encryptedCountQueryId">Optional: The encrypted ID of the query to execute for counting the total amount of items.</param>
            <param name="identity">The identity of the authenticated user.</param>
            <returns>The data of the grid, as a <see cref="T:Api.Modules.Grids.Models.GridSettingsAndDataModel"/>.</returns>
        </member>
        <member name="M:Api.Modules.Grids.Interfaces.IGridsService.InsertDataAsync(System.Int32,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Security.Claims.ClaimsIdentity)">
            <summary>
            Insert a new row in a grid.
            </summary>
            <param name="propertyId">The ID of the corresponding row in wiser_entityproperty.</param>
            <param name="encryptedId">The encrypted ID of the currently opened item that contains the sub-entities-grid.</param>
            <param name="data">The data for the new row.</param>
            <param name="identity">The identity of the authenticated user.</param>
            <returns>The newly added data.</returns>
        </member>
        <member name="M:Api.Modules.Grids.Interfaces.IGridsService.UpdateDataAsync(System.Int32,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Security.Claims.ClaimsIdentity)">
            <summary>
            Update a row in a grid.
            </summary>
            <param name="propertyId">The ID of the corresponding row in wiser_entityproperty.</param>
            <param name="encryptedId">The encrypted ID of the currently opened item that contains the sub-entities-grid.</param>
            <param name="data">The new data for the row.</param>
            <param name="identity">The identity of the authenticated user.</param>
        </member>
        <member name="M:Api.Modules.Grids.Interfaces.IGridsService.DeleteDataAsync(System.Int32,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Security.Claims.ClaimsIdentity)">
            <summary>
            Delete a row in a grid.
            </summary>
            <param name="propertyId">The ID of the corresponding row in wiser_entityproperty.</param>
            <param name="encryptedId">The encrypted ID of the currently opened item that contains the sub-entities-grid.</param>
            <param name="data">The new data for the row.</param>
            <param name="identity">The identity of the authenticated user.</param>
        </member>
        <member name="T:Api.Modules.Grids.Models.FieldMapModel">
            <summary>
            A model for a field mapping (to map a grid field to a property). This is used for filters.
            </summary>
        </member>
        <member name="P:Api.Modules.Grids.Models.FieldMapModel.Field">
            <summary>
            Gets or sets the name of the field.
            </summary>
        </member>
        <member name="P:Api.Modules.Grids.Models.FieldMapModel.Property">
            <summary>
            Gets or sets the name of the property.
            </summary>
        </member>
        <member name="P:Api.Modules.Grids.Models.FieldMapModel.Ignore">
            <summary>
            Gets or sets whether to ignore this field in the filters.
            </summary>
        </member>
        <member name="P:Api.Modules.Grids.Models.FieldMapModel.ItemTableAlias">
            <summary>
            Gets or sets the table alias of the wiser_item table that should be used for this field.
            </summary>
        </member>
        <member name="P:Api.Modules.Grids.Models.FieldMapModel.AddToWhereInsteadOfJoin">
            <summary>
            Gets or sets whether to add this field to the WHERE clause of the query, instead of creating a JOIN for it.
            </summary>
        </member>
        <member name="T:Api.Modules.Grids.Models.GridSettingsAndDataModel">
            <summary>
            A model for grid settings and data.
            </summary>
        </member>
        <member name="P:Api.Modules.Grids.Models.GridSettingsAndDataModel.PageSize">
            <summary>
            Gets or sets the page size.
            </summary>
        </member>
        <member name="P:Api.Modules.Grids.Models.GridSettingsAndDataModel.Columns">
            <summary>
            Gets or sets the columns that should be shown in the grid.
            </summary>
        </member>
        <member name="P:Api.Modules.Grids.Models.GridSettingsAndDataModel.SchemaModel">
            <summary>
            Gets or sets the schema model, with information about fields and their types.
            </summary>
        </member>
        <member name="P:Api.Modules.Grids.Models.GridSettingsAndDataModel.Data">
            <summary>
            Gets or sets the data of the grid.
            </summary>
        </member>
        <member name="P:Api.Modules.Grids.Models.GridSettingsAndDataModel.TotalResults">
            <summary>
            Gets or sets the total amount of results.
            </summary>
        </member>
        <member name="P:Api.Modules.Grids.Models.GridSettingsAndDataModel.ExtraJavascript">
            <summary>
            Gets or sets any extra javascript that should be executed in Wiser.
            </summary>
        </member>
        <member name="P:Api.Modules.Grids.Models.GridSettingsAndDataModel.SearchGridSettings">
            <summary>
            Gets or sets the search grid settings. These are settings for the grid that is openend in a pop-up when the user wants to add an existing item to the grid.
            </summary>
        </member>
        <member name="P:Api.Modules.Grids.Models.GridSettingsAndDataModel.ClientSidePaging">
            <summary>
            Gets or sets whether to use client side paging.
            </summary>
        </member>
        <member name="P:Api.Modules.Grids.Models.GridSettingsAndDataModel.ClientSideSorting">
            <summary>
            Gets or sets whether to use client side sorting.
            </summary>
        </member>
        <member name="P:Api.Modules.Grids.Models.GridSettingsAndDataModel.ClientSideFiltering">
            <summary>
            Gets or sets whether to use client side filtering.
            </summary>
        </member>
        <member name="P:Api.Modules.Grids.Models.GridSettingsAndDataModel.CurrentItemIsSourceId">
            <summary>
            Gets or sets whether the current item is the source instead of the destination.
            </summary>
        </member>
        <member name="P:Api.Modules.Grids.Models.GridSettingsAndDataModel.LanguageCode">
            <summary>
            Gets or sets the language code for the grid. This is used for grids with field groups, to have a group per language code.
            </summary>
        </member>
        <member name="T:Api.Modules.Grids.Services.GridsService">
            <summary>
            Service for (Kendo) grid functionality.
            </summary>
        </member>
        <member name="M:Api.Modules.Grids.Services.GridsService.#ctor(Api.Modules.Items.Interfaces.IItemsService,Api.Modules.Customers.Interfaces.IWiserCustomersService,GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection,GeeksCoreLibrary.Core.Interfaces.IWiserItemsService,Microsoft.Extensions.Logging.ILogger{Api.Modules.Grids.Services.GridsService},GeeksCoreLibrary.Modules.GclReplacements.Interfaces.IStringReplacementsService,Api.Core.Interfaces.IApiReplacementsService)">
            <summary>
            Creates a new instance of GridsService.
            </summary>
        </member>
        <member name="M:Api.Modules.Grids.Services.GridsService.GetEntityGridDataAsync(System.String,System.String,System.Int32,System.Int32,Api.Modules.Grids.Enums.EntityGridModes,Api.Modules.Kendo.Models.GridReadOptionsModel,System.Int32,System.String,System.String,System.String,System.Boolean,System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Grids.Services.GridsService.GetOverviewGridDataAsync(System.Int32,Api.Modules.Kendo.Models.GridReadOptionsModel,System.Security.Claims.ClaimsIdentity,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Grids.Services.GridsService.GetDataAsync(System.Int32,System.String,Api.Modules.Kendo.Models.GridReadOptionsModel,System.String,System.String,System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Grids.Services.GridsService.InsertDataAsync(System.Int32,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Grids.Services.GridsService.UpdateDataAsync(System.Int32,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Grids.Services.GridsService.DeleteDataAsync(System.Int32,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.Imports.Controllers.ImportsController">
            <summary>
            A controller for doing things for the import module of Wiser.
            </summary>
        </member>
        <member name="M:Api.Modules.Imports.Controllers.ImportsController.#ctor(Api.Modules.Imports.Interfaces.IImportsService)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.Imports.Controllers.ImportsController"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.Imports.Controllers.ImportsController.PrepareImportAsync(Api.Modules.Imports.Models.ImportRequestModel)">
            <summary>
            Prepare an import to be imported by the WTS.
            </summary>
            <param name="importRequest">The information needed for the import.</param>
            <returns>A ImportResultModel containing the result of the import.</returns>
        </member>
        <member name="M:Api.Modules.Imports.Controllers.ImportsController.PrepareDeleteItemsAsync(Api.Modules.Imports.Models.DeleteItemsRequestModel)">
            <summary>
            Prepare the items to delete by finding all item ids matching the criteria of the DeleteItemsRequestModel.
            </summary>
            <param name="deleteItemsRequest">The criteria for the items to delete.</param>
            <returns>Returns a DeleteItemsConfirmModel containing all the item ids to delete.</returns>
        </member>
        <member name="M:Api.Modules.Imports.Controllers.ImportsController.DeleteItemsAsync(Api.Modules.Imports.Models.DeleteItemsConfirmModel)">
            <summary>
            Delete the items corresponding with the provided item ids.
            </summary>
            <param name="deleteItemsConfirm">The <see cref="T:Api.Modules.Imports.Models.DeleteItemsConfirmModel"/> containing the item ids to delete the items from.</param>
            <returns>Returns true on success.</returns>
        </member>
        <member name="M:Api.Modules.Imports.Controllers.ImportsController.PrepareDeleteLinksAsync(Api.Modules.Imports.Models.DeleteLinksRequestModel)">
            <summary>
            Prepare the links to delete by finding all item link ids matching the criteria of the <see cref="T:Api.Modules.Imports.Models.DeleteLinksRequestModel"/>.
            </summary>
            <param name="deleteLinksRequest">The criteria for the item links to delete.</param>
            <returns>Returns a collection of all the link item ids to delete.</returns>
        </member>
        <member name="M:Api.Modules.Imports.Controllers.ImportsController.DeleteLinksAsync(System.Collections.Generic.List{Api.Modules.Imports.Models.DeleteLinksConfirmModel})">
            <summary>
            Delete the links corresponding to the provided information.
            </summary>
            <param name="deleteLinksConfirms">A collection of <see cref="T:Api.Modules.Imports.Models.DeleteLinksConfirmModel"/>s containing the information about the links to delete.</param>
            <returns>Returns true on success.</returns>
        </member>
        <member name="M:Api.Modules.Imports.Controllers.ImportsController.GetEntityPropertiesAsync(System.String,System.Int32)">
            <summary>
            Retrieves all properties of an entity that can be used in the import module and returns them as <see cref="T:Api.Modules.EntityProperties.Models.EntityPropertyModel"/> objects.
            </summary>
            <param name="entityName">The name of the property whose properties will be retrieved.</param>
            <param name="linkType">Optional link type, in case the properties should be retrieved by link type instead of entity name.</param>
            <returns>A collection of <see cref="T:Api.Modules.EntityProperties.Models.EntityPropertyModel"/> objects.</returns>
        </member>
        <member name="T:Api.Modules.Imports.Interfaces.IImportsService">
            <summary>
            Service for the import module and the import/export module for delete by import.
            </summary>
        </member>
        <member name="M:Api.Modules.Imports.Interfaces.IImportsService.PrepareImportAsync(System.Security.Claims.ClaimsIdentity,Api.Modules.Imports.Models.ImportRequestModel)">
            <summary>
            Prepare an import to be imported by the WTS.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="importRequest">The information needed for the import.</param>
            <returns>A ImportResultModel containing the result of the import.</returns>
        </member>
        <member name="M:Api.Modules.Imports.Interfaces.IImportsService.PrepareDeleteItemsAsync(System.Security.Claims.ClaimsIdentity,Api.Modules.Imports.Models.DeleteItemsRequestModel)">
            <summary>
            Prepare the items to delete by finding all item ids matching the criteria of the <see cref="T:Api.Modules.Imports.Models.DeleteItemsRequestModel"/>.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="deleteItemsRequest">The criteria for the items to delete.</param>
            <returns>Returns a <see cref="T:Api.Modules.Imports.Models.DeleteItemsConfirmModel"/> containing all the item ids to delete.</returns>
        </member>
        <member name="M:Api.Modules.Imports.Interfaces.IImportsService.DeleteItemsAsync(System.Security.Claims.ClaimsIdentity,Api.Modules.Imports.Models.DeleteItemsConfirmModel)">
            <summary>
            Delete the items corresponding with the provided item ids.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="deleteItemsConfirm">The <see cref="T:Api.Modules.Imports.Models.DeleteItemsConfirmModel"/> containing the item ids to delete the items from.</param>
            <returns>Returns true on success.</returns>
        </member>
        <member name="M:Api.Modules.Imports.Interfaces.IImportsService.PrepareDeleteLinksAsync(System.Security.Claims.ClaimsIdentity,Api.Modules.Imports.Models.DeleteLinksRequestModel)">
            <summary>
            Prepare the links to delete by finding all item link ids matching the criteria of the <see cref="T:Api.Modules.Imports.Models.DeleteLinksRequestModel"/>.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="deleteLinksRequest">The criteria for the item links to delete.</param>
            <returns>Returns a collection of <see cref="T:Api.Modules.Imports.Models.DeleteLinksConfirmModel"/> containing information to delete the links.</returns>
        </member>
        <member name="M:Api.Modules.Imports.Interfaces.IImportsService.DeleteLinksAsync(System.Security.Claims.ClaimsIdentity,System.Collections.Generic.List{Api.Modules.Imports.Models.DeleteLinksConfirmModel})">
            <summary>
            Delete the links corresponding to the provided information.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="deleteLinksConfirms">A collection of <see cref="T:Api.Modules.Imports.Models.DeleteLinksConfirmModel"/>s containing the information about the links to delete.</param>
            <returns>Returns true on success.</returns>
        </member>
        <member name="M:Api.Modules.Imports.Interfaces.IImportsService.GetEntityPropertiesAsync(System.Security.Claims.ClaimsIdentity,System.String,System.Int32)">
            <summary>
            Retrieves all properties of an entity that can be used in the import module and returns them as <see cref="T:Api.Modules.EntityProperties.Models.EntityPropertyModel"/> objects.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="entityName">The name of the property whose properties will be retrieved.</param>
            <param name="linkType">Optional link type, in case the properties should be retrieved by link type instead of entity name.</param>
            <returns>A collection of <see cref="T:Api.Modules.EntityProperties.Models.EntityPropertyModel"/> objects.</returns>
        </member>
        <member name="T:Api.Modules.Imports.Models.ComboBoxDataModel">
            <summary>
            A model for the combo box data for the Wiser import module.
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.ComboBoxDataModel.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.ComboBoxDataModel.DisplayName">
            <summary>
            Gets or sets the display name of the property.
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.ComboBoxDataModel.Options">
            <summary>
            Gets or sets the options.
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.ComboBoxDataModel.DataQuery">
            <summary>
            Gets or sets the data query.
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.ComboBoxDataModel.Values">
            <summary>
            Gets or sets the values of the combo box.
            </summary>
        </member>
        <member name="T:Api.Modules.Imports.Models.DeleteItemsConfirmModel">
            <summary>
            A model for the confirmation of the items to delete by import.
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.DeleteItemsConfirmModel.EntityType">
            <summary>
            Gets or sets the entity type of the items to delete.
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.DeleteItemsConfirmModel.Ids">
            <summary>
            Gets or sets the IDs of the items to delete.
            </summary>
        </member>
        <member name="T:Api.Modules.Imports.Models.DeleteItemsRequestModel">
            <summary>
            A model for a delete items request to the Wiser import/export module.
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.DeleteItemsRequestModel.FilePath">
            <summary>
            Gets or sets the path for the uploaded file.
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.DeleteItemsRequestModel.EntityName">
            <summary>
            Gets or sets the name of the entity of the items to delete.
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.DeleteItemsRequestModel.PropertyName">
            <summary>
            gets or sets the name of the property to match the contents of the file with.
            </summary>
        </member>
        <member name="T:Api.Modules.Imports.Models.DeleteLinksConfirmModel">
            <summary>
            A model for the confirmation of the links to delete by import.
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.DeleteLinksConfirmModel.Ids">
            <summary>
            Gets or sets the IDs of the links to delete or the IDs of the items to remove the parent ID from.
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.DeleteLinksConfirmModel.UseParentId">
            <summary>
            Gets or sets if the link is made by a parent ID.
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.DeleteLinksConfirmModel.SourceEntityType">
            <summary>
            Gets or sets the entity type of the source item of the link.
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.DeleteLinksConfirmModel.SourceIds">
            <summary>
            Gets or sets the IDs of the source items of the link.
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.DeleteLinksConfirmModel.DestinationEntityType">
            <summary>
            Gets or sets the entity type of the destination item of the link.
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.DeleteLinksConfirmModel.DestinationIds">
            <summary>
            Gets or sets the IDs of the destination items of the link.
            </summary>
        </member>
        <member name="T:Api.Modules.Imports.Models.DeleteLinksRequestModel">
            <summary>
            A model for a delete links request to the Wiser import/export module.
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.DeleteLinksRequestModel.FilePath">
            <summary>
            Gets or sets the path for the uploaded file.
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.DeleteLinksRequestModel.DeleteLinksType">
            <summary>
            Gets or sets the type of link delete based on the number of columns of the uploaded file.
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.DeleteLinksRequestModel.LinkId">
            <summary>
            Gets or sets the ID of the link to wherein the links need to be deleted. Only used for <see cref="F:Api.Core.Enums.DeleteLinksTypes.Single"/>.
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.DeleteLinksRequestModel.DeleteSettings">
            <summary>
            Gets or sets the settings of the delete links. Only used for <see cref="F:Api.Core.Enums.DeleteLinksTypes.Multiple"/>.
            </summary>
        </member>
        <member name="T:Api.Modules.Imports.Models.ImageUploadSettingsModel">
            <summary>
            A model for the settings of the image upload in the Wiser import module.
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.ImageUploadSettingsModel.PropertyName">
            <summary>
            Gets or sets the name of the property of the image.
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.ImageUploadSettingsModel.FilePath">
            <summary>
            Gets or sets the path for the uploaded file.
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.ImageUploadSettingsModel.AllowMultipleImages">
            <summary>
            Gets or sets if multiple images are allowed.
            </summary>
        </member>
        <member name="T:Api.Modules.Imports.Models.ImportRequestModel">
            <summary>
            A model for a request to add a new import to the queue.
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.ImportRequestModel.FilePath">
            <summary>
            Gets or sets the path for the uploaded file.
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.ImportRequestModel.ImportSettings">
            <summary>
            Gets or sets the settings of the import.
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.ImportRequestModel.ImportLinkSettings">
            <summary>
            Gets or sets the settings of the link import.
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.ImportRequestModel.ImportLinkDetailSettings">
            <summary>
            Gets or sets the settings of the link detail import.
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.ImportRequestModel.ImagesFileName">
            <summary>
            Gets or sets the image file names.
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.ImportRequestModel.ImagesFilePath">
            <summary>
            Gets or sets the path for the uploaded images.
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.ImportRequestModel.EmailAddress">
            <summary>
            Gets or sets the email address to mail when the import finished.
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.ImportRequestModel.Name">
            <summary>
            Gets or sets the name of the import.
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.ImportRequestModel.StartDate">
            <summary>
            Gets or sets the date and time when the import needs to start.
            </summary>
        </member>
        <member name="T:Api.Modules.Imports.Models.ImportResultModel">
            <summary>
            A model for the result of the Wiser import module.
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.ImportResultModel.ItemsTotal">
            <summary>
            Gets or sets the total amount of items imported
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.ImportResultModel.ItemsCreated">
            <summary>
            Gets or sets the amount of created items that are imported
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.ImportResultModel.ItemsUpdated">
            <summary>
            Gets or sets the amount of updated items that are imported
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.ImportResultModel.Successful">
            <summary>
            Gets or sets the amount of successfully imported items
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.ImportResultModel.Failed">
            <summary>
            Gets or sets the amount of items that have to failed to be imported
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.ImportResultModel.Errors">
            <summary>
            Gets or sets the given errors that have occured during the import
            </summary>
        </member>
        <member name="P:Api.Modules.Imports.Models.ImportResultModel.UserFriendlyErrors">
            <summary>
            Gets or sets the given errors that have occured during the import in a user friendly wording
            </summary>
        </member>
        <member name="T:Api.Modules.Imports.Services.ImportsService">
            <inheritdoc cref="T:Api.Modules.Imports.Interfaces.IImportsService" />
        </member>
        <member name="M:Api.Modules.Imports.Services.ImportsService.#ctor(GeeksCoreLibrary.Core.Interfaces.IWiserItemsService,Api.Modules.Customers.Interfaces.IUsersService,Api.Modules.Customers.Interfaces.IWiserCustomersService,GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection,Microsoft.Extensions.Logging.ILogger{Api.Modules.Imports.Services.ImportsService})">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.Imports.Services.ImportsService"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.Imports.Services.ImportsService.PrepareImportAsync(System.Security.Claims.ClaimsIdentity,Api.Modules.Imports.Models.ImportRequestModel)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Imports.Services.ImportsService.RemoveUtf8BomBytes(System.Byte[])">
            <summary>
            Checks if the first three bytes of a byte array are the same as the UTF-8 BOM. If they are, they are removed
            This will return the original array if there are no BOM bytes
            </summary>
            <param name="fileBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Imports.Services.ImportsService.PrepareDeleteItemsAsync(System.Security.Claims.ClaimsIdentity,Api.Modules.Imports.Models.DeleteItemsRequestModel)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Imports.Services.ImportsService.DeleteItemsAsync(System.Security.Claims.ClaimsIdentity,Api.Modules.Imports.Models.DeleteItemsConfirmModel)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Imports.Services.ImportsService.PrepareDeleteLinksAsync(System.Security.Claims.ClaimsIdentity,Api.Modules.Imports.Models.DeleteLinksRequestModel)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Imports.Services.ImportsService.CreatePrepareDeleteQueryBottomForId(Api.Modules.Imports.Models.DeleteItemsRequestModel,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create the bottom of the query to find what items to delete based on id.
            </summary>
            <param name="deleteItemsRequest">The criteria for the items to delete.</param>
            <param name="fileLines"></param>
            <returns>Returns the query for after the SELECT statement for ids.</returns>
        </member>
        <member name="M:Api.Modules.Imports.Services.ImportsService.CreatePrepareDeleteQueryBottomForProperty(Api.Modules.Imports.Models.DeleteItemsRequestModel,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Create the bottom of the query to find what items to delete based on an item's property.
            </summary>
            <param name="deleteItemsRequest">The criteria for the items to delete.</param>
            <param name="fileLines"></param>
            <param name="tablePrefix">The prefix of the table where the items will be deleted</param>
            <returns>Returns the query for after the SELECT statement for an item's property</returns>
        </member>
        <member name="M:Api.Modules.Imports.Services.ImportsService.CreateQueryForSingleColumn(System.Collections.Generic.IList{System.String},Api.Modules.Imports.Models.DeleteLinksRequestModel)">
            <summary>
            Create the query to find what item links to delete for single column.
            </summary>
            <param name="fileLines"></param>
            <param name="deleteLinksRequest">The criteria for the item links to delete.</param>
            <returns>Returns the <see cref="T:Api.Modules.Imports.Models.DeleteLinksConfirmModel"/> containing the information to delete the links.</returns>
        </member>
        <member name="M:Api.Modules.Imports.Services.ImportsService.CreateQueryForMultipleColumns(System.Collections.Generic.IList{System.String},Api.Modules.Imports.Models.DeleteLinksRequestModel)">
            <summary>
            Create the query to find what item links to delete for multiple columns.
            </summary>
            <param name="fileLines"></param>
            <param name="deleteLinksRequest">The criteria for the item links to delete.</param>
            <returns>Returns the a collection of <see cref="T:Api.Modules.Imports.Models.DeleteLinksConfirmModel"/> containing the information to delete the links.</returns>
        </member>
        <member name="M:Api.Modules.Imports.Services.ImportsService.CreateDeleteLinksConfirmModel(System.String,System.Boolean,System.String,System.String)">
            <summary>
            Create a <see cref="T:Api.Modules.Imports.Models.DeleteLinksConfirmModel"/> with the given information.
            </summary>
            <param name="query">The query to perform.</param>
            <param name="useParentId">Whether the link is based on a parent id.</param>
            <param name="sourceEntityType">The type of the source entity.</param>
            <param name="destinationEntityType">The type of the destination entity.</param>
            <returns>Returns a <see cref="T:Api.Modules.Imports.Models.DeleteLinksConfirmModel"/> with the results.</returns>
        </member>
        <member name="M:Api.Modules.Imports.Services.ImportsService.DeleteLinksAsync(System.Security.Claims.ClaimsIdentity,System.Collections.Generic.List{Api.Modules.Imports.Models.DeleteLinksConfirmModel})">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Imports.Services.ImportsService.GetEntityPropertiesAsync(System.Security.Claims.ClaimsIdentity,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.Items.Controllers.ItemsController">
            <summary>
            Controller for all operations that have something to do with Wiser items.
            </summary>
        </member>
        <member name="M:Api.Modules.Items.Controllers.ItemsController.#ctor(Api.Modules.Items.Interfaces.IItemsService,Api.Modules.Grids.Interfaces.IGridsService,Api.Modules.Files.Interfaces.IFilesService,Microsoft.Extensions.Options.IOptions{GeeksCoreLibrary.Core.Models.GclSettings})">
            <summary>
            Initializes a new instance of <see cref="T:Api.Modules.Items.Controllers.ItemsController"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.Items.Controllers.ItemsController.GetItemsAsync(Api.Core.Models.PagedRequest,GeeksCoreLibrary.Core.Models.WiserItemModel)">
            <summary>
            Gets all items from Wiser. It's possible to use filters here.
            The results will be returned in multiple pages, with a max of 500 items per page.
            </summary>
            <param name="pagedRequest">Optional: Which page to get and how many items per page to get.</param>
            <param name="filters">Optional: Add filters if you only want specific results.</param>
            <returns>A PagedResults with information about the total amount of items, page number etc. The results property contains the actual results, of type FlatItemModel.</returns>
        </member>
        <member name="M:Api.Modules.Items.Controllers.ItemsController.GetItemAsync(System.String,System.String,System.UInt64,System.String,System.Int32)">
            <summary>
            Get the HTML and javascript for single Wiser item, to show the item in Wiser.
            </summary>
            <param name="encryptedId">The encrypted ID of the item to get.</param>
            <param name="propertyIdSuffix">Optional: The suffix of every field on the item. This is used to give each field a unique ID, when multiple items are opened at the same time. Default value is <see langword="null"/>.</param>
            <param name="itemLinkId">Optional: The id of the item link from wiser_itemlink. This should be used when opening an item via a sub-entities-grid, to show link fields. Default value is 0.</param>
            <param name="entityType">Optional: The entity type of the item. Default value is <see langword="null"/>.</param>
            <param name="linkType">Optional: The type number of the link, if this item also contains fields on a link.</param>
            <returns>A <see cref="T:Api.Modules.Items.Models.ItemHtmlAndScriptModel"/> with the HTML and javascript needed to load this item in Wiser.</returns>
        </member>
        <member name="M:Api.Modules.Items.Controllers.ItemsController.GetItemDetailsAsync(System.String,System.String)">
            <summary>
            Gets all details of an item.
            </summary>
            <param name="encryptedId">The encrypted ID of the item.</param>
            <param name="entityType">Optional: The entity type of the item to retrieve. This is needed when the item is saved in a different table than wiser_item. We can only look up the name of that table if we know the entity type beforehand.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Items.Controllers.ItemsController.GetLinkedItemDetailsAsync(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Retrieve an item that the given item is linked to, or and item that is linked to the given item.
            </summary>
            <param name="encryptedId">The encrypted ID of the main item.</param>
            <param name="entityType">Optional: The entity type of the item to retrieve. This is needed when the item is saved in a different table than wiser_item. We can only look up the name of that table if we know the entity type beforehand.</param>
            <param name="itemIdEntityType">Optional: You can enter the entity type of the given itemId here, if you want to get items from a dedicated table and those items can have multiple different entity types. This only works if all those items exist in the same table. Default is null.</param>
            <param name="linkType">Optional: The type number of the link.</param>
            <param name="reversed">Optional: Whether to retrieve an item that that given item is linked to (<see langword="true"/>), or an item that is linked to the given item (<see langword="false"/>).</param>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Items.Controllers.ItemsController.GetItemMetDataAsync(System.String,System.String)">
            <summary>
            Get the meta data of an item. This is data such as the title, entity type, last change date etc.
            </summary>
            <param name="encryptedId">The encrypted ID of the item.</param>
            <param name="entityType">Optional: The entity type of the item to duplicate. This is needed when the item is saved in a different table than wiser_item. We can only look up the name of that table if we know the entity type beforehand.</param>
            <returns>The item meta data.</returns>
        </member>
        <member name="M:Api.Modules.Items.Controllers.ItemsController.GetHtmlBlockAsync(System.UInt64,System.String)">
            <summary>
            Get the HTML for a specific Wiser item.
            In Wiser you can declare a default query and HTML template for entity types, to render a single item of that type on a website.
            This method will return that rendered HTML.
            </summary>
            <param name="itemId">The ID of the item to render to HTML.</param>
            <param name="entityType">Optional: The entity type of the item to duplicate. This is needed when the item is saved in a different table than wiser_item. We can only look up the name of that table if we know the entity type beforehand.</param>
            <returns>The rendered HTML for the item.</returns>
        </member>
        <member name="M:Api.Modules.Items.Controllers.ItemsController.PostAsync(GeeksCoreLibrary.Core.Models.WiserItemModel,System.String,System.Int32)">
            <summary>
            Create a new item.
            </summary>
            <param name="item">The item to create.</param>
            <param name="parentId">Optional: The encrypted ID of the parent to create this item under.</param>
            <param name="linkType">Optional: The link type of the link to the parent.</param>
            <returns>A CreateItemResultModel with information about the newly created item.</returns>
        </member>
        <member name="M:Api.Modules.Items.Controllers.ItemsController.PutAsync(System.String,GeeksCoreLibrary.Core.Models.WiserItemModel)">
            <summary>
            Updates an item.
            </summary>
            <param name="encryptedId">The encrypted ID of the item to update.</param>
            <param name="item">The new data for the item.</param>
            <returns>The updated item.</returns>
        </member>
        <member name="M:Api.Modules.Items.Controllers.ItemsController.DuplicateAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a duplicate copy of an existing item.
            </summary>
            <param name="encryptedId">The encrypted ID of the item to duplicate.</param>
            <param name="encryptedParentId">The encrypted ID of the parent of the item to duplicate. The copy will be placed under the same parent.</param>
            <param name="entityType">Optional: The entity type of the item to duplicate. This is needed when the item is saved in a different table than wiser_item. We can only look up the name of that table if we know the entity type beforehand.</param>
            <param name="parentEntityType">Optional: The entity type of the parent of the item to duplicate. This is needed when the parent item is saved in a different table than wiser_item. We can only look up the name of that table if we know the entity type beforehand.</param>
            <returns>A WiserItemDuplicationResultModel containing the result of the duplication.</returns>
        </member>
        <member name="M:Api.Modules.Items.Controllers.ItemsController.CopyToEnvironmentAsync(System.String,GeeksCoreLibrary.Core.Enums.Environments)">
            <summary>
            Copy an item one or more other environments, so that you can have multiple different versions of an item for different environments.
            </summary>
            <param name="encryptedId">The encrypted ID of the item.</param>
            <param name="newEnvironments">The environment(s) to copy the item to.</param>
            <returns>The copied item.</returns>
        </member>
        <member name="M:Api.Modules.Items.Controllers.ItemsController.ChangeEnvironmentAsync(System.String,GeeksCoreLibrary.Core.Enums.Environments,System.String)">
            <summary>
            Change the environments that an item should be visible in.
            </summary>
            <param name="encryptedId">The encrypted ID of the item.</param>
            <param name="entityType">The entity type of the item.</param>
            <param name="newEnvironments">The environment(s) to make the item visible in. Use Environments.Hidden (0) to hide an item completely.</param>
        </member>
        <member name="M:Api.Modules.Items.Controllers.ItemsController.DeleteAsync(System.String,System.Boolean,System.String)">
            <summary>
            Delete or undelete an item. Deleting an item will move it to an archive table, so it's never completely deleted by this method.
            Undeleting an item moves it from the archive table back to the actual table.
            </summary>
            <param name="encryptedId">The encrypted ID of the item to delete.</param>
            <param name="undelete">Optional: Whether to undelete the item instead of deleting it.</param>
            <param name="entityType">Optional: The entity type of the item. This is needed if the item is saved in a different table than wiser_item.</param>
        </member>
        <member name="M:Api.Modules.Items.Controllers.ItemsController.WorkflowAsync(System.String,GeeksCoreLibrary.Core.Models.WiserItemModel,System.Boolean)">
            <summary>
            Executes the workflow for an item. In wiser_entity you can set queries that need to be executed after an item has been created or updated.
            This method will execute these queries, based on what is being done with the item.
            </summary>
            <param name="encryptedId">The encrypted ID of the item that was recently created or updated.</param>
            <param name="isNewItem">Set to true if the item was just created, or false if it was updated.</param>
            <param name="item">Optional: The data of the item to execute the workflow for.</param>
            <returns>A boolean indicating whether or not anything was done. If there was no workflow setup, false will be returned, otherwise true.</returns>
        </member>
        <member name="M:Api.Modules.Items.Controllers.ItemsController.ActionButton(System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.UInt64)">
            <summary>
            Executes a custom query and return the results.
            This will call GetCustomQueryAsync and use that query.
            This will replace the details from an item in the query before executing it.
            </summary>
            <param name="encryptedId">The encrypted ID of the item to execute the query for.</param>
            <param name="propertyId">The ID of the property from wiser_entityproperty. Set to 0 if you want to use a query ID.</param>
            <param name="extraParameters">Any extra parameters to use in the query.</param>
            <param name="queryId">The encrypted ID of the query from wiser_query. Encrypt the value "0" if you want to use a property ID.</param>
            <param name="itemLinkId">Optional: If the item is linked to something else and you need to know that in the query, enter the ID of that link from wiser_itemlink here.</param>
            <returns>The results of the query.</returns>
        </member>
        <member name="M:Api.Modules.Items.Controllers.ItemsController.EntityGridAsync(System.String,System.String,Api.Modules.Kendo.Models.GridReadOptionsModel,System.Int32,System.Int32,Api.Modules.Grids.Enums.EntityGridModes,System.Int32,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Get the data for a sub-entities-grid.
            </summary>
            <param name="encryptedId">The encrypted ID of the currently opened item that contains the sub-entities-grid.</param>
            <param name="entityType">The entity type of the currently opened item that contains the sub-entities-grid.</param>
            <param name="linkTypeNumber">The link type number to use for getting linked items.</param>
            <param name="moduleId">The module ID of the items to get.</param>
            <param name="mode">The mode that the sub-entities-grid is in.</param>
            <param name="options">The options for the grid.</param>
            <param name="propertyId">The ID of the corresponding row in wiser_entityproperty.</param>
            <param name="queryId">Optional: The encrypted ID of the query to execute for getting the data.</param>
            <param name="countQueryId">Optional: The encrypted ID of the query to execute for counting the total amount of items.</param>
            <param name="fieldGroupName">Optional: The field group name, when getting all fields of a group.</param>
            <param name="currentItemIsSourceId">Optional: Whether the opened item (that contains the sub-entities-grid) is the source instead of the destination.</param>
            <returns>The data of the grid, as a <see cref="T:Api.Modules.Grids.Models.GridSettingsAndDataModel"/>.</returns>
        </member>
        <member name="M:Api.Modules.Items.Controllers.ItemsController.GetGridDataAsync(System.String,System.Int32,System.String,System.String)">
            <summary>
            Get the data for a grid.
            </summary>
            <param name="propertyId">The ID of the corresponding row in wiser_entityproperty.</param>
            <param name="encryptedId">The encrypted ID of the currently opened item that contains the sub-entities-grid.</param>
            <param name="queryId">Optional: The encrypted ID of the query to execute for getting the data.</param>
            <param name="countQueryId">Optional: The encrypted ID of the query to execute for counting the total amount of items.</param>
            <returns>The data of the grid, as a <see cref="T:Api.Modules.Grids.Models.GridSettingsAndDataModel"/>.</returns>
        </member>
        <member name="M:Api.Modules.Items.Controllers.ItemsController.GetGridDataWithFiltersAsync(System.String,System.Int32,Api.Modules.Kendo.Models.GridReadOptionsModel,System.String,System.String)">
            <summary>
            Get the data for a grid with filters.
            </summary>
            <param name="propertyId">The ID of the corresponding row in wiser_entityproperty.</param>
            <param name="encryptedId">The encrypted ID of the currently opened item that contains the sub-entities-grid.</param>
            <param name="options">The options for the grid.</param>
            <param name="queryId">Optional: The encrypted ID of the query to execute for getting the data.</param>
            <param name="countQueryId">Optional: The encrypted ID of the query to execute for counting the total amount of items.</param>
            <returns>The data of the grid, as a <see cref="T:Api.Modules.Grids.Models.GridSettingsAndDataModel"/>.</returns>
        </member>
        <member name="M:Api.Modules.Items.Controllers.ItemsController.InsertGridDataAsync(System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Insert a new row in a grid.
            </summary>
            <param name="propertyId">The ID of the corresponding row in wiser_entityproperty.</param>
            <param name="encryptedId">The encrypted ID of the currently opened item that contains the sub-entities-grid.</param>
            <param name="data">The data for the new row.</param>
            <returns>The newly added data.</returns>
        </member>
        <member name="M:Api.Modules.Items.Controllers.ItemsController.UpdateGridDataAsync(System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Update a row in a grid.
            </summary>
            <param name="propertyId">The ID of the corresponding row in wiser_entityproperty.</param>
            <param name="encryptedId">The encrypted ID of the currently opened item that contains the sub-entities-grid.</param>
            <param name="data">The new data for the row.</param>
        </member>
        <member name="M:Api.Modules.Items.Controllers.ItemsController.DeleteGridDataAsync(System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Delete a row in a grid.
            </summary>
            <param name="propertyId">The ID of the corresponding row in wiser_entityproperty.</param>
            <param name="encryptedId">The encrypted ID of the currently opened item that contains the sub-entities-grid.</param>
            <param name="data">The new data for the row.</param>
        </member>
        <member name="M:Api.Modules.Items.Controllers.ItemsController.GetPossibleEntityTypesAsync(System.UInt64)">
            <summary>
            Gets all entity types from an item ID.
            Wiser can have multiple wiser_item tables, with a prefix for certain entity types. This means an ID can exists multiple times.
            This method will get the different entity types with the given ID.
            </summary>
            <param name="itemId">The ID of the item to render to HTML.</param>
            <returns>A list of all entity types that contain an item with this ID.</returns>
        </member>
        <member name="M:Api.Modules.Items.Controllers.ItemsController.GetItemsForTreeViewAsync(System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Get all items for a tree view for a specific parent.
            This method does not work with dedicated tables for entity types or link types, because we can't know beforehand what entity types and link types a tree view will contain, so we have no way to know which dedicated tables to use.
            </summary>
            <param name="moduleId">The ID of the module.</param>
            <param name="entityType">Optional: The entity type of the item to duplicate. This is needed when the item is saved in a different table than wiser_item. We can only look up the name of that table if we know the entity type beforehand.</param>
            <param name="encryptedItemId">Optional: The encrypted ID of the parent to fix the ordering for. If no value has been given, the root will be used as parent.</param>
            <param name="orderBy">Optional: Enter the value "item_title" to order by title, or nothing to order by order number.</param>
            <param name="checkId">Optional: This is meant for item-linker fields. This is the encrypted ID for the item that should currently be checked.</param>
            <returns>A list of <see cref="T:Api.Modules.Items.Models.TreeViewItemModel"/>.</returns>
        </member>
        <member name="M:Api.Modules.Items.Controllers.ItemsController.MoveItemAsync(System.String,System.String,Api.Modules.Items.Models.MoveItemRequestModel)">
            <summary>
            Move an item to a different position in the tree view.
            </summary>
            <param name="encryptedSourceId">The encrypted ID of the item that is being moved.</param>
            <param name="encryptedDestinationId">The encrypted ID of the item that it's being moved towards.</param>
            <param name="data">The data needed to know where the item should be moved to.</param>
        </member>
        <member name="M:Api.Modules.Items.Controllers.ItemsController.AddMultipleLinksAsync(Api.Modules.Items.Models.AddOrRemoveLinksRequestModel)">
            <summary>
            Link one or more items to one or more other items.
            </summary>
            <param name="data">The data needed to add new links.</param>
        </member>
        <member name="M:Api.Modules.Items.Controllers.ItemsController.RemoveMultipleLinksAsync(Api.Modules.Items.Models.AddOrRemoveLinksRequestModel)">
            <summary>
            Removed one or more links between items.
            </summary>
            <param name="data">The data for the links to remove.</param>
        </member>
        <member name="M:Api.Modules.Items.Controllers.ItemsController.GetEncryptedIdAsync(System.UInt64)">
            <summary>
            Encrypt an ID of an item.
            </summary>
            <param name="id">The ID to encrypt.</param>
            <returns>The encrypted ID.</returns>
        </member>
        <member name="M:Api.Modules.Items.Controllers.ItemsController.GetEncryptedIdAsync(System.String,Api.Modules.Items.Models.TranslateItemRequestModel)">
            <summary>
            Translate all fields of an item into one or more other languages, using the Google Translation API.
            This will only translate fields that don't have a value yet for the destination language
            </summary>
            <param name="encryptedId">The encrypted ID of the item to translate.</param>
            <param name="settings">The settings for translating.</param>
        </member>
        <member name="T:Api.Modules.Items.Interfaces.IItemsService">
            <summary>
            A service for CRUD and other operations for items from Wiser.
            </summary>
        </member>
        <member name="M:Api.Modules.Items.Interfaces.IItemsService.GetItemsAsync(System.Security.Claims.ClaimsIdentity,Api.Core.Models.PagedRequest,GeeksCoreLibrary.Core.Models.WiserItemModel)">
            <summary>
            Gets all items from Wiser. It's possible to use filters here.
            The results will be returned in multiple pages, with a max of 500 items per page.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="pagedRequest">Optional: Which page to get and how many items per page to get.</param>
            <param name="filters">Optional: Add filters if you only want specific results.</param>
            <returns>A PagedResults with information about the total amount of items, page number etc. The results property contains the actual results, of type FlatItemModel.</returns>
        </member>
        <member name="M:Api.Modules.Items.Interfaces.IItemsService.DuplicateItemAsync(System.String,System.String,System.Security.Claims.ClaimsIdentity,System.String,System.String)">
            <summary>
            Creates a duplicate copy of an existing item.
            </summary>
            <param name="encryptedId">The encrypted ID of the item to duplicate.</param>
            <param name="encryptedParentId">The encrypted ID of the parent of the item to duplicate. The copy will be placed under the same parent.</param>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="entityType">Optional: The entity type of the item to duplicate. This is needed when the item is saved in a different table than wiser_item. We can only look up the name of that table if we know the entity type beforehand.</param>
            <param name="parentEntityType">Optional: The entity type of the parent of the item to duplicate. This is needed when the parent item is saved in a different table than wiser_item. We can only look up the name of that table if we know the entity type beforehand.</param>
            <returns>A WiserItemDuplicationResultModel containing the result of the duplication.</returns>
        </member>
        <member name="M:Api.Modules.Items.Interfaces.IItemsService.CopyToEnvironmentAsync(System.String,GeeksCoreLibrary.Core.Enums.Environments,System.Security.Claims.ClaimsIdentity)">
            <summary>
            Copy an item one or more other environments, so that you can have multiple different versions of an item for different environments.
            </summary>
            <param name="encryptedId">The encrypted ID of the item.</param>
            <param name="newEnvironments">The environment(s) to copy the item to.</param>
            <param name="identity">The identity of the authenticated user.</param>
            <returns>The copied item.</returns>
        </member>
        <member name="M:Api.Modules.Items.Interfaces.IItemsService.ChangeEnvironmentAsync(System.String,System.String,GeeksCoreLibrary.Core.Enums.Environments,System.Security.Claims.ClaimsIdentity)">
            <summary>
            Change the environments that an item should be visible in.
            </summary>
            <param name="encryptedId">The encrypted ID of the item.</param>
            <param name="entityType">The entity type of the item.</param>
            <param name="newEnvironments">The environment(s) to make the item visible in. Use Environments.Hidden (0) to hide an item completely.</param>
            <param name="identity">The identity of the authenticated user.</param>
        </member>
        <member name="M:Api.Modules.Items.Interfaces.IItemsService.CreateAsync(GeeksCoreLibrary.Core.Models.WiserItemModel,System.Security.Claims.ClaimsIdentity,System.String,System.Int32)">
            <summary>
            Create a new item.
            </summary>
            <param name="item">The item to create.</param>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="encryptedParentId">Optional: The encrypted ID of the parent to create this item under.</param>
            <param name="linkType">Optional: The link type of the link to the parent.</param>
            <returns>A CreateItemResultModel with information about the newly created item.</returns>
        </member>
        <member name="M:Api.Modules.Items.Interfaces.IItemsService.UpdateAsync(System.String,GeeksCoreLibrary.Core.Models.WiserItemModel,System.Security.Claims.ClaimsIdentity)">
            <summary>
            Updates an item.
            </summary>
            <param name="encryptedId">The encrypted ID of the item to update.</param>
            <param name="item">The new data for the item.</param>
            <param name="identity">The identity of the authenticated user.</param>
            <returns>The updated item.</returns>
        </member>
        <member name="M:Api.Modules.Items.Interfaces.IItemsService.DeleteAsync(System.String,System.Security.Claims.ClaimsIdentity,System.Boolean,System.String)">
            <summary>
            Delete or undelete an item. Deleting an item will move it to an archive table, so it's never completely deleted by this method.
            Undeleting an item moves it from the archive table back to the actual table.
            </summary>
            <param name="encryptedId">The encrypted ID of the item to delete.</param>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="undelete">Optional: Whether to undelete the item instead of deleting it.</param>
            <param name="entityType">Optional: The entity type of the item to duplicate. This is needed when the item is saved in a different table than wiser_item. We can only look up the name of that table if we know the entity type beforehand.</param>
        </member>
        <member name="M:Api.Modules.Items.Interfaces.IItemsService.ExecuteWorkflowAsync(System.String,System.Boolean,System.Security.Claims.ClaimsIdentity,GeeksCoreLibrary.Core.Models.WiserItemModel)">
            <summary>
            Executes the workflow for an item. In wiser_entity you can set queries that need to be executed after an item has been created or updated.
            This method will execute these queries, based on what is being done with the item.
            </summary>
            <param name="encryptedId">The encrypted ID of the item that was recently created or updated.</param>
            <param name="isNewItem">Set to true if the item was just created, or false if it was updated.</param>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="item">Optional: The data of the item to execute the workflow for.</param>
        </member>
        <member name="M:Api.Modules.Items.Interfaces.IItemsService.GetCustomQueryAsync(System.Int32,System.Int32,System.Security.Claims.ClaimsIdentity)">
            <summary>
            Get a query based on either a property ID or a query ID.
            If you enter a property ID, then the method will first check if there is an action_query (in wiser_entityproperty), if there isn't, it will return the data_query.
            If you enter a query ID, then the query with that ID from wiser_query will be returned.
            </summary>
            <param name="propertyId">The ID of the property from wiser_entityproperty. Set to 0 if you want to use a query ID.</param>
            <param name="queryId">The ID of the query from wiser_query. Set to 0 if you want to use a property ID.</param>
            <param name="identity">The identity of the authenticated user.</param>
            <returns>The query.</returns>
        </member>
        <member name="M:Api.Modules.Items.Interfaces.IItemsService.ExecuteCustomQueryAsync(System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Security.Claims.ClaimsIdentity,System.UInt64)">
            <summary>
            Executes a custom query and return the results.
            This will call GetCustomQueryAsync and use that query.
            This will replace the details from an item in the query before executing it.
            </summary>
            <param name="encryptedId">The encrypted ID of the item to execute the query for.</param>
            <param name="propertyId">The ID of the property from wiser_entityproperty. Set to 0 if you want to use a query ID.</param>
            <param name="extraParameters">Any extra parameters to use in the query.</param>
            <param name="encryptedQueryId">The encrypted ID of the query from wiser_query. Encrypt the value "0" if you want to use a property ID.</param>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="itemLinkId">Optional: If the item is linked to something else and you need to know that in the query, enter the ID of that link from wiser_itemlink here.</param>
            <returns>The results of the query.</returns>
        </member>
        <member name="M:Api.Modules.Items.Interfaces.IItemsService.GetItemHtmlAsync(System.String,System.Security.Claims.ClaimsIdentity,System.String,System.UInt64,System.String,System.Int32)">
            <summary>
            Get the HTML and javascript for single Wiser item, to show the item in Wiser.
            </summary>
            <param name="encryptedId">The encrypted ID of the item to get.</param>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="propertyIdSuffix">Optional: The suffix of every field on the item. This is used to give each field a unique ID, when multiple items are opened at the same time. Default value is <see langword="null"/>.</param>
            <param name="itemLinkId">Optional: The id of the item link from wiser_itemlink. This should be used when opening an item via a sub-entities-grid, to show link fields. Default value is 0.</param>
            <param name="entityType">Optional: The entity type of the item. This is needed when the item is saved in a different table than wiser_item. We can only look up the name of that table if we know the entity type beforehand.</param>
            <param name="linkType">Optional: The type number of the link, if this item also contains fields on a link.</param>
            <returns>A <see cref="T:Api.Modules.Items.Models.ItemHtmlAndScriptModel"/> with the HTML and javascript needed to load this item in Wiser. This is needed when the link is saved in a different table than wiser_itemlink. We can only look up the name of that table if we know the link type beforehand.</returns>
        </member>
        <member name="M:Api.Modules.Items.Interfaces.IItemsService.GetItemDetailsAsync(System.String,System.Security.Claims.ClaimsIdentity,System.String)">
            <summary>
            Gets a single item by its encrypted item ID.
            </summary>
            <param name="encryptedId">The encrypted ID of the item to get.</param>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="entityType">Optional: The entity type of the item to retrieve. This is needed when the item is saved in a different table than wiser_item. We can only look up the name of that table if we know the entity type beforehand.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Items.Interfaces.IItemsService.GetLinkedItemDetailsAsync(System.String,System.Security.Claims.ClaimsIdentity,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Returns all items linked to a given item, or all items the given item is linked to.
            </summary>
            <param name="encryptedId">The encrypted ID of the item to get.</param>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="entityType">Optional: The entity type of the item to retrieve. This is needed when the item is saved in a different table than wiser_item. We can only look up the name of that table if we know the entity type beforehand.</param>
            <param name="itemIdEntityType">Optional: You can enter the entity type of the given itemId here, if you want to get items from a dedicated table and those items can have multiple different entity types. This only works if all those items exist in the same table. Default is null.</param>
            <param name="linkType">Optional: The type number of the link.</param>
            <param name="reversed">Optional: Whether to retrieve an item that is linked to this item (<see langword="true"/>), or an item that this item is linked to (<see langword="false"/>).</param>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Items.Interfaces.IItemsService.GetItemMetaDataAsync(System.String,System.Security.Claims.ClaimsIdentity,System.String)">
            <summary>
            Get the meta data of an item. This is data such as the title, entity type, last change date etc.
            </summary>
            <param name="encryptedId">The encrypted ID of the item.</param>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="entityType">Optional: The entity type of the item to duplicate. This is needed when the item is saved in a different table than wiser_item. We can only look up the name of that table if we know the entity type beforehand.</param>
            <returns>The item meta data.</returns>
        </member>
        <member name="M:Api.Modules.Items.Interfaces.IItemsService.GetPropertyQueryAsync``1(System.Int32,System.String,System.Boolean,System.Nullable{System.UInt64})">
            <summary>
            Gets the query for a property of a Wiser item.
            </summary>
            <param name="propertyId">The ID of the property.</param>
            <param name="queryColumnName">The column name of the query to get (data_query, update_query etc).</param>
            <param name="alsoGetOptions">Whether to also get the options of the property.</param>
            <param name="itemId">Optional: If this query needs to be executed for a specific item, you can enter that ID here. If the query then contains the value "{itemId}", then that value will be replaced with this ID.</param>
            <typeparam name="T">The return type of the method you call this from.</typeparam>
            <returns>The query, any errors and the options (if alsoGetOptions is set to <see langword="true"/>).</returns>
        </member>
        <member name="M:Api.Modules.Items.Interfaces.IItemsService.GetEncryptedIdAsync(System.UInt64,System.Security.Claims.ClaimsIdentity)">
            <summary>
            Encrypt an ID of an item.
            </summary>
            <param name="itemId">The ID to encrypt.</param>
            <param name="identity">The identity of the authenticated user.</param>
            <returns>The encrypted ID.</returns>
        </member>
        <member name="M:Api.Modules.Items.Interfaces.IItemsService.GetHtmlForWiserEntityAsync(System.UInt64,System.Security.Claims.ClaimsIdentity,System.String)">
            <summary>
            Get the HTML for a specific Wiser item.
            In Wiser you can declare a default query and HTML template for entity types, to render a single item of that type on a website.
            This method will return that rendered HTML.
            </summary>
            <param name="itemId">The ID of the item to render to HTML.</param>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="entityType">Optional: The entity type of the item to duplicate. This is needed when the item is saved in a different table than wiser_item. We can only look up the name of that table if we know the entity type beforehand.</param>
            <returns>The rendered HTML for the item.</returns>
        </member>
        <member name="M:Api.Modules.Items.Interfaces.IItemsService.GetPossibleEntityTypesAsync(System.UInt64,System.Security.Claims.ClaimsIdentity)">
            <summary>
            Gets all entity types from an item ID.
            Wiser can have multiple wiser_item tables, with a prefix for certain entity types. This means an ID can exists multiple times.
            This method will get the different entity types with the given ID.
            </summary>
            <param name="itemId">The ID of the item to render to HTML.</param>
            <param name="identity">The identity of the authenticated user.</param>
            <returns>A list of all entity types that contain an item with this ID.</returns>
        </member>
        <member name="M:Api.Modules.Items.Interfaces.IItemsService.FixTreeViewOrderingAsync(System.Int32,System.Security.Claims.ClaimsIdentity,System.String,System.Int32)">
            <summary>
            Fixes the ordering of a tree view. This makes sure that all children of the given parent have ascending ordering numbers and no duplicate numbers.
            </summary>
            <param name="moduleId">The ID of the module.</param>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="encryptedParentId">Optional: The encrypted ID of the parent to fix the ordering for. If no value has been given, the root will be used as parent.</param>
            <param name="linkType">Optional: The link type number. Default value is 1.</param>
        </member>
        <member name="M:Api.Modules.Items.Interfaces.IItemsService.GetItemsForTreeViewAsync(System.Int32,System.Security.Claims.ClaimsIdentity,System.String,System.String,System.String,System.String)">
            <summary>
            Get all items for a tree view for a specific parent.
            </summary>
            <param name="moduleId">The ID of the module.</param>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="entityType">Optional: The entity type of the item to duplicate. This is needed when the item is saved in a different table than wiser_item. We can only look up the name of that table if we know the entity type beforehand.</param>
            <param name="encryptedParentId">Optional: The encrypted ID of the parent to fix the ordering for. If no value has been given, the root will be used as parent.</param>
            <param name="orderBy">Optional: Enter the value "item_title" to order by title, or nothing to order by order number.</param>
            <param name="encryptedCheckId">Optional: This is meant for item-linker fields. This is the encrypted ID for the item that should currently be checked.</param>
            <returns>A list of <see cref="T:Api.Modules.Items.Models.TreeViewItemModel"/>.</returns>
        </member>
        <member name="M:Api.Modules.Items.Interfaces.IItemsService.MoveItemAsync(System.Security.Claims.ClaimsIdentity,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Move an item to a different position in the tree view.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="encryptedSourceId">The encrypted ID of the item that is being moved.</param>
            <param name="encryptedDestinationId">The encrypted ID of the item that it's being moved towards.</param>
            <param name="position">Shows where the source will be dropped. One of the values over, before, or after.</param>
            <param name="encryptedSourceParentId">The encrypted ID of the original parent of the item that is being moved.</param>
            <param name="encryptedDestinationParentId">The encrypted ID of the new parent that the item is being moved to.</param>
            <param name="sourceEntityType">The entity type of the item that is being moved.</param>
            <param name="destinationEntityType">The entity type of the item that it's being moved towards.</param>
            <param name="moduleId">The ID of the module.</param>
        </member>
        <member name="M:Api.Modules.Items.Interfaces.IItemsService.AddMultipleLinksAsync(System.Security.Claims.ClaimsIdentity,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Int32,System.String)">
            <summary>
            Link one or more items to one or more other items.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="encryptedSourceIds">The encrypted IDs of the items that are being linked.</param>
            <param name="encryptedDestinationIds">The encrypted IDs of the destination items.</param>
            <param name="linkType">The link type to use for all of the links.</param>
            <param name="sourceEntityType">Optional: The entity type of the items that are being linked. This is needed when the item is saved in a different table than wiser_item. We can only look up the name of that table if we know the entity type beforehand.</param>
        </member>
        <member name="M:Api.Modules.Items.Interfaces.IItemsService.RemoveMultipleLinksAsync(System.Security.Claims.ClaimsIdentity,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Int32,System.String)">
            <summary>
            Removed one or more links between items.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="encryptedSourceIds">The encrypted IDs of the source items of the links to remove.</param>
            <param name="encryptedDestinationIds">The encrypted IDs of the destination items.</param>
            <param name="linkType">The link type to use for all of the links.</param>
            <param name="sourceEntityType">Optional: The entity type of the source items. This is needed when the item is saved in a different table than wiser_item. We can only look up the name of that table if we know the entity type beforehand.</param>
        </member>
        <member name="M:Api.Modules.Items.Interfaces.IItemsService.TranslateAllFieldsAsync(System.Security.Claims.ClaimsIdentity,System.String,Api.Modules.Items.Models.TranslateItemRequestModel)">
            <summary>
            Translate all fields of an item into one or more other languages, using the Google Translation API.
            This will only translate fields that don't have a value yet for the destination language
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="encryptedId">The encrypted ID of the item to translate.</param>
            <param name="settings">The settings for translating.</param>
        </member>
        <member name="T:Api.Modules.Items.Models.ActionButtonResultModel">
            <summary>
            A model for returning results from an action-button action.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.ActionButtonResultModel.Success">
            <summary>
            Gets or sets whether the action was executed successfully.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.ActionButtonResultModel.ErrorMessage">
            <summary>
            Gets or sets the error message, if the action was not successful.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.ActionButtonResultModel.ItemId">
            <summary>
            Gets or sets the encrypted item ID that resulted from this action.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.ActionButtonResultModel.LinkId">
            <summary>
            Gets or sets the link ID that resulted from this action.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.ActionButtonResultModel.OtherData">
            <summary>
            Gets or sets any other data to use for this action.
            </summary>
        </member>
        <member name="T:Api.Modules.Items.Models.AddOrRemoveLinksRequestModel">
            <summary>
            A model for a request to add or more a link between items.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.AddOrRemoveLinksRequestModel.EncryptedSourceIds">
            <summary>
            Gets or sets a list of encrypted item IDs, of all items that are being added or removed.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.AddOrRemoveLinksRequestModel.EncryptedDestinationIds">
            <summary>
            Gets or sets a list of encrypted item IDs of the destinations of where to move the item(s) should be to or removed from.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.AddOrRemoveLinksRequestModel.LinkType">
            <summary>
            Gets or sets the link type number.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.AddOrRemoveLinksRequestModel.SourceEntityType">
            <summary>
            Gets or sets the entity type of the source item(s).
            </summary>
        </member>
        <member name="T:Api.Modules.Items.Models.CreateItemResultModel">
            <summary>
            A model for a result of creating a new Wiser item.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.CreateItemResultModel.NewItemId">
            <summary>
            Gets or sets the encrypted id of the new item.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.CreateItemResultModel.NewItemIdPlain">
            <summary>
            Gets or sets the plain id of the new item.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.CreateItemResultModel.Icon">
            <summary>
            Gets or sets the icon that the new item should have in the tree view in Wiser.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.CreateItemResultModel.NewLinkId">
            <summary>
            Gets or sets the link link id, of the link from the new item to the given parent.
            </summary>
        </member>
        <member name="T:Api.Modules.Items.Models.DisplayItemDetailModel">
            <inheritdoc />
        </member>
        <member name="P:Api.Modules.Items.Models.DisplayItemDetailModel.DisplayName">
            <summary>
            Gets or sets the display name of the field. 
            </summary>
        </member>
        <member name="T:Api.Modules.Items.Models.FlatItemModel">
            <summary>
            A model of a Wiser item that contains all fields/details as direct properties in the JSON, instead of a list of item details that needs to be iterated through.
            This is made for Zapier, but can also be used for other things in the future.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.FlatItemModel.Id">
            <summary>
            Gets or sets the ID of the item.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.FlatItemModel.EncryptedId">
            <summary>
            Gets or sets the encrypted ID of an item.
            This should be encrypted via the method JCLEUtils.AESEncode(), with the encryption key unique to the customer and the parameter "withdate" set to true.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.FlatItemModel.UniqueUuid">
            <summary>
            Gets or sets the unique uuid, this is for saving IDs of external systems.
            If items are synchronized with other systems, the external ID should be saved here.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.FlatItemModel.ModuleId">
            <summary>
            Gets or sets the ID of the module this item belongs to.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.FlatItemModel.PublishedEnvironment">
            <summary>
            Gets or sets the published environment of the item.
            This decides in which environment(s) this item should be visible (none, dev, test, acceptance and live).
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.FlatItemModel.Removed">
            <summary>
            Gets or sets whether this item is removed/deleted.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.FlatItemModel.Title">
            <summary>
            Gets or sets the title of the item.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.FlatItemModel.AddedOn">
            <summary>
            Gets or sets the date and time this item was created.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.FlatItemModel.AddedBy">
            <summary>
            Gets or sets the name of the user that created this item.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.FlatItemModel.ChangedOn">
            <summary>
            Gets or sets the date and time of when this item has last been changed.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.FlatItemModel.ChangedBy">
            <summary>
            Gets or sets the name of the user that last changed this item.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.FlatItemModel.EntityType">
            <summary>
            Gets or sets the entity type of the item.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.FlatItemModel.Fields">
            <summary>
            Object with all fields and their values. The <see cref="T:Newtonsoft.Json.JsonExtensionDataAttribute"/> will cause the serializer to flatten this object.
            </summary>
        </member>
        <member name="T:Api.Modules.Items.Models.ItemHtmlAndScriptModel">
            <summary>
            A model for showing an item in Wiser.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.ItemHtmlAndScriptModel.Tabs">
            <summary>
            Gets or sets the list of tabs for this item.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.ItemHtmlAndScriptModel.CanRead">
            <summary>
            Gets or sets whether the user is allowed to read this item.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.ItemHtmlAndScriptModel.CanWrite">
            <summary>
            Gets or sets whether the user is allowed to change existing this item.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.ItemHtmlAndScriptModel.CanCreate">
            <summary>
            Gets or sets whether the user is allowed to create new this item.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.ItemHtmlAndScriptModel.CanDelete">
            <summary>
            Gets or sets whether the user is allowed to delete this item.
            </summary>
        </member>
        <member name="T:Api.Modules.Items.Models.ItemMetaDataModel">
            <summary>
            A model for the meta data of a Wiser item.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.ItemMetaDataModel.Id">
            <summary>
            Gets or sets the ID of the item.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.ItemMetaDataModel.OriginalItemId">
            <summary>
            Gets or sets the original ID of the item. This is used when an item has multiple versions, then this property will contain the ID of the item that was created first.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.ItemMetaDataModel.EncryptedId">
            <summary>
            Gets or sets the encrypted ID of this item.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.ItemMetaDataModel.EntityType">
            <summary>
            Gets or sets the entity type of this item.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.ItemMetaDataModel.UniqueUuid">
            <summary>
            Gets or sets the unique UUID of this item. This is normally used to save IDs from external systems, when synching items between Wiser and an external system.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.ItemMetaDataModel.PublishedEnvironment">
            <summary>
            Gets or sets the environment(s) that this item should be visible on.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.ItemMetaDataModel.ReadOnly">
            <summary>
            Gets or sets whether this item is read only and cannot be changed.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.ItemMetaDataModel.Title">
            <summary>
            Gets or sets the title/name of the item.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.ItemMetaDataModel.AddedOn">
            <summary>
            Gets or sets the date and time that this item was created.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.ItemMetaDataModel.AddedBy">
            <summary>
            Gets or sets the name of the user that created this item.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.ItemMetaDataModel.ChangedOn">
            <summary>
            Gets or sets the date and time that this item was last changed.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.ItemMetaDataModel.ChangedBy">
            <summary>
            Gets or sets the user that last changed this item.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.ItemMetaDataModel.Removed">
            <summary>
            Gets or sets whether this item has been marked as removed.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.ItemMetaDataModel.EnableMultipleEnvironments">
            <summary>
            Gets or sets whether this item can have different values/versions for different environments.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.ItemMetaDataModel.CanRead">
            <summary>
            Gets or sets whether the user is allowed to read items in this module.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.ItemMetaDataModel.CanWrite">
            <summary>
            Gets or sets whether the user is allowed to change existing items in this module.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.ItemMetaDataModel.CanCreate">
            <summary>
            Gets or sets whether the user is allowed to create new items in this module.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.ItemMetaDataModel.CanDelete">
            <summary>
            Gets or sets whether the user is allowed to delete items in this module.
            </summary>
        </member>
        <member name="T:Api.Modules.Items.Models.ItemTabOrGroupModel">
            <summary>
            A model for a tab on an item in Wiser.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.ItemTabOrGroupModel.Name">
            <summary>
            Gets or sets the name of the tab.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.ItemTabOrGroupModel.HtmlTemplate">
            <summary>
            Gets the HTML for this tab, this contains all fields.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.ItemTabOrGroupModel.ScriptTemplate">
            <summary>
            Gets the javascript for this tab, to initialize all fields on this tab when the tab is selected.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.ItemTabOrGroupModel.Groups">
            <summary>
            Gets or sets the groups on this tab.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.ItemTabOrGroupModel.HtmlTemplateBuilder">
            <summary>
            Gets or sets the <see cref="T:System.Text.StringBuilder"/> for generating the HTML for this tab.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.ItemTabOrGroupModel.ScriptTemplateBuilder">
            <summary>
            Gets or sets the <see cref="T:System.Text.StringBuilder"/> for generating the javascript for this tab.
            </summary>
        </member>
        <member name="T:Api.Modules.Items.Models.MoveItemRequestModel">
            <summary>
            A model for a request to move an item to a different location.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.MoveItemRequestModel.Position">
            <summary>
            Gets or sets the new position of the item.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.MoveItemRequestModel.EncryptedSourceParentId">
            <summary>
            Gets or sets the encrypted ID of the original parent.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.MoveItemRequestModel.EncryptedDestinationParentId">
            <summary>
            Gets or sets the encrypted ID of the parent of the destination item (the new location of the item).
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.MoveItemRequestModel.SourceEntityType">
            <summary>
            Gets or sets the entity type of the item that is being moved.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.MoveItemRequestModel.DestinationEntityType">
            <summary>
            Gets or sets the entity type of the new parent item.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.MoveItemRequestModel.ModuleId">
            <summary>
            Gets or sets the ID of the module.
            </summary>
        </member>
        <member name="T:Api.Modules.Items.Models.TranslateItemRequestModel">
            <summary>
            A model with parameters for the method for translating all fields for a Wiser item.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.TranslateItemRequestModel.EntityType">
            <summary>
            Gets or sets the entity type of the Wiser item.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.TranslateItemRequestModel.SourceLanguageCode">
            <summary>
            Gets or sets the source language code to translate from. All fields with this language code, that contain a value, will be translated.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.TranslateItemRequestModel.TargetLanguageCodes">
            <summary>
            Gets or sets the language codes to translate into. Leave empty or null to translate into all configured languages.
            </summary>
        </member>
        <member name="T:Api.Modules.Items.Models.TreeViewItemModel">
            <summary>
            A model for returning data for a Wiser item in a tree view.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.TreeViewItemModel.EncryptedItemId">
            <summary>
            Gets or sets the encrypted ID of the item.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.TreeViewItemModel.PlainItemId">
            <summary>
            Gets or sets the plain ID of the item.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.TreeViewItemModel.EncryptedOriginalItemId">
            <summary>
            Gets or sets the encrypted original ID of this item.
            An item can have different data on production than on test for example. If that happens, the ItemId will contain the Id of the original item.
            The first time an item is made, that is considered the original item. For those items, the Id and ItemId will be the same.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.TreeViewItemModel.PlainOriginalItemId">
            <summary>
            Gets or sets the plain original ID of this item.
            An item can have different data on production than on test for example. If that happens, the ItemId will contain the Id of the original item.
            The first time an item is made, that is considered the original item. For those items, the Id and ItemId will be the same.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.TreeViewItemModel.Title">
            <summary>
            Gets or sets the title/name of the item.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.TreeViewItemModel.HasChildren">
            <summary>
            Gets or sets whether this item has children.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.TreeViewItemModel.SpriteCssClass">
            <summary>
            Gets the CSS class for which icon to show when the item is collapsed in the tree view.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.TreeViewItemModel.CollapsedSpriteCssClass">
            <summary>
            Gets or sets the CSS class for which icon to show when the item is collapsed in the tree view.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.TreeViewItemModel.ExpandedSpriteCssClass">
            <summary>
            Gets or sets the CSS class for which icon to show when the item is expanded in the tree view.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.TreeViewItemModel.NodeCssClass">
            <summary>
            Gets or sets the CSS class for the main HTML element of this item in the tree view.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.TreeViewItemModel.EntityType">
            <summary>
            Gets or sets the entity type of this item.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.TreeViewItemModel.AcceptedChildTypes">
            <summary>
            Gets or sets which types of children this item can have.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.TreeViewItemModel.DestinationItemId">
            <summary>
            Gets or sets the encrypted destination/parent ID of the parent.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.TreeViewItemModel.OriginalParentId">
            <summary>
            Gets or sets the original ID of the parent.
            An item can have different data on production than on test for example. If that happens, the ItemId will contain the Id of the original item.
            The first time an item is made, that is considered the original item. For those items, the Id and ItemId will be the same.
            </summary>
        </member>
        <member name="P:Api.Modules.Items.Models.TreeViewItemModel.Checked">
            <summary>
            Gets or sets whether this item should be checked in the tree view.
            Only applicable for tree views in item-linker fields.
            </summary>
        </member>
        <member name="T:Api.Modules.Items.Services.ItemsService">
            <summary>
            A service for working with Wiser items for the new Wiser data structure that was introduced in early 2019.
            </summary>
        </member>
        <member name="M:Api.Modules.Items.Services.ItemsService.#ctor(Api.Modules.Templates.Interfaces.ITemplatesService,Api.Modules.Customers.Interfaces.IWiserCustomersService,GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection,Microsoft.AspNetCore.Http.IHttpContextAccessor,GeeksCoreLibrary.Core.Interfaces.IWiserItemsService,Api.Core.Interfaces.IJsonService,Microsoft.Extensions.Logging.ILogger{Api.Modules.Items.Services.ItemsService},GeeksCoreLibrary.Modules.GclReplacements.Interfaces.IStringReplacementsService,Api.Core.Interfaces.IApiReplacementsService,Api.Modules.Files.Interfaces.IFilesService,GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseHelpersService,GeeksCoreLibrary.Modules.Languages.Interfaces.ILanguagesService,Api.Modules.EntityProperties.Interfaces.IEntityPropertiesService,Api.Modules.Google.Interfaces.IGoogleTranslateService,GeeksCoreLibrary.Modules.Objects.Interfaces.IObjectsService)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.Items.Services.ItemsService"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.Items.Services.ItemsService.GetItemsAsync(System.Security.Claims.ClaimsIdentity,Api.Core.Models.PagedRequest,GeeksCoreLibrary.Core.Models.WiserItemModel)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Items.Services.ItemsService.DuplicateItemAsync(System.String,System.String,System.Security.Claims.ClaimsIdentity,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Items.Services.ItemsService.CopyToEnvironmentAsync(System.String,GeeksCoreLibrary.Core.Enums.Environments,System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Items.Services.ItemsService.ChangeEnvironmentAsync(System.String,System.String,GeeksCoreLibrary.Core.Enums.Environments,System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Items.Services.ItemsService.CreateAsync(GeeksCoreLibrary.Core.Models.WiserItemModel,System.Security.Claims.ClaimsIdentity,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Items.Services.ItemsService.UpdateAsync(System.String,GeeksCoreLibrary.Core.Models.WiserItemModel,System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Items.Services.ItemsService.DeleteAsync(System.String,System.Security.Claims.ClaimsIdentity,System.Boolean,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Items.Services.ItemsService.ExecuteWorkflowAsync(System.String,System.Boolean,System.Security.Claims.ClaimsIdentity,GeeksCoreLibrary.Core.Models.WiserItemModel)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Items.Services.ItemsService.GetCustomQueryAsync(System.Int32,System.Int32,System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Items.Services.ItemsService.ExecuteCustomQueryAsync(System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Security.Claims.ClaimsIdentity,System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Items.Services.ItemsService.GetItemHtmlAsync(System.String,System.Security.Claims.ClaimsIdentity,System.String,System.UInt64,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Items.Services.ItemsService.GetItemDetailsAsync(System.String,System.Security.Claims.ClaimsIdentity,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Items.Services.ItemsService.GetLinkedItemDetailsAsync(System.String,System.Security.Claims.ClaimsIdentity,System.String,System.String,System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Items.Services.ItemsService.GetItemMetaDataAsync(System.String,System.Security.Claims.ClaimsIdentity,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Items.Services.ItemsService.GetPropertyQueryAsync``1(System.Int32,System.String,System.Boolean,System.Nullable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Items.Services.ItemsService.GetEncryptedIdAsync(System.UInt64,System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Items.Services.ItemsService.GetHtmlForWiserEntityAsync(System.UInt64,System.Security.Claims.ClaimsIdentity,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Items.Services.ItemsService.GetPossibleEntityTypesAsync(System.UInt64,System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Items.Services.ItemsService.FixTreeViewOrderingAsync(System.Int32,System.Security.Claims.ClaimsIdentity,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Items.Services.ItemsService.GetItemsForTreeViewAsync(System.Int32,System.Security.Claims.ClaimsIdentity,System.String,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Items.Services.ItemsService.MoveItemAsync(System.Security.Claims.ClaimsIdentity,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Items.Services.ItemsService.AddMultipleLinksAsync(System.Security.Claims.ClaimsIdentity,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Items.Services.ItemsService.RemoveMultipleLinksAsync(System.Security.Claims.ClaimsIdentity,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Items.Services.ItemsService.TranslateAllFieldsAsync(System.Security.Claims.ClaimsIdentity,System.String,Api.Modules.Items.Models.TranslateItemRequestModel)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Items.Services.ItemsService.SaveTranslationInItem(GeeksCoreLibrary.Core.Models.WiserItemModel,GeeksCoreLibrary.Core.Models.WiserItemDetailModel,System.String,Google.Cloud.Translation.V2.TranslationResult)">
            <summary>
            Saves a translated field in a <see cref="T:GeeksCoreLibrary.Core.Models.WiserItemModel"/>. It will only do this if it doesn't have a value for that language yet.
            </summary>
            <param name="wiserItem">The item to save the value in.</param>
            <param name="originalItemDetail">The original <see cref="T:GeeksCoreLibrary.Core.Models.WiserItemDetailModel"/> that was translated to another language.</param>
            <param name="targetLanguageCode">The language code of the new value.</param>
            <param name="translatedValue">The translated value.</param>
        </member>
        <member name="T:Api.Modules.Kendo.Enums.TreeViewDropPositions">
            <summary>
            Drop position for a Kendo tree view component.
            </summary>
        </member>
        <member name="F:Api.Modules.Kendo.Enums.TreeViewDropPositions.Over">
            <summary>
            The item was dropped on a directory and needs to be added at the end of that directory.
            </summary>
        </member>
        <member name="F:Api.Modules.Kendo.Enums.TreeViewDropPositions.Before">
            <summary>
            The item was dropped before another item.
            </summary>
        </member>
        <member name="F:Api.Modules.Kendo.Enums.TreeViewDropPositions.After">
            <summary>
            The item was dropped after another item.
            </summary>
        </member>
        <member name="T:Api.Modules.Kendo.Models.DataSourceItemModel">
            <summary>
            A model for a Kendo data source item.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.DataSourceItemModel.Value">
            <summary>
            Gets or sets the value of the item.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.DataSourceItemModel.Text">
            <summary>
            Gets or sets the text (display name) of the item.
            </summary>
        </member>
        <member name="T:Api.Modules.Kendo.Models.DataSourceSchemaModel">
            <summary>
            The data item (model) configuration.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.DataSourceSchemaModel.Id">
            <summary>
            The value of the ID of the Model. This field is available only if the id is defined in the Model configuration.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.DataSourceSchemaModel.Fields">
            <summary>
            The fields of a data source.
            </summary>
        </member>
        <member name="T:Api.Modules.Kendo.Models.FieldModel">
            <summary>
            A model with field settings for a Kendo data source.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.FieldModel.Type">
            <summary>
            Gets or sets the field type (string, int etc).
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.FieldModel.Editable">
            <summary>
            Gets or sets whether this field should be editable.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.FieldModel.Nullable">
            <summary>
            Gets or sets whether this field can be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.FieldModel.Validation">
            <summary>
            Gets or sets the (client-side) validation for this field.
            </summary>
        </member>
        <member name="T:Api.Modules.Kendo.Models.GridColumn">
            <summary>
            A model with settings for a column in a grid.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.GridColumn.Field">
            <summary>
            The field to which the column is bound. The value of this field is displayed in the column's cells during data binding.
            Only columns that are bound to a field can be sortable or filterable.
            The field name should be a valid Javascript identifier and should contain only alphanumeric characters (or "$" or "_"), and may not start with a digit.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.GridColumn.Title">
            <summary>
            The text that is displayed in the column header cell. If not set the field is used.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.GridColumn.Width">
            <summary>
            The width of the column. Numeric values are treated as pixels. For more important information, please refer to https://docs.telerik.com/kendo-ui/controls/data-management/grid/appearance/overview#column-widths.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.GridColumn.Format">
            <summary>
            The format that is applied to the value before it is displayed.
            Takes the form "{0:format}" where "format" is a standard number format (https://docs.telerik.com/kendo-ui/api/javascript/kendo#standard-number-formats), custom number format (https://docs.telerik.com/kendo-ui/api/javascript/kendo#standard-number-formats), standard date format (https://docs.telerik.com/kendo-ui/api/javascript/kendo#standard-date-formats) or a custom date format (https://docs.telerik.com/kendo-ui/api/javascript/kendo#custom-date-formats).
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.GridColumn.Command">
            <summary>
            The configuration of the column command(s). If set the column would display a button for every command. Commands can be custom or built-in ("edit" or "destroy").
            The "edit" built-in command switches the current table row in edit mode.
            The "destroy" built-in command removes the data item to which the current table row is bound.
            Custom commands are supported by specifying the click option.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.GridColumn.Template">
            <summary>
            The template which renders the column content. The grid renders table rows (&lt;tr&gt;) which represent the data source items.
            Each table row consists of table cells (&lt;td&gt;) which represent the grid columns.
            By default the HTML-encoded value of the field is displayed in the column.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.GridColumn.Editor">
            <summary>
            Provides a way to specify a custom editing UI for the column. Use the container parameter to create the editing UI.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.GridColumn.Values">
            <summary>
            An array of values that will be displayed instead of the bound value. Each item in the array must have a text and value fields.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.GridColumn.DataQuery">
            <summary>
            The query for getting data for custom fields, such as dropdown fields.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.GridColumn.DataItems">
            <summary>
            The items that should be used as the data source for the custom editor, such as dropdown fields.
            </summary>
        </member>
        <member name="M:Api.Modules.Kendo.Models.GridColumn.ShouldSerializeDataQuery">
            <summary>
            This tells Newtonsoft (JSON.NET) that the property <see cref="P:Api.Modules.Kendo.Models.GridColumn.DataQuery"/> should never be serialized.
            </summary>
        </member>
        <member name="M:Api.Modules.Kendo.Models.GridColumn.ShouldSerializeDataItems">
            <summary>
            This tells Newtonsoft (JSON.NET) that the property <see cref="P:Api.Modules.Kendo.Models.GridColumn.DataItems"/> should never be serialized.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.GridColumn.Selectable">
            <summary>
            If set to true the grid will render a select column with checkboxes in each cell, thus enabling multi-row selection.
            The header checkbox allows users to select/deselect all the rows on the current page.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.GridColumn.Filterable">
            <summary>
            If set to true a filter menu will be displayed for this column when filtering is enabled.
            If set to false the filter menu will not be displayed.
            It's also possible to specifically indicate how the filters should work. See the Kendo documentation for more information: https://docs.telerik.com/kendo-ui/api/javascript/ui/grid/configuration/columns.filterable
            By default a filter menu is displayed for all columns when filtering is enabled via the filterable option.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.GridColumn.Hidden">
            <summary>
            If set to true the column will not be displayed in the grid. By default all columns are displayed.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.GridColumn.Editable">
            <summary>
            If set to false the column will not be editable by the user.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.GridColumn.ProgressBarSettings">
            <summary>
            If the column contains a progress bar, you can use this to configure it.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.GridColumn.IsLinkProperty">
            <summary>
            Gets or sets whether the field of this grid column is a property from wiser_itemlinkdetail, instead of wiser_itemdetail.
            </summary>
        </member>
        <member name="T:Api.Modules.Kendo.Models.GridFilterModel">
            <summary>
            A model for filter options for grids.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.GridFilterModel.Operator">
            <summary>
            The operator to use for filtering. Possible values:
            eq, neq, startswith, contains, doesnotcontain, endswith, isnull, isnotnull, isempty, isnotempty, lt, gt, lte and gte
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.GridFilterModel.Field">
            <summary>
            Gets or sets the field to filter on.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.GridFilterModel.Value">
            <summary>
            Gets or sets the value to filter for.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.GridFilterModel.Logic">
            <summary>
            Gets or sets the filter logic (and/or).
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.GridFilterModel.Filters">
            <summary>
            Gets or sets any sub filters.
            </summary>
        </member>
        <member name="T:Api.Modules.Kendo.Models.GridProgressBarColumnSettings">
            <summary>
            A model with settings for a progress bar inside a grid.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.GridProgressBarColumnSettings.MaxProgress">
            <summary>
            Gets or sets the maximum progress/value of the progress bar.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.GridProgressBarColumnSettings.ProgressColors">
            <summary>
            Gets or sets the different colors for different progress values.
            </summary>
        </member>
        <member name="T:Api.Modules.Kendo.Models.GridReadOptionsModel">
            <summary>
            A model for grid options.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.GridReadOptionsModel.Page">
            <summary>
            Gets or sets the page number.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.GridReadOptionsModel.PageSize">
            <summary>
            Gets or sets the page size (amount of items per page).
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.GridReadOptionsModel.Skip">
            <summary>
            Gets or sets how many items to skip.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.GridReadOptionsModel.Take">
            <summary>
            Gets or sets how many items to take.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.GridReadOptionsModel.Sort">
            <summary>
            Gets or sets sort settings.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.GridReadOptionsModel.Filter">
            <summary>
            Gets or sets filter settings.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.GridReadOptionsModel.ExtraValuesForQuery">
            <summary>
            Gets or sets any extra values to replace in the data query.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.GridReadOptionsModel.FirstLoad">
            <summary>
            Gets or sets whether this request is the first load in general, or the first load after changing filters.
            </summary>
        </member>
        <member name="T:Api.Modules.Kendo.Models.GridSortModel">
            <summary>
            A model for grid sort settings.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.GridSortModel.Field">
            <summary>
            Gets or sets the field to sort on.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.GridSortModel.Dir">
            <summary>
            Gets or set the direction to sort (asc or desc).
            </summary>
        </member>
        <member name="T:Api.Modules.Kendo.Models.ProgressBarColor">
            <summary>
            A model for settings for a progress bar color.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.ProgressBarColor.Max">
            <summary>
            Gets or sets the maximum value until when the progress bar should have this color.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.ProgressBarColor.Background">
            <summary>
            Gets or sets the background color.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.ProgressBarColor.Border">
            <summary>
            Gets or sets the border color.
            </summary>
        </member>
        <member name="T:Api.Modules.Kendo.Models.ValidationSettingsModel">
            <summary>
            A model for Kendo validator settings.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.ValidationSettingsModel.Required">
            <summary>
            Gets or sets whether the field is required.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.ValidationSettingsModel.Pattern">
            <summary>
            Gets or sets a regex pattern for validating the value.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.ValidationSettingsModel.Min">
            <summary>
            Gets or sets the minimum value.
            </summary>
        </member>
        <member name="P:Api.Modules.Kendo.Models.ValidationSettingsModel.Max">
            <summary>
            Gets or sets the maximum value.
            </summary>
        </member>
        <member name="T:Api.Modules.Languages.Controllers.LanguagesController">
            <summary>
            Controller for all operations that have something to do with Wiser languages.
            </summary>
        </member>
        <member name="M:Api.Modules.Languages.Controllers.LanguagesController.#ctor(Api.Modules.Languages.Interfaces.ILanguagesService)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.Languages.Controllers.LanguagesController"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.Languages.Controllers.LanguagesController.GetAsync">
            <summary>
            Gets all languages that are configured in Wiser.
            </summary>
            <returns>A list of <see cref="T:GeeksCoreLibrary.Modules.Languages.Models.LanguageModel">LanguageModel</see> with all configured languages.</returns>
        </member>
        <member name="M:Api.Modules.Languages.Controllers.LanguagesController.GetTranslationsAsync">
            <summary>
            Gets all values from the translations module.
            </summary>
            <returns>A dictionary where the key is the translation key and the value is the translation of the default language.</returns>
        </member>
        <member name="T:Api.Modules.Languages.Interfaces.ILanguagesService">
            <summary>
            A service for getting languages and translations from Wiser.
            </summary>
        </member>
        <member name="M:Api.Modules.Languages.Interfaces.ILanguagesService.GetAllLanguagesAsync">
            <summary>
            Gets all languages that are configured in Wiser.
            </summary>
            <returns>A list of <see cref="T:GeeksCoreLibrary.Modules.Languages.Models.LanguageModel">LanguageModel</see> with all configured languages.</returns>
        </member>
        <member name="M:Api.Modules.Languages.Interfaces.ILanguagesService.GetAllTranslationsAsync">
            <summary>
            Gets all values from the translations module.
            </summary>
            <returns>A dictionary where the key is the translation key and the value is the translation of the default language.</returns>
        </member>
        <member name="T:Api.Modules.Languages.Services.CachedLanguagesService">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Languages.Services.CachedLanguagesService.#ctor(LazyCache.IAppCache,Microsoft.Extensions.Options.IOptions{Api.Core.Models.ApiSettings},GeeksCoreLibrary.Core.Interfaces.ICacheService,Api.Modules.Languages.Interfaces.ILanguagesService,GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.Languages.Services.CachedLanguagesService"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.Languages.Services.CachedLanguagesService.GetAllLanguagesAsync">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Languages.Services.CachedLanguagesService.GetAllTranslationsAsync">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.Languages.Services.LanguagesService">
            <inheritdoc cref="T:Api.Modules.Languages.Interfaces.ILanguagesService" />
        </member>
        <member name="M:Api.Modules.Languages.Services.LanguagesService.#ctor(GeeksCoreLibrary.Modules.Languages.Interfaces.ILanguagesService,GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection,GeeksCoreLibrary.Modules.Objects.Interfaces.IObjectsService)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.Languages.Services.LanguagesService"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.Languages.Services.LanguagesService.GetAllLanguagesAsync">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Languages.Services.LanguagesService.GetAllTranslationsAsync">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.LinkSettings.Controllers.LinkSettingsController">
            <summary>
            Controller for all CRUD functions for link type settings.
            </summary>
        </member>
        <member name="M:Api.Modules.LinkSettings.Controllers.LinkSettingsController.#ctor(Api.Modules.LinkSettings.Interfaces.ILinkSettingsService)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.LinkSettings.Controllers.LinkSettingsController"/>.
            </summary>
            <param name="linkSettingsService"></param>
        </member>
        <member name="M:Api.Modules.LinkSettings.Controllers.LinkSettingsController.Get">
            <summary>
            Get all link settings. 
            </summary>
            <returns>A List of <see cref="T:GeeksCoreLibrary.Core.Models.LinkSettingsModel"/> with all settings.</returns>
        </member>
        <member name="M:Api.Modules.LinkSettings.Controllers.LinkSettingsController.Get(System.Int32)">
            <summary>
            Get link settings based on ID. 
            </summary>
            <param name="id">The ID of the settings from wiser_link.</param>
            <returns>A <see cref="T:GeeksCoreLibrary.Core.Models.LinkSettingsModel"/> with all settings.</returns>
        </member>
        <member name="M:Api.Modules.LinkSettings.Controllers.LinkSettingsController.Create(GeeksCoreLibrary.Core.Models.LinkSettingsModel)">
            <summary>
            Creates new link settings.
            </summary>
            <param name="linkSettings">The link settings to create.</param>
            <returns>The newly created link settings.</returns>
        </member>
        <member name="M:Api.Modules.LinkSettings.Controllers.LinkSettingsController.Update(System.Int32,GeeksCoreLibrary.Core.Models.LinkSettingsModel)">
            <summary>
            Updates existing link settings.
            </summary>
            <param name="id">The ID of the link settings to update.</param>
            <param name="linkSettings">The new data to save.</param>
        </member>
        <member name="M:Api.Modules.LinkSettings.Controllers.LinkSettingsController.Delete(System.Int32)">
            <summary>
            Deletes link settings.
            </summary>
            <param name="id">The ID of the link settings to delete.</param>
        </member>
        <member name="T:Api.Modules.LinkSettings.Interfaces.ILinkSettingsService">
            <summary>
            Interface for all CRUD operations for link settings (from the table wiser_link).
            </summary>
        </member>
        <member name="M:Api.Modules.LinkSettings.Interfaces.ILinkSettingsService.GetAsync(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Get all link settings. 
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <returns>A List of <see cref="T:GeeksCoreLibrary.Core.Models.LinkSettingsModel"/> with all settings.</returns>
        </member>
        <member name="M:Api.Modules.LinkSettings.Interfaces.ILinkSettingsService.GetAsync(System.Security.Claims.ClaimsIdentity,System.Int32)">
            <summary>
            Get link settings based on ID. 
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="id">The ID of the settings from wiser_link.</param>
            <returns>A <see cref="T:GeeksCoreLibrary.Core.Models.LinkSettingsModel"/> with all settings.</returns>
        </member>
        <member name="M:Api.Modules.LinkSettings.Interfaces.ILinkSettingsService.CreateAsync(System.Security.Claims.ClaimsIdentity,GeeksCoreLibrary.Core.Models.LinkSettingsModel)">
            <summary>
            Creates new link settings.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="linkSettings">The link settings to create.</param>
            <returns>The newly created link settings.</returns>
        </member>
        <member name="M:Api.Modules.LinkSettings.Interfaces.ILinkSettingsService.UpdateAsync(System.Security.Claims.ClaimsIdentity,System.Int32,GeeksCoreLibrary.Core.Models.LinkSettingsModel)">
            <summary>
            Updates existing link settings.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="id">The ID of the link settings to update.</param>
            <param name="linkSettings">The new data to save.</param>
        </member>
        <member name="M:Api.Modules.LinkSettings.Interfaces.ILinkSettingsService.DeleteAsync(System.Security.Claims.ClaimsIdentity,System.Int32)">
            <summary>
            Deletes link settings.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="id">The ID of the link settings to delete.</param>
        </member>
        <member name="T:Api.Modules.LinkSettings.Services.LinkSettingsService">
            <summary>
            Service for all CRUD operations for item link settings.
            </summary>
        </member>
        <member name="M:Api.Modules.LinkSettings.Services.LinkSettingsService.#ctor(GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection,GeeksCoreLibrary.Core.Interfaces.IWiserItemsService)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.LinkSettings.Services.LinkSettingsService"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.LinkSettings.Services.LinkSettingsService.GetAsync(System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.LinkSettings.Services.LinkSettingsService.GetAsync(System.Security.Claims.ClaimsIdentity,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.LinkSettings.Services.LinkSettingsService.CreateAsync(System.Security.Claims.ClaimsIdentity,GeeksCoreLibrary.Core.Models.LinkSettingsModel)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.LinkSettings.Services.LinkSettingsService.UpdateAsync(System.Security.Claims.ClaimsIdentity,System.Int32,GeeksCoreLibrary.Core.Models.LinkSettingsModel)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.LinkSettings.Services.LinkSettingsService.DeleteAsync(System.Security.Claims.ClaimsIdentity,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.Modules.Controllers.ModulesController">
            <summary>
            Controller for getting data about the different modules available in Wiser en to get a list of the modules that the authenticated user has access to.
            </summary>
        </member>
        <member name="M:Api.Modules.Modules.Controllers.ModulesController.#ctor(Api.Modules.Modules.Interfaces.IModulesService,Api.Modules.Grids.Interfaces.IGridsService)">
            <summary>
            Creates a new instance of ModulesController.
            </summary>
        </member>
        <member name="M:Api.Modules.Modules.Controllers.ModulesController.GetAsync">
            <summary>
            Gets all Wiser module that the user is allowed to use.
            </summary>
        </member>
        <member name="M:Api.Modules.Modules.Controllers.ModulesController.OverviewGridAsync(System.Int32,Api.Modules.Kendo.Models.GridReadOptionsModel)">
            <summary>
            Gets the data and settings for a module with grid view mode enabled.
            </summary>
            <param name="id">The ID of the module.</param>
            <param name="options">The options for the Kendo UI grid.</param>
        </member>
        <member name="M:Api.Modules.Modules.Controllers.ModulesController.GetSettingsAsync">
            <summary>
            Get settings from all Wiser modules.
            </summary>
        </member>
        <member name="M:Api.Modules.Modules.Controllers.ModulesController.GetSettingsAsync(System.Int32)">
            <summary>
            Gets settings for a Wiser module.
            </summary>
            <param name="id">The ID of the module.</param>
        </member>
        <member name="M:Api.Modules.Modules.Controllers.ModulesController.UpdateSettings(System.Int32,Api.Modules.Modules.Models.ModuleSettingsModel)">
            <summary>
            Update settings for a Wiser module.
            </summary>
            <param name="id">The ID of the module.</param>
            <param name="moduleSettingsModel">Module settings data</param>
        </member>
        <member name="M:Api.Modules.Modules.Controllers.ModulesController.CreateAsync(System.String)">
            <summary>
            Creates a new Wiser module.
            </summary>
            <param name="name">Name of the new module</param>
            <returns>The ID of the newly created settings.</returns>
        </member>
        <member name="M:Api.Modules.Modules.Controllers.ModulesController.ExportAsync(System.Int32,System.String)">
            <summary>
            Exports the data of a Wiser module to Excel. This only works for grid view modules.
            </summary>
            <param name="id">The ID of the module to export.</param>
            <param name="fileName">Optional: The name that the exported file should be.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Modules.Controllers.ModulesController.GetModuleGroupsAsync">
            <summary>
            Gets a list of all currently used module groups.
            </summary>
            <returns>A list with all group names.</returns>
        </member>
        <member name="M:Api.Modules.Modules.Controllers.ModulesController.DeleteAsync(System.Int32)">
            <summary>
            Deletes a module.
            </summary>
            <param name="id">The ID of the module.</param>
        </member>
        <member name="T:Api.Modules.Modules.Interfaces.IModulesService">
            <summary>
            Service for getting information / settings for Wiser modules.
            </summary>
        </member>
        <member name="M:Api.Modules.Modules.Interfaces.IModulesService.GetAsync(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Gets the list of modules that the authenticated user has access to.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Modules.Interfaces.IModulesService.GetSettingsAsync(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Gets the settings for all modules.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Modules.Interfaces.IModulesService.GetSettingsAsync(System.Int32,System.Security.Claims.ClaimsIdentity)">
            <summary>
            Gets the settings for a single module.
            </summary>
            <param name="id">The ID of the module.</param>
            <param name="identity">The identity of the authenticated user.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Modules.Interfaces.IModulesService.CreateAsync(System.String,System.Security.Claims.ClaimsIdentity)">
            <summary>
            Creates a new module
            </summary>
            <param name="name">The name of the module</param>
            <param name="identity">The identity of the authenticated user.</param>
            <returns>The id of new module</returns>
        </member>
        <member name="M:Api.Modules.Modules.Interfaces.IModulesService.UpdateSettingsAsync(System.Int32,System.Security.Claims.ClaimsIdentity,Api.Modules.Modules.Models.ModuleSettingsModel)">
            <summary>
            Update the settings for a single module.
            </summary>
            <param name="id">The ID of the module.</param>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="moduleSettingsModel">Module setting</param>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Modules.Interfaces.IModulesService.ExportAsync(System.Int32,System.Security.Claims.ClaimsIdentity)">
            <summary>
            Exports a module to Excel. Only works for grid view modules.
            </summary>
            <param name="id">The ID of the module.</param>
            <param name="identity">The identity of the authenticated user.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Modules.Interfaces.IModulesService.GetModuleGroupsAsync(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Gets a list of all currently used module groups.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <returns>A list with all group names.</returns>
        </member>
        <member name="M:Api.Modules.Modules.Interfaces.IModulesService.DeleteAsync(System.Security.Claims.ClaimsIdentity,System.Int32)">
            <summary>
            Deletes a module.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="id">The ID of the module.</param>
        </member>
        <member name="T:Api.Modules.Modules.Models.Constants">
            <summary>
            A class with constants for modules.
            </summary>
        </member>
        <member name="T:Api.Modules.Modules.Models.GridViewSettingsModel">
            <summary>
            A model for settings for a Wiser grid view module.
            </summary>
        </member>
        <member name="P:Api.Modules.Modules.Models.GridViewSettingsModel.GridViewMode">
            <summary>
            Gets or sets whether this module has grid view mode enabled.
            </summary>
        </member>
        <member name="P:Api.Modules.Modules.Models.GridViewSettingsModel.FieldMappings">
            <summary>
            Gets or sets the field mappings, to use for filters.
            </summary>
        </member>
        <member name="P:Api.Modules.Modules.Models.GridViewSettingsModel.GridViewSettings">
            <summary>
            Gets or sets the grid view settings.
            </summary>
        </member>
        <member name="T:Api.Modules.Modules.Models.ModuleAccessRightsModel">
            <summary>
            A model for storing what the authenticated user can do with a module.
            </summary>
        </member>
        <member name="P:Api.Modules.Modules.Models.ModuleAccessRightsModel.ModuleId">
            <summary>
            Gets or sets the ID of the module.
            </summary>
        </member>
        <member name="P:Api.Modules.Modules.Models.ModuleAccessRightsModel.Name">
            <summary>
            Gets or sets the name of the module.
            </summary>
        </member>
        <member name="P:Api.Modules.Modules.Models.ModuleAccessRightsModel.Icon">
            <summary>
            Gets or sets the icon of the module.
            </summary>
        </member>
        <member name="P:Api.Modules.Modules.Models.ModuleAccessRightsModel.Color">
            <summary>
            Gets or sets the main color of the module.
            </summary>
        </member>
        <member name="P:Api.Modules.Modules.Models.ModuleAccessRightsModel.Type">
            <summary>
            Gets or sets the type of module.
            Most modules are of the type "DynamicItems", which is also the default value.
            Other modules could be "Admin" or "Scheduler" for example, which means they are very different than the standard dynamic modules.
            </summary>
        </member>
        <member name="P:Api.Modules.Modules.Models.ModuleAccessRightsModel.CanRead">
            <summary>
            Gets or sets whether the user is allowed to read items in the module.
            </summary>
        </member>
        <member name="P:Api.Modules.Modules.Models.ModuleAccessRightsModel.CanWrite">
            <summary>
            Gets or sets whether the user is allowed to change existing items in the module.
            </summary>
        </member>
        <member name="P:Api.Modules.Modules.Models.ModuleAccessRightsModel.CanCreate">
            <summary>
            Gets or sets whether the user is allowed to create new items in the module.
            </summary>
        </member>
        <member name="P:Api.Modules.Modules.Models.ModuleAccessRightsModel.CanDelete">
            <summary>
            Gets or sets whether the user is allowed to delete items in the module.
            </summary>
        </member>
        <member name="P:Api.Modules.Modules.Models.ModuleAccessRightsModel.Group">
            <summary>
            Gets or sets the group name of the module.
            </summary>
        </member>
        <member name="P:Api.Modules.Modules.Models.ModuleAccessRightsModel.Pinned">
            <summary>
            Gets or sets if the module is pinned by the user.
            </summary>
        </member>
        <member name="P:Api.Modules.Modules.Models.ModuleAccessRightsModel.AutoLoad">
            <summary>
            Gets or sets whether the module should be automatically opened when the user logs in.
            </summary>
        </member>
        <member name="P:Api.Modules.Modules.Models.ModuleAccessRightsModel.PinnedGroup">
            <summary>
            Gets or sets the group name of the module for when the module is pinned by the user.
            </summary>
        </member>
        <member name="P:Api.Modules.Modules.Models.ModuleAccessRightsModel.OnlyOneInstanceAllowed">
            <summary>
            Gets or sets whether the user can only open one instance of this module. If they already have this module opened and they try to open it again, then the previously opened instance will be shown to the user.
            If this is set to <see langword="false"/>, then the user can open as many instances of this module as they want.
            </summary>
        </member>
        <member name="P:Api.Modules.Modules.Models.ModuleAccessRightsModel.IframeUrl">
            <summary>
            Gets or sets the iframe URL. Only applicable for modules of type "Iframe".
            </summary>
        </member>
        <member name="P:Api.Modules.Modules.Models.ModuleAccessRightsModel.HasCustomQuery">
            <summary>
            Gets or sets if the module has a custom query, this is used to determine if the module can be exported.
            </summary>
        </member>
        <member name="T:Api.Modules.Modules.Models.ModuleSettingsModel">
            <summary>
            A model for information about a Wiser module.
            </summary>
        </member>
        <member name="P:Api.Modules.Modules.Models.ModuleSettingsModel.Id">
            <summary>
            Gets or sets the ID.
            </summary>
        </member>
        <member name="P:Api.Modules.Modules.Models.ModuleSettingsModel.Name">
            <summary>
            Gets or sets the name of the module.
            </summary>
        </member>
        <member name="P:Api.Modules.Modules.Models.ModuleSettingsModel.CustomQuery">
            <summary>
            Gets or sets the custom query of the module.
            </summary>
        </member>
        <member name="P:Api.Modules.Modules.Models.ModuleSettingsModel.CountQuery">
            <summary>
            Gets or sets the count query of the module.
            </summary>
        </member>
        <member name="P:Api.Modules.Modules.Models.ModuleSettingsModel.Options">
            <summary>
            Gets or sets the options / settings.
            </summary>
        </member>
        <member name="P:Api.Modules.Modules.Models.ModuleSettingsModel.Icon">
            <summary>
            Gets or sets the icon of the module.
            </summary>
        </member>
        <member name="P:Api.Modules.Modules.Models.ModuleSettingsModel.Group">
            <summary>
            Gets or sets the group name of the module.
            </summary>
        </member>
        <member name="P:Api.Modules.Modules.Models.ModuleSettingsModel.Type">
            <summary>
            Gets or sets the type of module.
            Most modules are of the type "DynamicItems", which is also the default value.
            Other modules could be "Admin" or "Scheduler" for example, which means they are very different than the standard dynamic modules.
            </summary>
        </member>
        <member name="P:Api.Modules.Modules.Models.ModuleSettingsModel.CanRead">
            <summary>
            Gets or sets whether the user is allowed to read items in this module.
            </summary>
        </member>
        <member name="P:Api.Modules.Modules.Models.ModuleSettingsModel.CanWrite">
            <summary>
            Gets or sets whether the user is allowed to change existing items in this module.
            </summary>
        </member>
        <member name="P:Api.Modules.Modules.Models.ModuleSettingsModel.CanCreate">
            <summary>
            Gets or sets whether the user is allowed to create new items in this module.
            </summary>
        </member>
        <member name="P:Api.Modules.Modules.Models.ModuleSettingsModel.CanDelete">
            <summary>
            Gets or sets whether the user is allowed to delete items in this module.
            </summary>
        </member>
        <member name="P:Api.Modules.Modules.Models.ModuleSettingsModel.Description">
            <summary>
            Gets the description of the module.
            </summary>
        </member>
        <member name="T:Api.Modules.Modules.Services.ModulesService">
            <summary>
            Service for getting information / settings for Wiser modules.
            </summary>
        </member>
        <member name="M:Api.Modules.Modules.Services.ModulesService.#ctor(Api.Modules.Customers.Interfaces.IWiserCustomersService,Api.Modules.Grids.Interfaces.IGridsService,GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection,GeeksCoreLibrary.Core.Interfaces.IWiserItemsService,Api.Core.Interfaces.IJsonService,GeeksCoreLibrary.Modules.Exports.Interfaces.IExcelService,GeeksCoreLibrary.Modules.Objects.Interfaces.IObjectsService,Api.Modules.Customers.Interfaces.IUsersService,GeeksCoreLibrary.Modules.GclReplacements.Interfaces.IStringReplacementsService,Microsoft.Extensions.Logging.ILogger{Api.Modules.Modules.Services.ModulesService},GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseHelpersService)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.Modules.Services.ModulesService"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.Modules.Services.ModulesService.GetAsync(System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Modules.Services.ModulesService.GetSettingsAsync(System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Modules.Services.ModulesService.GetSettingsAsync(System.Int32,System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Modules.Services.ModulesService.CreateAsync(System.String,System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Modules.Services.ModulesService.ExportAsync(System.Int32,System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Modules.Services.ModulesService.GetModuleGroupsAsync(System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Modules.Services.ModulesService.DeleteAsync(System.Security.Claims.ClaimsIdentity,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Modules.Services.ModulesService.UpdateSettingsAsync(System.Int32,System.Security.Claims.ClaimsIdentity,Api.Modules.Modules.Models.ModuleSettingsModel)">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.Pdfs.Controllers.PdfsController">
            <summary>
            Controller for PDF functions, such as converting HTML to PDF.
            </summary>
        </member>
        <member name="M:Api.Modules.Pdfs.Controllers.PdfsController.#ctor(Api.Modules.Pdfs.Interfaces.IPdfService)">
            <summary>
            Creates a new instance of PdfsController.
            </summary>
        </member>
        <member name="M:Api.Modules.Pdfs.Controllers.PdfsController.ConvertHtmlToPdfAsync(GeeksCoreLibrary.Modules.GclConverters.Models.HtmlToPdfRequestModel)">
            <summary>
            Convert HTML to a PDF.
            </summary>
            <param name="data">The HTML and PDF settings.</param>
            <returns>The generated PDF.</returns>
        </member>
        <member name="M:Api.Modules.Pdfs.Controllers.PdfsController.SaveHtmlAsPdfAsync(GeeksCoreLibrary.Modules.GclConverters.Models.HtmlToPdfRequestModel)">
            <summary>
            Convert HTML to a PDF and then saved is to the disc on the server. It will return the location of the new file on disc.
            </summary>
            <param name="data">The HTML and PDF settings.</param>
            <returns>The location of the HTML file on the server.</returns>
        </member>
        <member name="T:Api.Modules.Pdfs.Interfaces.IPdfService">
            <summary>
            Service for PDF functions, such as converting HTML to PDF.
            </summary>
        </member>
        <member name="M:Api.Modules.Pdfs.Interfaces.IPdfService.ConvertHtmlToPdfAsync(System.Security.Claims.ClaimsIdentity,GeeksCoreLibrary.Modules.GclConverters.Models.HtmlToPdfRequestModel)">
            <summary>
            Convert HTML to a PDF.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="data">The HTML and PDF settings.</param>
            <returns>A byte array of the generated PDF.</returns>
        </member>
        <member name="M:Api.Modules.Pdfs.Interfaces.IPdfService.SaveHtmlAsPdfAsync(System.Security.Claims.ClaimsIdentity,GeeksCoreLibrary.Modules.GclConverters.Models.HtmlToPdfRequestModel)">
            <summary>
            Convert HTML to a PDF and then saved is to the disc on the server. It will return the location of the new file on disc.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="data">The HTML and PDF settings.</param>
            <returns>A byte array of the generated PDF.</returns>
        </member>
        <member name="T:Api.Modules.Pdfs.Services.PdfsService">
            <inheritdoc cref="T:Api.Modules.Pdfs.Interfaces.IPdfService" />
        </member>
        <member name="M:Api.Modules.Pdfs.Services.PdfsService.#ctor(GeeksCoreLibrary.Modules.GclConverters.Interfaces.IHtmlToPdfConverterService,GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection,Api.Modules.Customers.Interfaces.IWiserCustomersService,Api.Modules.Files.Interfaces.IFilesService,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.Pdfs.Services.PdfsService"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.Pdfs.Services.PdfsService.ConvertHtmlToPdfAsync(System.Security.Claims.ClaimsIdentity,GeeksCoreLibrary.Modules.GclConverters.Models.HtmlToPdfRequestModel)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Pdfs.Services.PdfsService.SaveHtmlAsPdfAsync(System.Security.Claims.ClaimsIdentity,GeeksCoreLibrary.Modules.GclConverters.Models.HtmlToPdfRequestModel)">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.Pusher.Controllers.PusherController">
            <summary>
            Controller for doing things with Pusher.
            </summary>
        </member>
        <member name="M:Api.Modules.Pusher.Controllers.PusherController.#ctor(Api.Modules.Pusher.Interfaces.IPusherService)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.Pusher.Controllers.PusherController"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.Pusher.Controllers.PusherController.GetPusherEventId">
            <summary>
            Get a generated pusher event ID for the user.
            </summary>
            <returns>The event ID for pusher.</returns>
        </member>
        <member name="M:Api.Modules.Pusher.Controllers.PusherController.SendMessageToUserAsync(Api.Modules.Pusher.Models.PusherMessageRequestModel)">
            <summary>
            Send a message to an user.
            </summary>
            <param name="data">The <see cref="T:Api.Modules.Pusher.Models.PusherMessageRequestModel"/> containing the information for the message to be send.</param>
            <returns></returns>
        </member>
        <member name="T:Api.Modules.Pusher.Interfaces.IPusherService">
            <summary>
            Service for handling messages between users within Wiser.
            </summary>
        </member>
        <member name="M:Api.Modules.Pusher.Interfaces.IPusherService.GeneratePusherIdForUser(System.UInt64,System.String)">
            <summary>
            Get a generated pushed ID for the user.
            </summary>
            <param name="userId">The ID of the user.</param>
            <param name="subDomain">The sub domain of Wiser.</param>
            <returns>The event ID for pusher.</returns>
        </member>
        <member name="M:Api.Modules.Pusher.Interfaces.IPusherService.SendMessageToUserAsync(System.String,Api.Modules.Pusher.Models.PusherMessageRequestModel)">
            <summary>
            Send a message to an user.
            </summary>
            <param name="subDomain">The sub domain of Wiser.</param>
            <param name="data">The <see cref="T:Api.Modules.Pusher.Models.PusherMessageRequestModel"/> containing the information for the message to be send.</param>
            <returns></returns>
        </member>
        <member name="T:Api.Modules.Pusher.Models.PusherMessageRequestModel">
            <summary>
            A model for a Wiser pusher message request.
            </summary>
        </member>
        <member name="P:Api.Modules.Pusher.Models.PusherMessageRequestModel.Channel">
            <summary>
            Gets or sets the channel to send the message on.
            </summary>
        </member>
        <member name="P:Api.Modules.Pusher.Models.PusherMessageRequestModel.EventName">
            <summary>
            Gets or sets the name of the event that Pusher will trigger.
            </summary>
        </member>
        <member name="P:Api.Modules.Pusher.Models.PusherMessageRequestModel.EventData">
            <summary>
            Gets or sets the event data of the message.
            </summary>
        </member>
        <member name="P:Api.Modules.Pusher.Models.PusherMessageRequestModel.Cluster">
            <summary>
            Gets or sets the cluster to send the message in.
            </summary>
        </member>
        <member name="P:Api.Modules.Pusher.Models.PusherMessageRequestModel.UserId">
            <summary>
            Gets or sets the ID of the user to send the message to.
            </summary>
        </member>
        <member name="P:Api.Modules.Pusher.Models.PusherMessageRequestModel.IsGlobalMessage">
            <summary>
            Whether the message is not meant for a specific user, but for all connected users.
            </summary>
        </member>
        <member name="T:Api.Modules.Pusher.Services.PusherService">
            <summary>
            Service for handling messages between users within Wiser.
            </summary>
        </member>
        <member name="M:Api.Modules.Pusher.Services.PusherService.#ctor(Microsoft.Extensions.Options.IOptions{Api.Core.Models.ApiSettings})">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.Pusher.Services.PusherService"/>.
            </summary>
            <param name="apiSettings"></param>
        </member>
        <member name="M:Api.Modules.Pusher.Services.PusherService.GeneratePusherIdForUser(System.UInt64,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Pusher.Services.PusherService.SendMessageToUserAsync(System.String,Api.Modules.Pusher.Models.PusherMessageRequestModel)">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.Queries.Controllers.QueriesController">
            <summary>
            Controller for all CRUD functions for wiser query.
            </summary>
        </member>
        <member name="M:Api.Modules.Queries.Controllers.QueriesController.#ctor(Api.Modules.Queries.Interfaces.IQueriesService)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.Queries.Controllers.QueriesController"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.Queries.Controllers.QueriesController.GetForExportModuleAsync">
            <summary>
            Gets the queries that can be used for an export in the export module.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Queries.Controllers.QueriesController.GetForCommunicationModuleAsync">
            <summary>
            Gets the queries that can be used for setting up automatic communications via the communication module.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Queries.Controllers.QueriesController.GetForAdminModuleAsync">
            <summary>
            Get all wiser queries.
            </summary>
            <returns>List of queries from wiser_query table</returns>
        </member>
        <member name="M:Api.Modules.Queries.Controllers.QueriesController.GetForAdminModuleAsync(System.Int32)">
            <summary>
            Gets query data by ID.
            </summary>
            <returns>Query data from wiser_query</returns>
        </member>
        <member name="M:Api.Modules.Queries.Controllers.QueriesController.Create(System.String)">
            <summary>
            Creates new wiser query.
            </summary>
            <param name="description">The description of the new query.</param>
            <returns>The created query data</returns>
        </member>
        <member name="M:Api.Modules.Queries.Controllers.QueriesController.Update(Api.Modules.Queries.Models.QueryModel)">
            <summary>
            Updates existing wiser query by ID.
            </summary>
            <param name="queryModel">The new query data to save.</param>
        </member>
        <member name="M:Api.Modules.Queries.Controllers.QueriesController.Delete(System.Int32)">
            <summary>
            Deletes wiser query by ID.
            </summary>
            <param name="id">The ID from wiser_query.</param>
        </member>
        <member name="M:Api.Modules.Queries.Controllers.QueriesController.GetQueryResultsAsJson(System.Int32,System.Boolean,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Execute a wiser_query by ID and return the results as JSON.
            </summary>
            <param name="id">The ID from wiser_query.</param>
            <param name="asKeyValuePair">If set to true the result of the query will be converted to a single object. Only columns with the names "key" and "value" are used.</param>
            <param name="parameters">The parameters to set before executing the query.</param>
            <returns>The results of the query as JSON.</returns>
        </member>
        <member name="T:Api.Modules.Queries.Interfaces.IQueriesService">
            <summary>
            Service for getting queries for the Wiser modules.
            </summary>
        </member>
        <member name="M:Api.Modules.Queries.Interfaces.IQueriesService.GetForExportModuleAsync(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Gets the queries that can be used for an export in the export module.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Queries.Interfaces.IQueriesService.GetForCommunicationModuleAsync(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Gets the queries that can be used for setting up automatic communications via the communication module.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Queries.Interfaces.IQueriesService.GetAsync(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Gets the queries that can be used in the admin module.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Queries.Interfaces.IQueriesService.GetAsync(System.Security.Claims.ClaimsIdentity,System.Int32)">
            <summary>
            Gets the queries that can be used in the admin module.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="id">The ID from wiser_query.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Queries.Interfaces.IQueriesService.CreateAsync(System.Security.Claims.ClaimsIdentity,System.String)">
            <summary>
            Create query that can be used in the admin module.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="description">The description of the new query.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Queries.Interfaces.IQueriesService.UpdateAsync(System.Security.Claims.ClaimsIdentity,Api.Modules.Queries.Models.QueryModel)">
            <summary>
            Update query that can be used in the admin module.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="queryModel">TThe query settings to save.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Queries.Interfaces.IQueriesService.DeleteAsync(System.Security.Claims.ClaimsIdentity,System.Int32)">
            <summary>
            Update query that can be used in the admin module.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="id">The ID from wiser_query.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Queries.Interfaces.IQueriesService.GetQueryResultAsJsonAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.Boolean,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Execute a query and return the results in JSON format.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="id">The ID from wiser_query.</param>
            <param name="asKeyValuePair">If set to true the result of the query will be converted to a single object. Only columns with the names "key" and "value" are used.</param>
            <param name="parameters">The parameters to set before executing the query.</param>
            <returns></returns>
        </member>
        <member name="T:Api.Modules.Queries.Models.QueryModel">
            <summary>
            A model for a query within Wiser.
            </summary>
        </member>
        <member name="P:Api.Modules.Queries.Models.QueryModel.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:Api.Modules.Queries.Models.QueryModel.EncryptedId">
            <summary>
            Gets or sets the encrypted id.
            </summary>
        </member>
        <member name="P:Api.Modules.Queries.Models.QueryModel.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:Api.Modules.Queries.Models.QueryModel.Query">
            <summary>
            Gets or sets the query.
            </summary>
        </member>
        <member name="P:Api.Modules.Queries.Models.QueryModel.ShowInExportModule">
            <summary>
            Gets or sets if the query is shown in the export module.
            </summary>
        </member>
        <member name="P:Api.Modules.Queries.Models.QueryModel.ShowInCommunicationModule">
            <summary>
            Gets or sets whether the query should be shown in the communication module.
            </summary>
        </member>
        <member name="P:Api.Modules.Queries.Models.QueryModel.RolesWithPermissions">
            <summary>
            Gets or sets the roles that have permissions on the query.
            </summary>
        </member>
        <member name="P:Api.Modules.Queries.Models.QueryModel.ChangedOn">
            <summary>
            Gets or sets when the query was last changed on.
            </summary>
        </member>
        <member name="T:Api.Modules.Queries.Services.QueriesService">
            <summary>
            Service for getting queries for the Wiser modules.
            </summary>
        </member>
        <member name="M:Api.Modules.Queries.Services.QueriesService.#ctor(Api.Modules.Customers.Interfaces.IWiserCustomersService,GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection,GeeksCoreLibrary.Core.Interfaces.IWiserItemsService)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.Queries.Services.QueriesService"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.Queries.Services.QueriesService.GetForExportModuleAsync(System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Queries.Services.QueriesService.GetForCommunicationModuleAsync(System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Queries.Services.QueriesService.GetAsync(System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Queries.Services.QueriesService.GetAsync(System.Security.Claims.ClaimsIdentity,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Queries.Services.QueriesService.CreateAsync(System.Security.Claims.ClaimsIdentity,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Queries.Services.QueriesService.UpdateAsync(System.Security.Claims.ClaimsIdentity,Api.Modules.Queries.Models.QueryModel)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Queries.Services.QueriesService.DeleteAsync(System.Security.Claims.ClaimsIdentity,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Queries.Services.QueriesService.GetQueryResultAsJsonAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.Boolean,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Queries.Services.QueriesService.GetQueriesForModuleAsync(System.Security.Claims.ClaimsIdentity,System.String)">
            <summary>
            Get queries for a specific module.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="showInModuleColumnName">The column name to check whether a query should be shown in a module. Example: "show_in_export_module".</param>
            <returns>The queries for the requested module.</returns>
        </member>
        <member name="T:Api.Modules.TaskAlerts.Controllers.TaskAlertsController">
            <summary>
            Controller for getting task alerts.
            </summary>
        </member>
        <member name="M:Api.Modules.TaskAlerts.Controllers.TaskAlertsController.#ctor(Api.Modules.TaskAlerts.Interfaces.ITaskAlertsService)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.TaskAlerts.Controllers.TaskAlertsController"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.TaskAlerts.Controllers.TaskAlertsController.GetForExportModuleAsync">
            <summary>
            Gets all task alerts for the user.
            </summary>
        </member>
        <member name="T:Api.Modules.TaskAlerts.Interfaces.ITaskAlertsService">
            <summary>
            Service for getting task alerts.
            </summary>
        </member>
        <member name="M:Api.Modules.TaskAlerts.Interfaces.ITaskAlertsService.GetAsync(System.Security.Claims.ClaimsIdentity,System.Boolean,System.String)">
            <summary>
            Gets all task alerts for the user.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="getAllUsers">Whether the task alerts for all users should be retrieved instead of the only the current user.</param>
            <param name="branchDatabaseName">The name of a branch database to use. Set to null or empty to use current branch.</param>
        </member>
        <member name="T:Api.Modules.TaskAlerts.Models.TaskAlertModel">
            <summary>
            The model of a Wiser task alert.
            </summary>
        </member>
        <member name="P:Api.Modules.TaskAlerts.Models.TaskAlertModel.Id">
            <summary>
            Gets or sets the ID.
            </summary>
        </member>
        <member name="P:Api.Modules.TaskAlerts.Models.TaskAlertModel.EncryptedId">
            <summary>
            Gets or sets the encrypted id.
            </summary>
        </member>
        <member name="P:Api.Modules.TaskAlerts.Models.TaskAlertModel.Content">
            <summary>
            Gets or sets the content of the task alert.
            </summary>
        </member>
        <member name="P:Api.Modules.TaskAlerts.Models.TaskAlertModel.CreatedOn">
            <summary>
            Gets or sets the date and time the task alert has been created on.
            </summary>
        </member>
        <member name="P:Api.Modules.TaskAlerts.Models.TaskAlertModel.CheckedOn">
            <summary>
            Gets or sets the date and time the task alert was seen.
            </summary>
        </member>
        <member name="P:Api.Modules.TaskAlerts.Models.TaskAlertModel.ModuleId">
            <summary>
            Gets or sets the ID of the module that this task alert belongs to.
            </summary>
        </member>
        <member name="P:Api.Modules.TaskAlerts.Models.TaskAlertModel.PlacedBy">
            <summary>
            Gets or sets the name of the user that placed the task alert.
            </summary>
        </member>
        <member name="P:Api.Modules.TaskAlerts.Models.TaskAlertModel.PlacedById">
            <summary>
            Gets or sets the ID of the user that placed the task alert.
            </summary>
        </member>
        <member name="P:Api.Modules.TaskAlerts.Models.TaskAlertModel.Status">
            <summary>
            Gets or sets the state of th task alert.
            </summary>
        </member>
        <member name="P:Api.Modules.TaskAlerts.Models.TaskAlertModel.UserId">
            <summary>
            Gets or sets the ID of the current user.
            </summary>
        </member>
        <member name="P:Api.Modules.TaskAlerts.Models.TaskAlertModel.UserName">
            <summary>
            Gets or sets the name of the user. Note that this is not the username used for logging in, but the name of the user.
            </summary>
        </member>
        <member name="P:Api.Modules.TaskAlerts.Models.TaskAlertModel.LinkedItemEntityType">
            <summary>
            Gets or sets the linked item entity type.
            </summary>
        </member>
        <member name="P:Api.Modules.TaskAlerts.Models.TaskAlertModel.LinkedItemId">
            <summary>
            Gets or sets the ID of the linked item.
            </summary>
        </member>
        <member name="P:Api.Modules.TaskAlerts.Models.TaskAlertModel.LinkedItemModuleId">
            <summary>
            Gets or sets the ID of the module that the linked item belongs to.
            </summary>
        </member>
        <member name="T:Api.Modules.TaskAlerts.Services.TaskAlertsService">
            <summary>
            Service for getting task alerts.
            </summary>
        </member>
        <member name="M:Api.Modules.TaskAlerts.Services.TaskAlertsService.#ctor(Api.Modules.Customers.Interfaces.IWiserCustomersService,GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.TaskAlerts.Services.TaskAlertsService"/>.
            </summary>
            <param name="wiserCustomersService"></param>
            <param name="clientDatabaseConnection"></param>
        </member>
        <member name="M:Api.Modules.TaskAlerts.Services.TaskAlertsService.GetAsync(System.Security.Claims.ClaimsIdentity,System.Boolean,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.Templates.Controllers.DynamicContentController">
            <summary>
            Controller for getting or doing things with templates from the templates module in Wiser.
            </summary>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.DynamicContentController.#ctor(Api.Modules.Templates.Interfaces.IDynamicContentService,Api.Modules.Templates.Interfaces.IHistoryService,Api.Modules.Templates.Interfaces.ITemplatesService)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.Templates.Controllers.DynamicContentController"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.DynamicContentController.GetAsync(System.Int32,System.Boolean)">
            <summary>
            Gets the meta data (name, component mode etc) for a component.
            </summary>
            <param name="id">The ID of the dynamic component.</param>
            <param name="includeSettings">Optional: Whether or not to include the settings that are saved with the component. Default value is <see langword="true" />.</param>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.DynamicContentController.GetComponentModes(System.String)">
            <summary>
            Retrieve all component modes of a dynamic component.
            </summary>
            <param name="name">The name of the dynamic component.</param>
            <returns>A list containing the id and name for each component mode.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.DynamicContentController.GetHistoryOfComponentAsync(System.Int32)">
            <summary>
            Get the history of the current component.
            </summary>
            <param name="contentId">The component of the history.</param>
            <returns>History PartialView containing the retrieved history of the component</returns>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.DynamicContentController.SaveSettingsAsync(System.Int32,Api.Modules.Templates.Models.DynamicContent.DynamicContentOverviewModel)">
            <summary>
             POST endpoint for saving the settings of a component.
            </summary>
            <param name="id">The id of the content to save</param>
            <param name="data">The data to save</param>
            <returns>The ID of the saved component.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.DynamicContentController.RevertChangesAsync(System.Int32,System.Collections.Generic.List{Api.Modules.Templates.Models.History.RevertHistoryModel})">
            <summary>
            Undo changes that have been made.
            </summary>
            <param name="contentId">The ID of the component.</param>
            <param name="changes">A json string of changes that can be converted to a List of RevertHistoryModels</param>
            <returns>The ID of the component that was reverted.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.DynamicContentController.AddLinkToTemplateAsync(System.Int32,System.Int32)">
            <summary>
            Links a dynamic content to a template.
            </summary>
            <param name="contentId">The ID of the dynamic content.</param>
            <param name="templateId">The ID of the template.</param>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.DynamicContentController.GenerateHtmlForComponentAsync(System.Int32,Api.Modules.Templates.Models.Template.GenerateTemplatePreviewRequestModel)">
            <summary>
            Generates a preview for a dynamic component.
            </summary>
            <param name="componentId">The ID of the component.</param>
            <param name="requestModel">The template settings, they don't have to be saved yet.</param>
            <returns>The HTML of the component as it would look on the website.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.DynamicContentController.PublishToEnvironmentAsync(System.Int32,GeeksCoreLibrary.Core.Enums.Environments,System.Int32)">
            <summary>
            Publish a dynamic component to a new environment. If moved forward the lower environments will also be moved.
            </summary>
            <param name="contentId">The id of the dynamic component to publish.</param>
            <param name="version">The version of the dynamic component to publish.</param>
            <param name="environment">The environment to push the dynamic component version to. This will be converted to a PublishedEnvironmentEnum.</param>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.DynamicContentController.DuplicateAsync(System.Int32,System.Int32)">
            <summary>
            Duplicate a dynamic component (only the latest version).
            </summary>
            <param name="id">The id of the component.</param>
            <param name="templateId">The id of the template to link the new component to.</param>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.DynamicContentController.DeleteAsync(System.Int32)">
            <summary>
            Deletes a dynamic content component
            </summary>
            <param name="contentId">The id of the dynamic content</param>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.DynamicContentController.GetLinkableDynamicContentAsync(System.Int32)">
            <summary>
            Gets all dynamic content that can be linked to the given template.
            </summary>
            <param name="templateId">The ID of the template.</param>
            <returns>A list of dynamic components from other templates.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.DynamicContentController.DeployToBranchAsync(System.Int32,System.Int32)">
            <summary>
            Deploy one or more dynamic contents to a branch.
            </summary>
            <param name="contentId">The ID of the dynamic component to deploy.</param>
            <param name="branchId">The ID of the branch to deploy the template to.</param>
        </member>
        <member name="T:Api.Modules.Templates.Controllers.TemplatesController">
            <summary>
            Controller for getting or doing things with templates from the templates module in Wiser.
            </summary>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.TemplatesController.#ctor(Api.Modules.Templates.Interfaces.ITemplatesService,Microsoft.Extensions.Options.IOptions{GeeksCoreLibrary.Core.Models.GclSettings},Api.Modules.Templates.Interfaces.IPreviewService,Api.Modules.Templates.Interfaces.IHistoryService)">
            <summary>
            Creates a new instance of TemplatesController.
            </summary>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.TemplatesController.GetCssForHtmlEditorsAsync(Api.Modules.Customers.Models.CustomerInformationModel)">
            <summary>
            Gets the CSS that should be used for HTML editors, so that their content will look more like how it would look on the customer's website.
            </summary>
            <returns>A string that contains the CSS that should be loaded in the HTML editor.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.TemplatesController.GetAndExecuteQueryAsync(System.String)">
            <summary>
            Gets a query from the wiser database and executes it in the customer database.
            </summary>
            <param name="templateName">The encrypted name of the wiser template.</param>f
        </member>
        <member name="M:Api.Modules.Templates.Controllers.TemplatesController.TreeViewAsync(System.Int32)">
            <summary>
            Retrieve the tree view section underlying the parentId. Transforms the tree view section into a list of TemplateTreeViewModels.
            </summary>
            <param name="parentId">The id of the template whose child nodes are to be retrieved.</param>
            <returns>A List of TemplateTreeViewModels containing the id, names and types of the templates included in the requested section.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.TemplatesController.GetHistoryAsync(System.Int32)">
            <summary>
            Retrieve the history of the template. This will include changes made to dynamic content between the releases of templates and the publishes to different environments from this template. This data is collected and combined in a TemnplateHistoryOverviewModel
            </summary>
            <param name="templateId">The id of the template to retrieve the history from.</param>
            <returns>A TemplateHistoryOverviewModel containing a list of templatehistorymodels and a list of publishlogmodels. The model contains base info and a list of changes made within the version and its sub components (e.g. dynamic content, publishes).</returns>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.TemplatesController.PreviewTabAsync(System.Int32)">
            <summary>
            Retrieve al the preview profiles for an item.
            </summary>
            <param name="templateId">the id of the item to retrieve the preview items of.</param>
            <returns>A list of PreviewProfileModel containing the profiles that are available for the given template</returns>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.TemplatesController.GetMetaDataAsync(System.Int32)">
            <summary>
            Get the meta data (name, changedOn, changedBy etc) from a template.
            </summary>
            <param name="templateId">The id of the template to retrieve the data from.</param>
            <returns>A <see cref="T:Api.Modules.Templates.Models.Template.TemplateSettingsModel"/> containing the current template data of the template with the given id.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.TemplatesController.GetSettingsAsync(System.Int32)">
            <summary>
            Retrieve the latest version of the template. 
            </summary>
            <param name="templateId">The id of the template to retrieve.</param>
            <returns>A template model containing the data of the templateversion.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.TemplatesController.GetPublishedEnvironmentsAsync(System.Int32)">
            <summary>
            Retrieve the published environments of a template, this includes a list of all version options.
            </summary>
            <param name="templateId">The id of the template from which to retrieve the published environments.</param>
            <returns>A published environment model including the versions numbers of the Live, accept and test environment and a list of all possible versions.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.TemplatesController.GetLinkedTemplatesAsync(System.Int32)">
            <summary>
            Retrieve the templates that are linked to the given templates.
            </summary>
            <param name="templateId">The id of the template of which to get the linked templates.</param>
            <returns>A Linked Templates model containing lists of linked templates separated into lists of certain types (e.g. scss, javascript).</returns>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.TemplatesController.GetLinkedDynamicContentAsync(System.Int32)">
            <summary>
            Retrieve the dynamic content that is linked to the given template.
            </summary>
            <param name="templateId">The id of the template of which the linked dynamic content should be retrieved.</param>
            <returns>List of dynamic content overview models. This is a condensed version of dynamic content data for creating a overview of linked content.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.TemplatesController.PublishToEnvironmentAsync(System.Int32,GeeksCoreLibrary.Core.Enums.Environments,System.Int32)">
            <summary>
            Publish a template to a new environment. If moved forward the lower environments will also be moved.
            </summary>
            <param name="templateId">The id of the template to publish.</param>
            <param name="version">The version of the template to publish.</param>
            <param name="environment">The environment to push the template version to. This will be converted to a PublishedEnvironmentEnum.</param>
            <returns>The number of affected rows.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.TemplatesController.CreateAsync(System.Int32,Api.Modules.Templates.Models.Template.NewTemplateModel)">
            <summary>
            Creates an empty template with the given name, type and parent template.
            </summary>
            <param name="parentId">The id of the parent template of the template that will be created.</param>
            <param name="newTemplate">Model class with the needed info to make the template</param>
            <returns>The id of the newly created template. This can be used to update the interface accordingly.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.TemplatesController.SaveAsync(System.Int32,Api.Modules.Templates.Models.Template.TemplateSettingsModel,System.Boolean)">
            <summary>
            Save the template as a new version and save the linked templates if necessary. This method will calculate if links are to be added or removed from the current situation.
            </summary>
            <param name="templateId">The ID of the template to update.</param>
            <param name="templateData">A <see cref="T:Api.Modules.Templates.Models.Template.TemplateSettingsModel"/> containing the data of the template that is to be saved as a new version</param>
            <param name="skipCompilation">Optional: Whether or not to skip the compilations of SCSS templates. Default value is false.</param>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.TemplatesController.RenameAsync(System.Int32,System.String)">
            <summary>
            Renames a template. This will create a new version of the template with the name, so that we can always see in the history that the name has been changed.
            </summary>
            <param name="templateId">The ID of the template to rename.</param>
            <param name="newName">The new name.</param>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.TemplatesController.DeleteAsync(System.Int32,System.Boolean)">
            <summary>
            Deletes a template. This will not actually delete it from the database, but add a new version with removed = 1 instead.
            </summary>
            <param name="templateId">The ID of the template to delete.</param>
            <param name="alsoDeleteChildren">Optional: Whether or not to also delete all children of this template. Default value is <see langword="true"/>.</param>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.TemplatesController.SearchAsync(System.String)">
            <summary>
            Search for a template.
            </summary>
            <param name="searchValue">The value to search for.</param>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.TemplatesController.MoveAsync(System.Int32,System.Int32,Api.Modules.Kendo.Enums.TreeViewDropPositions)">
            <summary>
            Moves a template to a new position.
            </summary>
            <param name="sourceId">The ID of the template that is being moved.</param>
            <param name="destinationId">The ID of the template or directory where it's being moved to.</param>
            <param name="dropPosition">The drop position, can be either <see cref="F:Api.Modules.Kendo.Enums.TreeViewDropPositions.Over"/>, <see cref="F:Api.Modules.Kendo.Enums.TreeViewDropPositions.Before"/> or <see cref="F:Api.Modules.Kendo.Enums.TreeViewDropPositions.After"/>.</param>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.TemplatesController.GetPreviewProfilesAsync(System.Int32)">
            <summary>
            Retrieve al the preview profiles for an item.
            </summary>
            <param name="templateId">the id of the item to retrieve the preview items of.</param>
            <returns>A list of PreviewProfileModel containing the profiles that are available for the given template</returns>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.TemplatesController.CreatePreviewProfileAsync(System.Int32,Api.Modules.Templates.Models.Preview.PreviewProfileModel)">
            <summary>
            Creates a new instance of a preview profile with the given data.
            </summary>
            <param name="profile">A PreviewProfileModel containing the data of the profile to create</param>
            <param name="templateId"></param>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.TemplatesController.EditPreviewProfileAsync(System.Int32,System.Int32,Api.Modules.Templates.Models.Preview.PreviewProfileModel)">
            <summary>
            Edit an existing profile. The existing profile with the given Id in the profile will be overwritten.
            </summary>
            <param name="templateId">The id of the template that is bound to the profile</param>
            <param name="profileId">The ID of the profile to update.</param>
            <param name="profile">A Json that meets the standards of a PreviewProfileModel</param>
            <returns>An int confirming the affected rows of the query.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.TemplatesController.DeletePreviewProfilesAsync(System.Int32,System.Int32)">
            <summary>
            Delete a profile from the database. 
            </summary>
            <param name="templateId">The id of the template bound to the profile. This is added a an extra security for the deletion.</param>
            <param name="profileId">The id of the profile that is to be deleted</param>
            <returns>An int confirming the affected rows of the query.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.TemplatesController.GetEntireTreeViewStructureAsync(System.String,System.Nullable{GeeksCoreLibrary.Core.Enums.Environments})">
            <summary>
            Gets the tree view including template settings of all templates.
            </summary>
            <param name="startFrom">Set the place from which to start the tree view, folders separated by comma.</param>
            <param name="environment">The environment the template needs to be active on.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.TemplatesController.GeneratePreviewAsync(Api.Modules.Templates.Models.Template.GenerateTemplatePreviewRequestModel)">
            <summary>
            Generates a preview for a HTML template.
            </summary>
            <param name="requestModel">The template settings, they don't have to be saved yet.</param>
            <returns>The HTML of the template as it would look on the website.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.TemplatesController.CheckDefaultHeaderConflict(System.Int32,System.String)">
            <summary>
            Checks if there's already a template marked as a default header with the given regex.
            </summary>
            <param name="templateId">ID of the current template.</param>
            <param name="regexString">The regex string of the template.</param>
            <returns>A string with the name of the template that this template conflicts with, or an empty string if there's no conflict.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.TemplatesController.CheckDefaultFooterConflict(System.Int32,System.String)">
            <summary>
            Checks if there's already a template marked as a default footer with the given regex.
            </summary>
            <param name="templateId">ID of the current template.</param>
            <param name="regexString">The regex string of the template.</param>
            <returns>A string with the name of the template that this template conflicts with, or an empty string if there's no conflict.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.TemplatesController.GetVirtualItem(System.String,GeeksCoreLibrary.Modules.Templates.Enums.TemplateTypes)">
            <summary>
            Retrieve a virtual item, which is a view, routine, or trigger that isn't yet managed by Wiser.
            </summary>
            <param name="objectName">The name of the view, routine, or trigger.</param>
            <param name="templateType">The type that determines what kind of item should be retrieved (view, routine, or trigger).</param>
            <returns>A <see cref="T:Api.Modules.Templates.Models.Template.TemplateSettingsModel"/> with information about the virtual template.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.TemplatesController.GetTriggerTableNames">
            <summary>
            Retrieves a list of table names that can be used to populate the table name select element for a trigger template.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> containing strings.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.TemplatesController.DeployToBranchAsync(System.Int32,System.Int32)">
            <summary>
            Deploy one or more templates to a branch.
            </summary>
            <param name="templateId">The ID of the template to deploy.</param>
            <param name="branchId">The ID of the branch to deploy the template to.</param>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.TemplatesController.GetMeasurementSettingsAsync(System.Int32)">
            <summary>
            Get the settings for measurements of a template.
            </summary>
            <param name="templateId">The ID of the template to get the settings of.</param>
            <returns>The measurement settings of the template.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.TemplatesController.SaveMeasurementSettingsAsync(System.Int32,Api.Modules.Templates.Models.Measurements.MeasurementSettings)">
            <summary>
            Save the settings for measurements of this template.
            </summary>
            <param name="templateId">The ID of the template to save the settings for.</param>
            <param name="settings">The new settings.</param>
        </member>
        <member name="M:Api.Modules.Templates.Controllers.TemplatesController.GetRenderLogsAsync(System.Int32,System.Int32,System.String,System.Nullable{GeeksCoreLibrary.Core.Enums.Environments},System.UInt64,System.String,System.Int32,System.Int32,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Get rendering logs from database, filtered by the parameters.
            </summary>
            <param name="templateId">The ID of the template to get the render logs for.</param>
            <param name="version">The version of the template or component.</param>
            <param name="urlRegex">A regex for filtering logs on certain URLs/pages.</param>
            <param name="environment">The environment to get the logs for. Set to null to get the logs for all environments. Default value is null.</param>
            <param name="userId">The ID of the website user, if you want to get the logs for a specific user only.</param>
            <param name="languageCode">The language code that is used on the website, if you want to get the logs for a specific language only.</param>
            <param name="pageSize">The amount of logs to get. Set to 0 to get all of then. Default value is 500.</param>
            <param name="pageNumber">The page number. Default value is 1. Only applicable if pageSize is greater than zero.</param>
            <param name="getDailyAverage">Set this to true to get the average render time per day, instead of getting every single render log separately. Default is false.</param>
            <param name="start">Only get results from this start date and later.</param>
            <param name="end">Only get results from this end date and earlier.</param>
            <returns>A list of <see cref="T:Api.Modules.Templates.Models.Measurements.RenderLogModel"/> with the results.</returns>
        </member>
        <member name="T:Api.Modules.Templates.Enums.PreviewVariableTypeEnum">
            <summary>
            A Enum containing all possible preview variable types 
            </summary>
        </member>
        <member name="T:Api.Modules.Templates.Exceptions.InvalidComponentException">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Exceptions.InvalidComponentException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Exceptions.InvalidComponentException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Exceptions.InvalidComponentException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.Templates.Exceptions.NoRowsAffectedException">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Exceptions.NoRowsAffectedException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Exceptions.NoRowsAffectedException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Exceptions.NoRowsAffectedException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.Templates.Helpers.PreviewProfileHelper">
            <summary>
            Helper class for a PreviewProfile
            </summary>
        </member>
        <member name="M:Api.Modules.Templates.Helpers.PreviewProfileHelper.ConvertPreviewProfileDAOToModel(Api.Modules.Templates.Models.Preview.PreviewProfileDao)">
            <summary>
            Converts a PreviewProfileDAO to a PreviewProfileModel.
            </summary>
            <param name="previewDAO">A DAO containing the data of a preview profile</param>
            <returns>A preview profile model containing the data of the supplied dao</returns>
        </member>
        <member name="M:Api.Modules.Templates.Helpers.PreviewProfileHelper.ConvertPreviewProfileModelToDAO(Api.Modules.Templates.Models.Preview.PreviewProfileModel)">
            <summary>
            Converts a PreviewProfileModel to a PreviewProfileDAO
            </summary>
            <param name="previewModel">A PreviewProfileModel containing the display data of a preview profile.</param>
            <returns>A PreviewProfileDao containing the data of the supplied dao</returns>
        </member>
        <member name="T:Api.Modules.Templates.Helpers.PublishedEnvironmentHelper">
            <summary>
            A class with helper functions for published environment of templates.
            </summary>
        </member>
        <member name="M:Api.Modules.Templates.Helpers.PublishedEnvironmentHelper.CreatePublishedEnvironmentsFromVersionDictionary(System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            Creates a PublishedEnvironmentModel for a given item. To creates this a dictionary containing the versions and their respective publishvalue is used. This model will contain the current live, acceptence and test environment as well as a list of versions that are available.
            </summary>
            <param name="versionsAndPublished">A dictionary containing the available versions and their respective publishvalue</param>
            <returns>A PublishedEnvironmentModel that will contain the current live, acceptence and test environment as well as a list of versions that are available</returns>
        </member>
        <member name="M:Api.Modules.Templates.Helpers.PublishedEnvironmentHelper.CalculateEnvironmentsToPublish(Api.Modules.Templates.Models.Other.PublishedEnvironmentModel,System.Int32,GeeksCoreLibrary.Core.Enums.Environments)">
            <summary>
            This function generates a changelog containing the alterations that should be made towards the different versions and their publishenvironment value to achieve the publishing to the given environment. 
            This method will also calculate the publishing of underlaying environments if an environment is pushed forward. 
            After invoking this method the changelog can be used to update the values in the dataservice
            </summary>
            <param name="publishModel">A publishmodel containing the current situation of the item.</param>
            <param name="version">The version that is to be published to an environment.</param>
            <param name="environment">The string of the environment that needs to be published.</param>
            <returns>A changelog in the form of a Dictionary containing the versions and their respective value changes to achieve the publishing of the environment given in the params.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Helpers.PublishedEnvironmentHelper.TryAddToIntDictionary(System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Int32,System.Int32)">
            <summary>
            This will add a value to the dictionary by creating a new entry or adding it to the already existing entry under the key.
            </summary>
            <param name="dictionary">The dictionary to edit.</param>
            <param name="key">The key value that will be added or added to.</param>
            <param name="value">The value that is to be set or added to the key.</param>
        </member>
        <member name="M:Api.Modules.Templates.Helpers.PublishedEnvironmentHelper.GeneratePublishLog(System.Int32,Api.Modules.Templates.Models.Other.PublishedEnvironmentModel,System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            Generates a publishlogmodel containing the changes made for saving as a log of the publish event.
            </summary>
            <param name="templateId">The id of the item that is published.</param>
            <param name="currentPublished">A PublishedEnvironmentModel containing the current situation before the publish action is executed.</param>
            <param name="publishModel">A changelog in the form of a Dictionary containing the versions and their respective value changes to achieve the publishing of the environment</param>
            <returns>A model containing the PublishLogModel to log the event of publishing the environment of the item.</returns>
        </member>
        <member name="T:Api.Modules.Templates.Helpers.ReflectionHelper">
            <summary>
            A helper class for the template module for reflection functions.
            </summary>
        </member>
        <member name="M:Api.Modules.Templates.Helpers.ReflectionHelper.GetComponentTypeByName(System.String)">
            <summary>
            Retrieve the Type of a given component name using reflection. This method will exclusively look through the GCL for components of the type CmsComponent&lt;CmsSettings, Enum&gt;. 
            When no or multiple components are found an InvalidComponentException will be thrown.
            </summary>
            <param name="componentName">A string of the component that is to be retrieved using reflection.</param>
            <returns>The type of the current component.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Helpers.ReflectionHelper.GetCmsSettingsType(System.Type)">
            <summary>
            Gets the settingsType from the current CMSComponent. The settingstype is the model used for determining the properties and attributes of the components.
            </summary>
            <param name="component">The type of the component which settingstype should be retrieved.</param>
            <returns>
            The Type of the model belonging to this component.
            </returns>
        </member>
        <member name="M:Api.Modules.Templates.Helpers.ReflectionHelper.GetCmsSettingsTypeByComponentName(System.String)">
            <summary>
            This method will retrieve the cms settings type by first retrieving the base component with the given name and then retrieve its cmssettings type.
            </summary>
            <param name="componentName">The name of the component whose settings type is to be retrieved</param>
            <returns>A Type of the cms settings that is bound to the component that matches the name.</returns>
        </member>
        <member name="T:Api.Modules.Templates.Helpers.TreeViewHelper">
            <summary>
            A helper class for functions to do something with tree views in the template module.
            </summary>
        </member>
        <member name="M:Api.Modules.Templates.Helpers.TreeViewHelper.ConvertTemplateTreeViewDaoToTemplateTreeViewModel(Api.Modules.Templates.Models.Template.TemplateTreeViewDao)">
            <summary>
            Converts a TemplateTreeViewDAO to a TemplateTreeViewModel
            </summary>
            <param name="rawTreeView">The raw data in the form of a TemplateTreeViewDAO to convert.</param>
            <returns>A TemplateTreeViewModel containing the data provided in the param</returns>
        </member>
        <member name="T:Api.Modules.Templates.Interfaces.DataLayer.IDynamicContentDataService">
            <summary>
            Data service for doing things in the database with/for dynamic content components.
            </summary>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.IDynamicContentDataService.GetLinkableDynamicContentAsync(System.Int32)">
            <summary>
            Gets all dynamic content that can be linked to the given template.
            </summary>
            <param name="templateId">The ID of the template.</param>
            <returns>A list of dynamic components from other templates.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.IDynamicContentDataService.GetVersionDataAsync(System.Int32,System.Int32)">
            <summary>
            Retrieve the variable data of a set version. This can be used for retrieving past versions or the current version if the version number is known.
            </summary>
            <param name="version">The version number to distinguish the values by</param>
            <param name="contentId">The ID of the dynamic content.</param>
            <returns>Dictionary of property names and their values in the given version.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.IDynamicContentDataService.GetComponentDataAsync(System.Int32)">
            <summary>
            Get the type data from the database associated with the given type.
            </summary>
            <param name="contentId">The ID of the dynamic content.</param>
            <returns>Dictionary containing the properties and their values.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.IDynamicContentDataService.SaveSettingsStringAsync(System.Int32,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Save the given variables and their values as a new version in the database.
            </summary>
            <param name="contentId">The ID of the dynamic content.</param>
            <param name="component">The type of component.</param>
            <param name="componentMode">The selected component mode.</param>
            <param name="title">The given name for the component.</param>
            <param name="settings">A dictionary of property names and their values.</param>
            <param name="username">The name of the authenticated user.</param>
            <returns>An int indicating the result of the executed query.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.IDynamicContentDataService.GetComponentAndModeFromContentIdAsync(System.Int32)">
            <summary>
            Save the given variables and their values as a new version in the database.
            </summary>
            <param name="contentId">The ID of the dynamic content.</param>
            <returns>The name of the component that is used.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.IDynamicContentDataService.GetMetaDataAsync(System.Int32)">
            <summary>
            Gets the meta data (name, component type etc) of a component.
            </summary>
            <param name="contentId">The ID of the component.</param>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.IDynamicContentDataService.AddLinkToTemplateAsync(System.Int32,System.Int32,System.String)">
            <summary>
            Links a dynamic content to a template.
            </summary>
            <param name="contentId">The ID of the dynamic content.</param>
            <param name="templateId">The ID of the template.</param>
            <param name="username">The name of the user that is adding the link.</param>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.IDynamicContentDataService.GetPublishedEnvironmentsAsync(System.Int32,System.String)">
            <summary>
            Get published environments from a dynamic component.
            </summary>
            <param name="contentId">The id of the dynamic component for which the environment should be retrieved.</param>
            <param name="branchDatabaseName">When publishing in a different branch, enter the database name for that branch here.</param>
            <returns>A list of all version and their published environment.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.IDynamicContentDataService.UpdatePublishedEnvironmentAsync(System.Int32,System.Int32,GeeksCoreLibrary.Core.Enums.Environments,Api.Modules.Templates.Models.Template.PublishLogModel,System.String,System.String)">
            <summary>
            Publish the dynamic component to an environment. This method will execute the publishmodel instructions it recieves, logic for publishing linked environments should be handled in the servicelayer.
            </summary>
            <param name="contentId">The id of the component of which the environment should be published.</param>
            <param name="version">The version that should be deployed/published.</param>
            <param name="environment">The environment to publish the version of the template to.</param>
            <param name="publishLog">Information for the history of the template, to log the version change there.</param>
            <param name="username">The name of the authenticated user.</param>
            <param name="branchDatabaseName">When publishing in a different branch, enter the database name for that branch here.</param>
            <returns>An int confirming the rows altered by the query.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.IDynamicContentDataService.DuplicateAsync(System.Int32,System.Int32,System.String)">
            <summary>
            Duplicates a dynamic component (only the latest version).
            </summary>
            <param name="contentId">The ID of the component.</param>
            <param name="newTemplateId">The id of the template to link the new component to.</param>
            <param name="username">The name of the authenticated user.</param>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.IDynamicContentDataService.DeleteAsync(System.Int32)">
            <summary>
            Deletes a dynamic component by putting the field 'removed' to 1
            </summary>
            <param name="contentId"> The ID of the dynamic component</param>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.IDynamicContentDataService.DeployToBranchAsync(System.Collections.Generic.List{System.Int32},System.String)">
            <summary>
            Deploys one or more templates from the main branch to a sub branch.
            </summary>
            <param name="dynamicContentIds">The IDs of the templates to deploy.</param>
            <param name="branchDatabaseName">The name of the database that contains the sub branch.</param>
        </member>
        <member name="T:Api.Modules.Templates.Interfaces.DataLayer.IHistoryDataService">
            <summary>
            Data service for all queries that need to do something with the history of Wiser templates.
            </summary>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.IHistoryDataService.GetDynamicContentHistoryAsync(System.Int32)">
            <summary>
            Returns the components history as a dictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.IHistoryDataService.GetPublishedEnvironmentsFromDynamicContentAsync(System.Int32)">
            <summary>
            Get a list of versions and their published environments form a dynamic content.
            </summary>
            <param name="templateId">The id of the dynamic content.</param>
            <returns>List of version numbers and their published environment.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.IHistoryDataService.GetTemplateHistoryAsync(System.Int32)">
            <summary>
            Get the history of a template. This will retrieve all versions of the template which can be compared for changes.
            </summary>
            <param name="templateId">The id of the template which history should be retrieved.</param>
            <returns>A list of <see cref="T:Api.Modules.Templates.Models.Template.TemplateSettingsModel"/> forming the history of the template. The list is ordered by version number (DESC).</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.IHistoryDataService.GetPublishHistoryFromTemplateAsync(System.Int32)">
            <summary>
            Get the history of a template from the publish log table. The list will be ordered on date desc.
            </summary>
            <param name="templateId">The Id of the template whose history to retrieve</param>
            <returns>A list of <see cref="T:Api.Modules.Templates.Models.History.PublishHistoryModel"/> containing the values of the change from the publish log datatable.</returns>
        </member>
        <member name="T:Api.Modules.Templates.Interfaces.DataLayer.IMeasurementsDataService">
            <summary>
            Data service for doing things in the database for measurements for templates and components.
            </summary>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.IMeasurementsDataService.GetRenderLogsAsync(System.Int32,System.Int32,System.Int32,System.String,System.Nullable{GeeksCoreLibrary.Core.Enums.Environments},System.UInt64,System.String,System.Int32,System.Int32,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Get rendering logs from database. You need to enter either a template ID or a component ID (not both), all other parameters are optional.
            </summary>
            <param name="templateId">The ID of the template to get the render logs for. Leave empty if you want to get everything or if you want to get logs from a component instead.</param>
            <param name="componentId">The ID of the component to get the render logs for. Leave empty if you want to get everything or if you want to get logs from a template instead.</param>
            <param name="version">The version of the template or component.</param>
            <param name="urlRegex">A regex for filtering logs on certain URLs/pages.</param>
            <param name="environment">The environment to get the logs for. Set to null to get the logs for all environments. Default value is null.</param>
            <param name="userId">The ID of the website user, if you want to get the logs for a specific user only.</param>
            <param name="languageCode">The language code that is used on the website, if you want to get the logs for a specific language only.</param>
            <param name="pageSize">The amount of logs to get. Set to 0 to get all of then. Default value is 500.</param>
            <param name="pageNumber">The page number. Default value is 1. Only applicable if pageSize is greater than zero.</param>
            <param name="getDailyAverage">Set this to true to get the average render time per day, instead of getting every single render log separately. Default is false.</param>
            <param name="start">Only get results from this start date and later.</param>
            <param name="end">Only get results from this end date and earlier.</param>
            <returns>A list of <see cref="T:Api.Modules.Templates.Models.Measurements.RenderLogModel"/> with the results.</returns>
        </member>
        <member name="T:Api.Modules.Templates.Interfaces.DataLayer.IPreviewDataService">
            <summary>
            Data service for doing CRUD operations in database for preview profiles for the templates module.
            </summary>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.IPreviewDataService.GetAsync(System.Int32)">
            <summary>
            Retrieve all preview profiles that are available at a given template.
            </summary>
            <param name="templateId">The id of the template</param>
            <returns>A list of preview profile models containing the id, name and settings for a preview profile.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.IPreviewDataService.CreateAsync(Api.Modules.Templates.Models.Preview.PreviewProfileDao,System.Int32)">
            <summary>
            Create a new preview profile that matches the params. This wil always set a new name.
            </summary>
            <param name="profile">A previewprofilemodel containing the name and settings of the new profile</param>
            <param name="templateId"></param>
            <returns>The ID of the new profile.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.IPreviewDataService.UpdateAsync(Api.Modules.Templates.Models.Preview.PreviewProfileDao,System.Int32)">
            <summary>
            Edit an existing preview profile. This will only alter the name if a name is given in the param.
            </summary>
            <param name="profile">A previewprofile containing the id, name and settings of the preview profile</param>
            <param name="templateId"></param>
            <returns>A int representing the rows affected.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.IPreviewDataService.DeleteAsync(System.Int32,System.Int32)">
            <summary>
            Deletes a preview profile with the given id.
            </summary>
            <param name="templateId"></param>
            <param name="profileId">The id of the preview profile</param>
            <returns>An int representing the rows affected.</returns>
        </member>
        <member name="T:Api.Modules.Templates.Interfaces.DataLayer.ITemplateDataService">
            <summary>
            Data service for doing things in database for Wiser templates.
            </summary>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.ITemplateDataService.GetMetaDataAsync(System.Int32)">
            <summary>
            Get the meta data (name, changedOn, changedBy etc) from a template.
            </summary>
            <param name="templateId">The id of the template to retrieve the data from.</param>
            <returns>A <see cref="T:Api.Modules.Templates.Models.Template.TemplateSettingsModel"/> containing the current template data of the template with the given id.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.ITemplateDataService.GetDataAsync(System.Int32,System.Nullable{GeeksCoreLibrary.Core.Enums.Environments},System.Nullable{System.Int32})">
            <summary>
            Get the template data of a template.
            </summary>
            <param name="templateId">The id of the template to retrieve the data from.</param>
            <param name="environment">Optional: The environment the template needs to be active on. Get the latest version if no environment has been given.</param>
            <param name="version">Optional: If you want to get a specific version, enter that version number here.</param>
            <returns>A <see cref="T:Api.Modules.Templates.Models.Template.TemplateSettingsModel"/> containing the current template data of the template with the given id.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.ITemplateDataService.GetPublishedEnvironmentsAsync(System.Int32,System.String)">
            <summary>
            Get published environments from a template.
            </summary>
            <param name="templateId">The id of the template which environment should be retrieved.</param>
            <param name="branchDatabaseName">When publishing in a different branch, enter the database name for that branch here.</param>
            <returns>A list of all version and their published environment.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.ITemplateDataService.UpdatePublishedEnvironmentAsync(System.Int32,System.Int32,GeeksCoreLibrary.Core.Enums.Environments,Api.Modules.Templates.Models.Template.PublishLogModel,System.String,System.String)">
            <summary>
            Publish the template to an environment. This method will execute the publish model instructions it receives, logic for publishing linked environments should be handled in the servicelayer.
            </summary>
            <param name="templateId">The id of the template of which the environment should be published.</param>
            <param name="version">The version that should be deployed/published.</param>
            <param name="environment">The environment to publish the version of the template to.</param>
            <param name="publishLog">Information for the history of the template, to log the version change there.</param>
            <param name="username">The name of the authenticated user.</param>
            <param name="branchDatabaseName">When publishing in a different branch, enter the database name for that branch here.</param>
            <returns>An int confirming the rows altered by the query.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.ITemplateDataService.GetLinkedTemplatesAsync(System.Int32)">
            <summary>
            Get the templates linked to the current template and their relation to the current template.
            </summary>
            <param name="templateId">The id of the template which linked templates should be retrieved.</param>
            <returns>Return a list of linked templates in the form of linkedtemplatemodels.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.ITemplateDataService.GetTemplatesAvailableForLinkingAsync(System.Int32)">
            <summary>
            Get templates that can be linked to the current template but aren't linked yet.
            </summary>
            <param name="templateId">The id of the template for which the linkoptions should be retrieved.</param>
            <returns>A list of possible links in the form of linkedtemplatemodels.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.ITemplateDataService.GetLinkedDynamicContentAsync(System.Int32)">
            <summary>
            Get dynamic content that is linked to the current template.
            </summary>
            <param name="templateId">The id of the template of which the linked dynamic content is to be retrieved.</param>
            <returns>A list of dynamic content data for all the dynamic content linked to the current template.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.ITemplateDataService.SaveAsync(Api.Modules.Templates.Models.Template.TemplateSettingsModel,System.String,System.String)">
            <summary>
            Saves the template data as a new version of the template.
            </summary>
            <param name="templateSettings">A <see cref="T:Api.Modules.Templates.Models.Template.TemplateSettingsModel"/> containing the new data to save as a new template version.</param>
            <param name="templateLinks">A comma separated list of all linked javascript/scss/css templates.</param>
            <param name="username">The name of the authenticated user.</param>
            <returns>An int confirming the affected rows of the query.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.ITemplateDataService.GetTreeViewSectionAsync(System.Int32)">
            <summary>
            Retreives a section of the treeview around the given id. In case the id is 0 the root section of the tree will be retrieved.
            </summary>
            <param name="parentId">The id of the parent element of the treesection that needs to be retrieved</param>
            <returns>A list of templatetreeview items that are children of the given id.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.ITemplateDataService.SearchAsync(System.String,System.String)">
            <summary>
            Searches for a template.
            </summary>
            <param name="searchValue">What to search for.</param>
            <param name="encryptionKey">The key used for encryption.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.ITemplateDataService.CreateAsync(System.String,System.Int32,GeeksCoreLibrary.Modules.Templates.Enums.TemplateTypes,System.String,System.String)">
            <summary>
            Creates an empty template with the given name, type and parent template.
            </summary>
            <param name="name">The name to give the template that will be created.</param>
            <param name="parent">The id of the parent template of the template that will be created.</param>
            <param name="type">The type of the new template that will be created.</param>
            <param name="username">The name of the authenticated user.</param>
            <param name="editorValue">The value to be inserted into the editor. This will be empty for blank templates.</param>
            <returns>The id of the newly created template. This can be used to update the interface accordingly.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.ITemplateDataService.FixTreeViewOrderingAsync(System.Int32)">
            <summary>
            Makes sure that the ordering of a tree view is correct, to prevent issues with drag and drop in the tree view.
            </summary>
            <param name="parentId">The ID of the parent in which to fix the ordering of all it's children.</param>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.ITemplateDataService.GetParentAsync(System.Int32)">
            <summary>
            Gets the parent ID of an item.
            </summary>
            <param name="templateId">The ID of the template.</param>
            <returns>The ID and name of the parent, or <see langword="null"/> if there is no parent.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.ITemplateDataService.GetOrderingAsync(System.Int32)">
            <summary>
            Gets the sort order number of a template.
            </summary>
            <param name="templateId">The ID of the template.</param>
            <returns>The order number.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.ITemplateDataService.GetHighestOrderNumberOfChildrenAsync(System.Int32)">
            <summary>
            Gets the highest order number of all children of a parent, so that you can calculate a new order number when adding a new child.
            </summary>
            <param name="templateId">The ID of the template.</param>
            <returns>The current highest order number.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.ITemplateDataService.MoveAsync(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Api.Modules.Kendo.Enums.TreeViewDropPositions,System.String)">
            <summary>
            Moves a template to a new position.
            </summary>
            <param name="sourceId">The ID of the template that is being moved.</param>
            <param name="destinationId">The ID of the template or directory where it's being moved to.</param>
            <param name="sourceParentId">The original parent ID of the source item.</param>
            <param name="destinationParentId">The parent ID of the destination item.</param>
            <param name="oldOrderNumber">The original order number of the item that is being moved.</param>
            <param name="newOrderNumber">The new order number of the item that is being moved.</param>
            <param name="dropPosition">The drop position, can be either <see cref="F:Api.Modules.Kendo.Enums.TreeViewDropPositions.Over"/>, <see cref="F:Api.Modules.Kendo.Enums.TreeViewDropPositions.Before"/> or <see cref="F:Api.Modules.Kendo.Enums.TreeViewDropPositions.After"/>.</param>
            <param name="username">The name of the authenticated user.</param>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.ITemplateDataService.GetScssIncludesForScssTemplateAsync(System.Int32)">
            <summary>
            Get all extra SCSS that should be included with a SCSS template that needs to be compiled.
            </summary>
            <param name="templateId">The ID of the SCSS template to get the includes/imports for.</param>
            <returns>A <see cref="T:System.Text.StringBuilder"/> with the contents of all SCSS in the correct order.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.ITemplateDataService.GetScssTemplatesThatAreNotIncludesAsync(System.Int32)">
            <summary>
            Get all SCSS templates that are not include templates. These templates need to be recompiled when someone changes an include template.
            </summary>
            <param name="templateId">The ID of the SCSS template to get the includes/imports for.</param>
            <returns>A <see cref="T:System.Text.StringBuilder"/> with the contents of all SCSS in the correct order.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.ITemplateDataService.DeleteAsync(System.Int32,System.String,System.Boolean)">
            <summary>
            Deletes a template.
            </summary>
            <param name="templateId">The ID of the template to delete.</param>
            <param name="username">The name of the authenticated user.</param>
            <param name="alsoDeleteChildren">Optional: Whether or not to also delete all children of this template. Default value is <see langword="true"/>.</param>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.ITemplateDataService.DecryptEditorValueIfEncrypted(System.String,Api.Modules.Templates.Models.Template.TemplateSettingsModel)">
            <summary>
            Decrypt editor values that have been encrypted.
            </summary>
            <param name="encryptionKey">The key used for encryption.</param>
            <param name="rawTemplateModel">The <see cref="T:Api.Modules.Templates.Models.Template.TemplateSettingsModel"/> to perform the decryption on.</param>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.DataLayer.ITemplateDataService.DeployToBranchAsync(System.Collections.Generic.List{System.Int32},System.String)">
            <summary>
            Deploy one or more templates from the main branch to a sub branch.
            </summary>
            <param name="templateIds">The IDs of the templates to deploy.</param>
            <param name="branchDatabaseName">The name of the database that contains the sub branch.</param>
        </member>
        <member name="T:Api.Modules.Templates.Interfaces.IDynamicContentService">
            <summary>
            The service containing the logic needed to use the models in a way the application will be able to process them. 
            This also forms the link with the dataservice for retrieving data from the database.
            </summary>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.IDynamicContentService.GetComponentModes(System.Type)">
            <summary>
            Retrieve all component modes of a dynamic component.
            </summary>
            <param name="component">The type of the component from which the modes should be retrieved.</param>
            <returns>A dictionary containing the Key and (Display)name for each component mode.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.IDynamicContentService.GetComponentModes(System.String)">
            <summary>
            Retrieve all component modes of a dynamic component.
            </summary>
            <param name="name">The name of the type.</param>
            <returns>A list containing the id and name for each component mode.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.IDynamicContentService.GetPropertiesOfType(System.Type)">
            <summary>
            Retrieve the properties of the CMSSettingsmodel.
            </summary>
            <param name="cmsSettingsType">The CMSSettingsmodel </param>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.IDynamicContentService.GetComponentDataAsync(System.Int32)">
            <summary>
            Retrieve the settingsmodel with data from the datalayer. This method will couple the data to the corresponding properties.
            </summary>
            <param name="contentId"></param>
            <returns>
            Dictionary with propertyinfo and the value of that property from the data.
            </returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.IDynamicContentService.SaveNewSettingsAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.String,System.Int32,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Matches the component using reflection to retrieve its modes and saves the settings.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="contentId">The id of the content to save</param>
            <param name="component">A string of the component to match using reflection</param>
            <param name="componentMode">An int of the componentMode to match when the modes are retrieved</param>
            <param name="title">The name of the template to save</param>
            <param name="settings">A dictionary of settings containing their name and value</param>
            <returns>An int with the new ID</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.IDynamicContentService.GetMetaDataAsync(System.Int32,System.Boolean)">
            <summary>
            Gets the meta data (name, component mode etc) for a component.
            </summary>
            <param name="contentId">The ID of the dynamic content.</param>
            <param name="includeSettings">Optional: Whether or not to include the settings that are saved with the component. Default value is <see langword="true" />.</param>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.IDynamicContentService.AddLinkToTemplateAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.Int32)">
            <summary>
            Links a dynamic content to a template.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="contentId">The ID of the dynamic content.</param>
            <param name="templateId">The ID of the template.</param>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.IDynamicContentService.GetEnvironmentsAsync(System.Int32,System.String)">
            <summary>
            Get the dynamic component environments. This will retrieve a list of versions and their published environments and convert it to a PublishedEnvironmentModel 
            containing the Live, accept and test versions and the list of other versions that are present in the data.
            </summary>
            <param name="contentId">The id of the dynamic component to retrieve the environments of.</param>
            <param name="branchDatabaseName">When publishing in a different branch, enter the database name for that branch here.</param>
            <returns>A model containing the versions that are currently set for the live, accept and test environment.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.IDynamicContentService.PublishToEnvironmentAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.Int32,GeeksCoreLibrary.Core.Enums.Environments,Api.Modules.Templates.Models.Other.PublishedEnvironmentModel,System.String)">
            <summary>
            Publish a dynamic component version to a new environment using a content/component id. This requires you to provide a model with the current published state.
            This method will use a generated change log to determine the environments that need to be changed. In some cases publishing an environment will also publish underlaying environments.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="contentId">The id of the component to publish.</param>
            <param name="version">The version of the component to publish.</param>
            <param name="environment">The environment to publish the component to.</param>
            <param name="currentPublished">A PublishedEnvironmentModel containing the current published templates.</param>
            <param name="branchDatabaseName">When publishing in a different branch, enter the database name for that branch here.</param>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.IDynamicContentService.DuplicateAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.Int32)">
            <summary>
            Duplicate a dynamic component (only the latest version).
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="contentId">The id of the component.</param>
            <param name="newTemplateId">The id of the template to link the new component to.</param>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.IDynamicContentService.DeleteAsync(System.Int32)">
            <summary>
            Deletes a dynamic component
            </summary>
            <param name="contentId">The id of the component</param>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.IDynamicContentService.GetLinkableDynamicContentAsync(System.Int32)">
            <summary>
            Gets all dynamic content that can be linked to the given template.
            </summary>
            <param name="templateId">The ID of the template.</param>
            <returns>A list of dynamic components from other templates.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.IDynamicContentService.DeployToBranchAsync(System.Security.Claims.ClaimsIdentity,System.Collections.Generic.List{System.Int32},System.Int32)">
            <summary>
            Deploy one or more dynamic contents to a branch.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="dynamicContentIds">The IDs of the dynamic contents to deploy.</param>
            <param name="branchId">The ID of the branch to deploy the dynamic contents to.</param>
        </member>
        <member name="T:Api.Modules.Templates.Interfaces.IHistoryService">
            <summary>
            Service for the history of Wiser templates.
            </summary>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.IHistoryService.GetChangesInComponentAsync(System.Int32)">
            <summary>
            Retrieve history of the component with generated changes. The versions will be sorted by the HistoryVersion models version(DESC).
            </summary>
            <param name="contentId">The id of the content</param>
            <returns>List of HistoryVersionModels with generated changes. Sorted by descending version.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.IHistoryService.RevertChangesAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.Collections.Generic.List{Api.Modules.Templates.Models.History.RevertHistoryModel})">
            <summary>
            Retrieves the current settings and applies the List of changes that should be reverted.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="contentId">The id of the content</param>
            <param name="changesToRevert">Contains the properties and specific versions that need to be reverted.</param>
            <returns>The ID of the component that was reverted.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.IHistoryService.GetPublishedEnvironmentsOfOverviewModels(System.Collections.Generic.List{Api.Modules.Templates.Models.DynamicContent.DynamicContentOverviewModel})">
            <summary>
            Retrieve the published environments for dynamic content overviews. This method will accept a list of DynamicContentOverviewModel and retrieve the published environments for each dynamic content.
            </summary>
            <param name="overviewList">A list of DynamicContentOverviewModels which are to be supplied with published environments</param>
            <returns>The list of DynamicContentOverviewModels containing the published environments for each model</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.IHistoryService.GetHistoryVersionsOfDynamicContent(System.Int32)">
            <summary>
            Retrieves a list of versions for the dynamic content containing their publish status and transforms it to a PublishedEnvironmentModel. 
            </summary>
            <param name="templateId">The id of the content.</param>
            <returns>A PublishedEnvironmentModel containing the published environments of dynamic content</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.IHistoryService.GetVersionHistoryFromTemplate(System.Security.Claims.ClaimsIdentity,System.Int32,System.Collections.Generic.Dictionary{Api.Modules.Templates.Models.DynamicContent.DynamicContentOverviewModel,System.Collections.Generic.List{Api.Modules.Templates.Models.History.HistoryVersionModel}})">
            <summary>
            Retrieve the history of a template. This will start by retrieving the history of the template. 
            When comparing the settings for changes the linked dynamic content will be checked for changes during this version. Any changes found in the linked dynamic content will be added to the template history.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="templateId">The id of the template.</param>
            <param name="dynamicContent">A Dictionary containing the overview of dynamic content and its respective history</param>
            <returns>A list of TemplateHistoryModel containing the history of the template and its linked dynamic content for each version</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.IHistoryService.GetPublishHistoryFromTemplate(System.Int32)">
            <summary>
            Retrieves the publish history of a template
            </summary>
            <param name="templateId">The id of a template</param>
            <returns></returns>
        </member>
        <member name="T:Api.Modules.Templates.Interfaces.IPreviewService">
            <summary>
            Service for CRUD operations for preview profiles for the templates module.
            </summary>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.IPreviewService.GetAsync(System.Int32)">
            <summary>
            Retrieve al the preview profiles for an item.
            </summary>
            <param name="templateId">the id of the item to retrieve the preview items of.</param>
            <returns>A list of PreviewProfileModel containing the profiles that are available for the given template</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.IPreviewService.CreateAsync(Api.Modules.Templates.Models.Preview.PreviewProfileModel,System.Int32)">
            <summary>
            Creates a new instance of a preview profile with the given data.
            </summary>
            <param name="profile">A PreviewProfileModel containing the data of the profile to create</param>
            <param name="templateId"></param>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.IPreviewService.UpdateAsync(Api.Modules.Templates.Models.Preview.PreviewProfileModel,System.Int32)">
            <summary>
            Alter an existing preview profile. The preview profiles name can be empty to keep the old name.
            </summary>
            <param name="profile">A PreviewProfileModel containing the data of the profile to save</param>
            <param name="templateId"></param>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.IPreviewService.DeleteAsync(System.Int32,System.Int32)">
            <summary>
            Delete a preview profile.
            </summary>
            <param name="templateId"></param>
            <param name="profileId">The id of the preview profile that is to be deleted</param>
        </member>
        <member name="T:Api.Modules.Templates.Interfaces.ITemplatesService">
            <summary>
            A service for doing things with templates from the templates module in Wiser.
            </summary>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.ITemplatesService.Get(System.Int32,System.String,System.String)">
            <summary>
            Gets a template by either name or ID.
            </summary>
            <param name="templateId">Optional: The ID of the template to get.</param>
            <param name="templateName">Optional: The name of the template to get.</param>
            <param name="rootName">Optional: The name of the root directory to look in.</param>
            <returns>A Template.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.ITemplatesService.GetQueryAsync(System.Int32,System.String)">
            <summary>
            Get a query template by either name or ID.
            </summary>
            <param name="templateId">Optional: The ID of the template to get.</param>
            <param name="templateName">Optional: The name of the template to get.</param>
            <returns>A QueryTemplate</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.ITemplatesService.GetAndExecuteQueryAsync(System.Security.Claims.ClaimsIdentity,System.String,Microsoft.AspNetCore.Http.IFormCollection)">
            <summary>
            Gets a query from the wiser database and executes it in the customer database.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="templateName">The encrypted name of the wiser template.</param>
            <param name="requestPostData">Optional: The post data from the request, if the content type was application/x-www-form-urlencoded. This is for backwards compatibility.</param>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.ITemplatesService.GetCssForHtmlEditorsAsync(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Gets the CSS that should be used for HTML editors, so that their content will look more like how it would look on the customer's website.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <returns>A string that contains the CSS that should be loaded in the HTML editor.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.ITemplatesService.GetTemplateByNameAsync(System.String,System.Boolean)">
            <summary>
            Gets a template by name.
            </summary>
            <param name="templateName">The name of the template.</param>
            <param name="wiserTemplate">Optional: If true the template will be tried to be found within Wiser instead of the database of the user.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.ITemplatesService.GetTemplateMetaDataAsync(System.Int32)">
            <summary>
            Get the meta data (name, changedOn, changedBy etc) from a template.
            </summary>
            <param name="templateId">The id of the template to retrieve the data from.</param>
            <returns>A <see cref="T:Api.Modules.Templates.Models.Template.TemplateSettingsModel"/> containing the current template data of the template with the given id.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.ITemplatesService.GetTemplateSettingsAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.Nullable{GeeksCoreLibrary.Core.Enums.Environments})">
            <summary>
            Get the latest version for a given template.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="templateId">The id of the template.</param>
            <param name="environment">The environment the template needs to be active on.</param>
            <returns>A <see cref="T:Api.Modules.Templates.Models.Template.TemplateSettingsModel"/> containing the template data of the latest version.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.ITemplatesService.GetTemplateEnvironmentsAsync(System.Int32,System.String)">
            <summary>
            Get the template environments. This will retrieve a list of versions and their published environments and convert it to a PublishedEnvironmentModel 
            containing the Live, accept and test versions and the list of other versions that are present in the data.
            </summary>
            <param name="templateId">The id of the template to retrieve the environments of.</param>
            <param name="branchDatabaseName">When publishing in a different branch, enter the database name for that branch here.</param>
            <returns>A model containing the versions that are currently set for the live, accept and test environment.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.ITemplatesService.GetLinkedTemplatesAsync(System.Int32)">
            <summary>
            Get the templates linked to the current template. The templates that are retrieved will be converted into a LinkedTemplatesModel using the LinkedTemplatesEnum to determine its link type.
            </summary>
            <param name="templateId">The id of the template of which to retrieve the linked templates.</param>
            <returns>A LinkedTemplates model that contains several lists of linked templates divided by their link type. (e.g. javascript, css)</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.ITemplatesService.GetLinkedDynamicContentAsync(System.Int32)">
            <summary>
            Get the dynamic content that is linked to the current template. This method will convert the linked dynamic content data into a dynamic content overview which can be used for displaying a general overview of the dynamic content.
            </summary>
            <param name="templateId">The id of the template to of which to retrieve the linked dynamic content.</param>
            <returns>A list of overviews for dynamic content. All content in the list is linked to the current template.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.ITemplatesService.PublishToEnvironmentAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.Int32,GeeksCoreLibrary.Core.Enums.Environments,Api.Modules.Templates.Models.Other.PublishedEnvironmentModel,System.String)">
            <summary>
            Publish a template version to a new environment using a template id. This requires you to provide a model with the current published state.
            This method will use a generated change log to determine the environments that need to be changed. In some cases publishing an environment will also publish underlaying environments.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="templateId">The id of the template to publish.</param>
            <param name="version">The version of the template to publish.</param>
            <param name="environment">The environment to publish the template to.</param>
            <param name="currentPublished">A PublishedEnvironmentModel containing the current published templates.</param>
            <param name="branchDatabaseName">When publishing in a different branch, enter the database name for that branch here.</param>
            <returns>A int of the rows affected.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.ITemplatesService.SaveTemplateVersionAsync(System.Security.Claims.ClaimsIdentity,Api.Modules.Templates.Models.Template.TemplateSettingsModel,System.Boolean)">
            <summary>
            Save the template as a new version and save the linked templates if necessary. This method will calculate if links are to be added or removed from the current situation.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="template">A <see cref="T:Api.Modules.Templates.Models.Template.TemplateSettingsModel"/> containing the data of the template that is to be saved as a new version</param>
            <param name="skipCompilation">Optional: Whether or not to skip the compilations of SCSS templates. Default value is <see langword="false" />.</param>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.ITemplatesService.GetTreeViewSectionAsync(System.Security.Claims.ClaimsIdentity,System.Int32)">
            <summary>
            Retrieve the tree view section underlying the parentId. Transforms the tree view section into a list of TemplateTreeViewModels.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="parentId">The id of the template whose child nodes are to be retrieved.</param>
            <returns>A List of TemplateTreeViewModels containing the id, names and types of the templates included in the requested section.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.ITemplatesService.SearchAsync(System.Security.Claims.ClaimsIdentity,System.String)">
            <summary>
            Search for a template.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="searchValue">The value to search for.</param>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.ITemplatesService.GetTemplateHistoryAsync(System.Security.Claims.ClaimsIdentity,System.Int32)">
            <summary>
            Retrieve the history of the template. This will include changes made to dynamic content between the releases of templates and the publishes to different environments from this template. This data is collected and combined in a TemnplateHistoryOverviewModel
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="templateId">The id of the template to retrieve the history from.</param>
            <returns>A TemplateHistoryOverviewModel containing a list of templatehistorymodels and a list of publishlogmodels. The model contains base info and a list of changes made within the version and its sub components (e.g. dynamic content, publishes).</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.ITemplatesService.CreateAsync(System.Security.Claims.ClaimsIdentity,System.String,System.Int32,GeeksCoreLibrary.Modules.Templates.Enums.TemplateTypes,System.String)">
            <summary>
            Creates an empty template with the given name, type and parent template.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="name">The name to give the template that will be created.</param>
            <param name="parent">The id of the parent template of the template that will be created.</param>
            <param name="type">The type of the new template that will be created.</param>
            <param name="editorValue"> The optional editorValue of the template, this can be used for importing files.</param>
            <returns>The id of the newly created template. This can be used to update the interface accordingly.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.ITemplatesService.RenameAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.String)">
            <summary>
            Renames a template. This will create a new version of the template with the name, so that we can always see in the history that the name has been changed.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="id">The ID of the template to rename.</param>
            <param name="newName">The new name.</param>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.ITemplatesService.MoveAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.Int32,Api.Modules.Kendo.Enums.TreeViewDropPositions)">
            <summary>
            Moves a template to a new position.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="sourceId">The ID of the template that is being moved.</param>
            <param name="destinationId">The ID of the template or directory where it's being moved to.</param>
            <param name="dropPosition">The drop position, can be either <see cref="F:Api.Modules.Kendo.Enums.TreeViewDropPositions.Over"/>, <see cref="F:Api.Modules.Kendo.Enums.TreeViewDropPositions.Before"/> or <see cref="F:Api.Modules.Kendo.Enums.TreeViewDropPositions.After"/>.</param>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.ITemplatesService.GetEntireTreeViewStructureAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.String,System.Nullable{GeeksCoreLibrary.Core.Enums.Environments})">
            <summary>
            Gets the tree view including template settings of all templates.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="parentId">The ID of the parent item.</param>
            <param name="startFrom">Set the place from which to start the tree view, folders separated by comma.</param>
            <param name="environment">The environment the template needs to be active on.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.ITemplatesService.DeleteAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.Boolean)">
            <summary>
            Deletes a template. This will not actually delete it from the database, but add a new version with removed = 1 instead.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="templateId">The ID of the template to delete.</param>
            <param name="alsoDeleteChildren">Optional: Whether or not to also delete all children of this template. Default value is <see langword="true"/>.</param>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.ITemplatesService.GeneratePreviewAsync(System.Security.Claims.ClaimsIdentity,System.Int32,Api.Modules.Templates.Models.Template.GenerateTemplatePreviewRequestModel)">
            <summary>
            Generates a preview for a dynamic component.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="componentId">The ID of the component.</param>
            <param name="requestModel">The template settings, they don't have to be saved yet.</param>
            <returns>The HTML of the component as it would look on the website.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.ITemplatesService.GeneratePreviewAsync(System.Security.Claims.ClaimsIdentity,Api.Modules.Templates.Models.Template.GenerateTemplatePreviewRequestModel)">
            <summary>
            Generates a preview for an HTML template.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="requestModel">The template settings, they don't have to be saved yet.</param>
            <returns>The HTML of the template as it would look on the website.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.ITemplatesService.CheckDefaultHeaderConflict(System.Int32,System.String)">
            <summary>
            Checks if there's a conflict with another template that's also marked as a default header with the given regex.
            </summary>
            <param name="templateId">ID of the current template.</param>
            <param name="regexString">The regular expression that can filter whether the default header should be used.</param>
            <returns>A string with the name of the template that this template conflicts with, or an empty string if there's no conflict.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.ITemplatesService.CheckDefaultFooterConflict(System.Int32,System.String)">
            <summary>
            Checks if there's a conflict with another template that's also marked as a default footer with the given regex.
            </summary>
            <param name="templateId">ID of the current template.</param>
            <param name="regexString">The regular expression that can filter whether the default footer should be used.</param>
            <returns>A string with the name of the template that this template conflicts with, or an empty string if there's no conflict.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.ITemplatesService.GetVirtualTemplateAsync(System.String,GeeksCoreLibrary.Modules.Templates.Enums.TemplateTypes)">
            <summary>
            Attempt to retrieve a virtual template, which is either a database routine, view, or trigger.
            </summary>
            <param name="objectName">The name of the routine, view, or trigger.</param>
            <param name="templateType">The type of virtual template.</param>
            <returns>A <see cref="T:Api.Modules.Templates.Models.Template.TemplateSettingsModel"/> with data about the virtual template.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.ITemplatesService.GetTableNamesForTriggerTemplatesAsync">
            <summary>
            Retrieves a list of table names for the trigger templates.
            </summary>
            <returns>A list of strings.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.ITemplatesService.DeployToBranchAsync(System.Security.Claims.ClaimsIdentity,System.Collections.Generic.List{System.Int32},System.Int32)">
            <summary>
            Deploy one or more templates to a branch.
            </summary>
            <param name="identity">The identity of the authenticated user.</param>
            <param name="templateIds">The IDs of the templates to deploy.</param>
            <param name="branchId">The ID of the branch to deploy the templates to.</param>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.ITemplatesService.GetMeasurementSettingsAsync(System.Int32,System.Int32)">
            <summary>
            Get the settings for measurements of a template. You have to specify either a template ID or a component ID, not both.
            </summary>
            <param name="templateId">The ID of the template to get the settings of.</param>
            <param name="componentId">The ID of the dynamic content to get the settings of.</param>
            <returns>The measurement settings of the template.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.ITemplatesService.SaveMeasurementSettingsAsync(Api.Modules.Templates.Models.Measurements.MeasurementSettings,System.Int32,System.Int32)">
            <summary>
            Save the settings for measurements of this template. You have to specify either a template ID or a component ID, not both.
            </summary>
            <param name="templateId">The ID of the template to save the settings for.</param>
            <param name="componentId">The ID of the dynamic content to save the settings for.</param>
            <param name="settings">The new settings.</param>
        </member>
        <member name="M:Api.Modules.Templates.Interfaces.ITemplatesService.GetRenderLogsAsync(System.Int32,System.Int32,System.String,System.Nullable{GeeksCoreLibrary.Core.Enums.Environments},System.UInt64,System.String,System.Int32,System.Int32,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Get rendering logs from database, filtered by the parameters.
            </summary>
            <param name="templateId">The ID of the template to get the render logs for.</param>
            <param name="version">The version of the template or component.</param>
            <param name="urlRegex">A regex for filtering logs on certain URLs/pages.</param>
            <param name="environment">The environment to get the logs for. Set to null to get the logs for all environments. Default value is null.</param>
            <param name="userId">The ID of the website user, if you want to get the logs for a specific user only.</param>
            <param name="languageCode">The language code that is used on the website, if you want to get the logs for a specific language only.</param>
            <param name="pageSize">The amount of logs to get. Set to 0 to get all of then. Default value is 500.</param>
            <param name="pageNumber">The page number. Default value is 1. Only applicable if pageSize is greater than zero.</param>
            <param name="getDailyAverage">Set this to true to get the average render time per day, instead of getting every single render log separately. Default is false.</param>
            <param name="start">Only get results from this start date and later.</param>
            <param name="end">Only get results from this end date and earlier.</param>
            <returns>A list of <see cref="T:Api.Modules.Templates.Models.Measurements.RenderLogModel"/> with the results.</returns>
        </member>
        <member name="T:Api.Modules.Templates.Models.DynamicContent.ComponentModeModel">
            <summary>
            A model representing a single mode of a component.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.DynamicContent.ComponentModeModel.Id">
            <summary>
            Gets or sets the ID of the component mode.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.DynamicContent.ComponentModeModel.Name">
            <summary>
            Gets or sets the name of the component mode.
            </summary>
        </member>
        <member name="T:Api.Modules.Templates.Models.DynamicContent.DynamicContentOverviewModel">
            <summary>
            Model class for the information in a Dynamic Content Overview
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.DynamicContent.DynamicContentOverviewModel.Id">
            <summary>
            Gets or sets the ID of the Dynamic Content Overview
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.DynamicContent.DynamicContentOverviewModel.Title">
            <summary>
            Gets or sets the Title of the Dynamic Content Overview
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.DynamicContent.DynamicContentOverviewModel.Component">
            <summary>
            Gets or sets the component of the Dynamic Content Overview
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.DynamicContent.DynamicContentOverviewModel.ComponentMode">
            <summary>
            Gets or sets the component mode of the Dynamic Content Overview
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.DynamicContent.DynamicContentOverviewModel.ComponentModeId">
            <summary>
            Gets or sets the ID of the component mode of the Dynamic Content Overview
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.DynamicContent.DynamicContentOverviewModel.Usages">
            <summary>
            Gets or sets a list of usages of the Dynamic Content Overview
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.DynamicContent.DynamicContentOverviewModel.Renders">
            <summary>
            Gets or sets the amount of Renders of a Dynamic Content Overview
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.DynamicContent.DynamicContentOverviewModel.AverageRenderTime">
            <summary>
            Gets or sets the average render time of a Dynamic Content Overview
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.DynamicContent.DynamicContentOverviewModel.ChangedOn">
            <summary>
            Gets or sets the date and time when the Dynamic Content Overview has changed
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.DynamicContent.DynamicContentOverviewModel.ChangedBy">
            <summary>
            Gets or sets who changed the Dynamic Content Overview
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.DynamicContent.DynamicContentOverviewModel.LatestVersion">
            <summary>
            Gets or sets the version number of the latest version of the Dynamic Content Overview
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.DynamicContent.DynamicContentOverviewModel.Data">
            <summary>
            Gets or sets an key/value dictionary of data for the Dynamic Content Overview
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.DynamicContent.DynamicContentOverviewModel.Versions">
            <summary>
            Gets or sets an object which hold which version the Dynamic Content Overview is on. This is on all published environments
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.DynamicContent.DynamicContentOverviewModel.TemplateId">
            <summary>
            Gets or sets of the ID of the template
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.DynamicContent.DynamicContentOverviewModel.TemplatePath">
            <summary>
            Gets or sets of the path of the template
            </summary>
        </member>
        <member name="T:Api.Modules.Templates.Models.DynamicContent.LinkedDynamicContentDao">
            <summary>
            Data Access Object for Linked Dynamic Content
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.DynamicContent.LinkedDynamicContentDao.Id">
            <summary>
            Gets or sets the ID of the Linked Dynamic Content
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.DynamicContent.LinkedDynamicContentDao.Component">
            <summary>
            Gets or sets the component of the Linked Dynamic Content
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.DynamicContent.LinkedDynamicContentDao.ComponentMode">
            <summary>
            Gets or sets the component mode of the Linked Dynamic Content
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.DynamicContent.LinkedDynamicContentDao.Usages">
            <summary>
            Gets or sets the usages of the Linked Dynamic Content DAO
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.DynamicContent.LinkedDynamicContentDao.ChangedOn">
            <summary>
            Gets or sets the date and time of when the Linked Dynamic Content last changed
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.DynamicContent.LinkedDynamicContentDao.ChangedBy">
            <summary>
            Gets or sets who last changed the Linked Dynamic Content
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.DynamicContent.LinkedDynamicContentDao.Title">
            <summary>
            The title of the Linked Dynamic Content
            </summary>
        </member>
        <member name="T:Api.Modules.Templates.Models.History.DynamicContentChangeModel">
            <summary>
            Model class to have info about what changed in the Dynamic Content
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.History.DynamicContentChangeModel.Component">
            <summary>
            Gets or sets the component of the Dynamic Content that is changing
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.History.DynamicContentChangeModel.ComponentMode">
            <summary>
            Gets or sets the component mode of the Dynamic Content that is changing
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.History.DynamicContentChangeModel.Property">
            <summary>
            Gets or sets the property of the Dynamic Content that is changing
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.History.DynamicContentChangeModel.NewValue">
            <summary>
            Gets or sets the new value that the Dynamic Content is changing to
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.History.DynamicContentChangeModel.OldValue">
            <summary>
            Gets or sets the old value from which the Dynamic Content is changing to
            </summary>
        </member>
        <member name="M:Api.Modules.Templates.Models.History.DynamicContentChangeModel.GetPropertyAttribute">
            <summary>
            Gets the attribute of a property
            </summary>
        </member>
        <member name="T:Api.Modules.Templates.Models.History.HistoryVersionModel">
            <summary>
            A model representing a single change in the settings of a dynamic component.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.History.HistoryVersionModel.Version">
            <summary>
            Get or sets the version number.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.History.HistoryVersionModel.ChangedOn">
            <summary>
            Get or sets the Change date.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.History.HistoryVersionModel.ChangedBy">
            <summary>
            Get or sets the Name of the user that made the change.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.History.HistoryVersionModel.Changes">
            <summary>
            Get the list of changes compared to the previous version. This does not generated the changelist, but retrieves it from the model if set.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.History.HistoryVersionModel.RawVersionString">
            <summary>
            Gets or sets the raw version string.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.History.HistoryVersionModel.Component">
            <summary>
            Gets or sets the name of the component.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.History.HistoryVersionModel.ComponentMode">
            <summary>
            Gets or sets the name of the component mode.
            </summary>
        </member>
        <member name="M:Api.Modules.Templates.Models.History.HistoryVersionModel.GetDisplayChangedOn">
            <summary>
            Get the change date in a displayable format(DD-MM-YYYY om HH:MM:SS).
            </summary>
            <returns>A string containing a displayable date.</returns>
        </member>
        <member name="T:Api.Modules.Templates.Models.History.PublishHistoryModel">
            <summary>
            A model to store information about the history of publishing a template to a specific environment.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.History.PublishHistoryModel.TemplateId">
            <summary>
            Gets or sets the ID of the template
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.History.PublishHistoryModel.ChangedOn">
            <summary>
            Gets or sets the date and time when a template has changed 
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.History.PublishHistoryModel.ChangedBy">
            <summary>
            Gets or sets who changed the template
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.History.PublishHistoryModel.PublishLog">
            <summary>
            Gets or sets a log of what is published
            </summary>
        </member>
        <member name="M:Api.Modules.Templates.Models.History.PublishHistoryModel.GetDisplayChangedOn">
            <summary>
            Get the change date in a displayable format(DD-MM-YYYY om HH:MM:SS).
            </summary>
            <returns>A string containing a displayable date.</returns>
        </member>
        <member name="T:Api.Modules.Templates.Models.History.RevertHistoryModel">
            <summary>
            A model class to revert history changes
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.History.RevertHistoryModel.Version">
            <summary>
            Gets or sets the version number of the RevertHistory object
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.History.RevertHistoryModel.RevertedProperties">
            <summary>
            Gets or sets a list of the properties that need to be reverted
            </summary>
        </member>
        <member name="M:Api.Modules.Templates.Models.History.RevertHistoryModel.GetVersionForRevision">
            <summary>
            Gets the version number to be used for revision
            </summary>
            <returns>The current version minus one</returns>
        </member>
        <member name="T:Api.Modules.Templates.Models.History.TemplateHistoryModel">
            <summary>
            A model class that contains the history of a template
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.History.TemplateHistoryModel.Id">
            <summary>
            Gets or sets the ID of the Template History object
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.History.TemplateHistoryModel.Version">
            <summary>
            Gets or sets the version number of the Template History object
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.History.TemplateHistoryModel.ChangedOn">
            <summary>
            Gets or sets the date and time when a template has been changed
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.History.TemplateHistoryModel.ChangedBy">
            <summary>
            Gets or sets the user which has changed a template
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.History.TemplateHistoryModel.TemplateChanges">
            <summary>
            Gets or sets a dictionary of the changes done in a template 
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.History.TemplateHistoryModel.LinkedTemplateChanges">
            <summary>
            Gets or sets a dictionary of the changes done in a template linked to the current template
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.History.TemplateHistoryModel.DynamicContentChanges">
            <summary>
            Gets or sets a list of changes done in the Dynamic Content of a template
            </summary>
        </member>
        <member name="M:Api.Modules.Templates.Models.History.TemplateHistoryModel.#ctor(System.Int32,System.Int32,System.DateTime,System.String)">
            <summary>
            Constructor for the Template History with all needed info
            </summary>
            <param name="id">The ID of the Template History</param>
            <param name="version">The version number of the Template History</param>
            <param name="changedOn">The time and date of when the template is changed</param>
            <param name="changedBy">The name of the user who has changed the template</param>
        </member>
        <member name="M:Api.Modules.Templates.Models.History.TemplateHistoryModel.GetDisplayChangedOn">
            <summary>
            Get the change date in a displayable format(DD-MM-YYYY om HH:MM:SS).
            </summary>
            <returns>A string containing a displayable date.</returns>
        </member>
        <member name="T:Api.Modules.Templates.Models.History.TemplateHistoryOverviewModel">
            <summary>
            A model class to create an overview for the history of templates
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.History.TemplateHistoryOverviewModel.TemplateId">
            <summary>
            The ID of the template of which the history must be gotten from.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.History.TemplateHistoryOverviewModel.PublishedEnvironment">
            <summary>
            The version numbers of the different environments the template can be published to.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.History.TemplateHistoryOverviewModel.TemplateHistory">
            <summary>
            The history of the template, this contains what has changed but also when and by who.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.History.TemplateHistoryOverviewModel.PublishHistory">
            <summary>
            The history of the publication of the template
            </summary>
        </member>
        <member name="T:Api.Modules.Templates.Models.Measurements.MeasurementSettings">
            <summary>
            A model with settings of how/where to measure render times of a template or component.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Measurements.MeasurementSettings.Id">
            <summary>
            Gets or sets the ID of the template or component.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Measurements.MeasurementSettings.MeasureRenderTimesOnDevelopmentForCurrent">
            <summary>
            Gets or sets whether to measure all render times of this template or component on the development environment.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Measurements.MeasurementSettings.MeasureRenderTimesOnDevelopmentForEverything">
            <summary>
            Gets or sets whether to measure all render times of all templates or components on the development environment.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Measurements.MeasurementSettings.MeasureRenderTimesOnDevelopment">
            <summary>
            Gets or sets whether to measure all render times of this template/component or for all templates/components on the development environment.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Measurements.MeasurementSettings.MeasureRenderTimesOnTestForCurrent">
            <summary>
            Gets or sets whether to measure all render times of this template or component on the test environment.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Measurements.MeasurementSettings.MeasureRenderTimesOnTestForEverything">
            <summary>
            Gets or sets whether to measure all render times of all templates or components on the test environment.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Measurements.MeasurementSettings.MeasureRenderTimesOnTest">
            <summary>
            Gets or sets whether to measure all render times of this template/component or for all templates/components on the test environment.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Measurements.MeasurementSettings.MeasureRenderTimesOnAcceptanceForCurrent">
            <summary>
            Gets or sets whether to measure all render times of this template or component on the acceptance environment.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Measurements.MeasurementSettings.MeasureRenderTimesOnAcceptanceForEverything">
            <summary>
            Gets or sets whether to measure all render times of all templates or components on the acceptance environment.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Measurements.MeasurementSettings.MeasureRenderTimesOnAcceptance">
            <summary>
            Gets or sets whether to measure all render times of this template/component or for all templates/components on the acceptance environment.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Measurements.MeasurementSettings.MeasureRenderTimesOnLiveForCurrent">
            <summary>
            Gets or sets whether to measure all render times of this template or component on the live environment.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Measurements.MeasurementSettings.MeasureRenderTimesOnLiveForEverything">
            <summary>
            Gets or sets whether to measure all render times of all templates or components on the live environment.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Measurements.MeasurementSettings.MeasureRenderTimesOnLive">
            <summary>
            Gets or sets whether to measure all render times of this template/component or for all templates/components on the live environment.
            </summary>
        </member>
        <member name="T:Api.Modules.Templates.Models.Measurements.RenderLogModel">
            <summary>
            A model that contains logging data of a single render of a template or component.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Measurements.RenderLogModel.Id">
            <summary>
            Gets or sets the ID of the template or component.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Measurements.RenderLogModel.Version">
            <summary>
            Gets or sets the version of the template or component.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Measurements.RenderLogModel.Url">
            <summary>
            Gets or sets the URL of the page that the template or component was rendered on.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Measurements.RenderLogModel.Environment">
            <summary>
            Gets or sets the environment that the template or component was rendered on.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Measurements.RenderLogModel.Start">
            <summary>
            Gets or sets the date and time that the rendering was started.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Measurements.RenderLogModel.End">
            <summary>
            Gets or sets the date and time that the rendering was finished.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Measurements.RenderLogModel.Date">
            <summary>
            Gets or sets the date (without time) that the component or template was rendered.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Measurements.RenderLogModel.TimeTakenInMilliseconds">
            <summary>
            Gets or sets the total time it took to render the template or component, in milliseconds.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Measurements.RenderLogModel.TimeTakenInSeconds">
            <summary>
            Gets the total time it took to render the template or component, in seconds.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Measurements.RenderLogModel.TimeTaken">
            <summary>
            Gets or sets the total time it took to render the template or component.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Measurements.RenderLogModel.TimeTakenFormatted">
            <summary>
            Gets the total time it took to render the template or component, formatted as mm:ss.fff.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Measurements.RenderLogModel.UserId">
            <summary>
            Gets or sets the ID of the user that was logged in when this template or component was rendered.
            This is 0 if no user was logged in.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Measurements.RenderLogModel.LanguageCode">
            <summary>
            Gets or sets the language code of the language that the user had selected on the website when the template or component was rendered.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Measurements.RenderLogModel.Error">
            <summary>
            Gets or sets any error that occurred while rendering the component.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Measurements.RenderLogModel.Name">
            <summary>
            Gets or sets the name of the template or component.
            </summary>
        </member>
        <member name="T:Api.Modules.Templates.Models.Other.PublishedEnvironmentModel">
            <summary>
            Model class to get the versions of the different environments that can be published to.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Other.PublishedEnvironmentModel.LiveVersion">
            <summary>
            Gets or sets the version number of the object running on the live environment
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Other.PublishedEnvironmentModel.AcceptVersion">
            <summary>
            Gets or sets the version number of the object running on the acceptance environment
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Other.PublishedEnvironmentModel.TestVersion">
            <summary>
            Gets or sets the version number of the object running on the test environment
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Other.PublishedEnvironmentModel.VersionList">
            <summary>
            Gets or sets a list of versions of the object.
            </summary>
        </member>
        <member name="T:Api.Modules.Templates.Models.Other.SearchResultModel">
            <summary>
            A model for returning template search results.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Other.SearchResultModel.Type">
            <summary>
            Gets or sets the template type (query, html, javascript etc).
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Other.SearchResultModel.ParentId">
            <summary>
            Gets or sets the parent directory of the template.
            </summary>
        </member>
        <member name="T:Api.Modules.Templates.Models.Preview.PreviewProfileDao">
            <summary>
            Data Access Object to get or set information about the PreviewProfile in the database
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Preview.PreviewProfileDao.Id">
            <summary>
            Gets or sets the ID of the PreviewProfile object
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Preview.PreviewProfileDao.Name">
            <summary>
            Gets or sets the name of the PreviewProfile object
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Preview.PreviewProfileDao.Url">
            <summary>
            Gets or sets the URL of the PreviewProfile object
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Preview.PreviewProfileDao.RawVariables">
            <summary>
            Gets or sets the raw variables of the PreviewProfile object
            </summary>
        </member>
        <member name="M:Api.Modules.Templates.Models.Preview.PreviewProfileDao.#ctor(System.Int32,System.String,System.String,System.String)">
            <summary>
            Constructor to make an PreviewProfileDAO object. This is the information that will be written to the database.
            </summary>
            <param name="id">the ID of the PreviewProfile object</param>
            <param name="name">the name of the PreviewProfile object</param>
            <param name="url">the URL of the PreviewProfile object</param>
            <param name="variables">the raw variables of the PreviewProfile object</param>
        </member>
        <member name="T:Api.Modules.Templates.Models.Preview.PreviewProfileModel">
            <summary>
            A model to store information about a preview for a template.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Preview.PreviewProfileModel.Id">
            <summary>
            Gets or sets the ID of the PreviewProfile object
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Preview.PreviewProfileModel.Name">
            <summary>
            Gets or sets the name of the PreviewProfile object
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Preview.PreviewProfileModel.Url">
            <summary>
            Gets or sets the URL of the PreviewProfile object
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Preview.PreviewProfileModel.Variables">
            <summary>
            Gets or sets a list of variables that can be added to a PreviewProfile object
            </summary>
        </member>
        <member name="T:Api.Modules.Templates.Models.Preview.PreviewVariableModel">
            <summary>
            A model to store information about a preview variable for a template or component.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Preview.PreviewVariableModel.Type">
            <summary>
            Gets or sets the type of variable in the PreviewVariable object
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Preview.PreviewVariableModel.Key">
            <summary>
            Gets or sets the key of the variable in the PreviewVariable object
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Preview.PreviewVariableModel.Value">
            <summary>
            Gets or sets the value of the variable in the PreviewVariable object
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Preview.PreviewVariableModel.Encrypt">
            <summary>
            Gets or sets a boolean of the variable is encrypted or not
            </summary>
        </member>
        <member name="T:Api.Modules.Templates.Models.TemplateEntityModel">
            <summary>
            A model for a template entity.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.TemplateEntityModel.Id">
            <summary>
            Gets and sets the ID.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.TemplateEntityModel.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.TemplateEntityModel.Subject">
            <summary>
            Gets or sets the subject for the mail.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.TemplateEntityModel.Content">
            <summary>
            Gets or sets the content.
            </summary>
        </member>
        <member name="T:Api.Modules.Templates.Models.Template.GenerateTemplatePreviewRequestModel">
            <summary>
            A model for a request to generate a preview of an HTML template.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.GenerateTemplatePreviewRequestModel.TemplateSettings">
            <summary>
            Gets or sets the template settings.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.GenerateTemplatePreviewRequestModel.Url">
            <summary>
            Gets or sets the URL to simulate.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.GenerateTemplatePreviewRequestModel.PreviewVariables">
            <summary>
            Gets or sets any extra variables for POST/session to simulate.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.GenerateTemplatePreviewRequestModel.Components">
            <summary>
            Gets or sets any components with settings that have not been saved to database yet.
            </summary>
        </member>
        <member name="T:Api.Modules.Templates.Models.Template.LinkedTemplateModel">
            <summary>
            A model to store information about a link between two templates.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.LinkedTemplateModel.TemplateId">
            <summary>
            Gets or sets the ID of the linked template
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.LinkedTemplateModel.TemplateName">
            <summary>
            Gets or sets the name of the linked template
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.LinkedTemplateModel.Path">
            <summary>
            Gets or sets the path of the linked template
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.LinkedTemplateModel.LinkType">
            <summary>
            Gets or sets the type of how the template is linked
            </summary>
        </member>
        <member name="T:Api.Modules.Templates.Models.Template.LinkedTemplatesModel">
            <summary>
            Model class 
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.LinkedTemplatesModel.LinkedScssTemplates">
            <summary>
            Gets or sets a list of linked SCSS templates in a Linked Templates object
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.LinkedTemplatesModel.LinkedCssTemplates">
            <summary>
            Gets or sets a list of linked CSS templates in a Linked Templates object
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.LinkedTemplatesModel.LinkedJavascript">
            <summary>
            Gets or sets a list of linked Javascript templates in a Linked Templates object
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.LinkedTemplatesModel.LinkOptionsTemplates">
            <summary>
            Gets or sets a list of linked Options templates in a Linked Templates object
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.LinkedTemplatesModel.RawLinkList">
            <summary>
            Gets or sets a raw link list in a Linked Templates object
            </summary>
        </member>
        <member name="T:Api.Modules.Templates.Models.Template.NewTemplateModel">
            <summary>
            Model class used while making a new template.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.NewTemplateModel.Name">
            <summary>
            Gets or sets the Name of the new template
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.NewTemplateModel.Type">
            <summary>
            Gets or sets the type of the new template
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.NewTemplateModel.EditorValue">
            <summary>
            Gets or sets the optional editorValue of the template, this can be used for importing files.
            </summary>
        </member>
        <member name="T:Api.Modules.Templates.Models.Template.PublishLogModel">
            <summary>
            Model class to keep track of the changes on the publish environments.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.PublishLogModel.Id">
            <summary>
            Gets or sets the ID of the PublishLog object
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.PublishLogModel.OldLive">
            <summary>
            The old version number of the version on the live environment
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.PublishLogModel.OldAccept">
            <summary>
            The old version number of the version on the acceptance environment
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.PublishLogModel.OldTest">
            <summary>
            The old version number of the version on the test environment
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.PublishLogModel.NewLive">
            <summary>
            The new version number of the version on the live environment
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.PublishLogModel.NewAccept">
            <summary>
            The new version number of the version on the acceptance environment
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.PublishLogModel.NewTest">
            <summary>
            The new version number of the version on the test environment
            </summary>
        </member>
        <member name="M:Api.Modules.Templates.Models.Template.PublishLogModel.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.Templates.Models.Template.PublishLogModel"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.Templates.Models.Template.PublishLogModel.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a PublishLogModel with all values set to a base. Will set the old environments as new values.
            </summary>
            <param name="id">The id of the template</param>
            <param name="oldLive">The version number of the current version on the Live environment.</param>
            <param name="oldAccept">The version number of the current version on the Accept environment.</param>
            <param name="oldTest">The version number of the current version on the Test environment.</param>
        </member>
        <member name="M:Api.Modules.Templates.Models.Template.PublishLogModel.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a publishLogModel with all values set.
            </summary>
            <param name="id">The id of the template</param>
            <param name="oldLive">The version number of the current version on the Live environment.</param>
            <param name="oldAccept">The version number of the current version on the Accept environment.</param>
            <param name="oldTest">The version number of the current version on the Test environment.</param>
            <param name="newLive">The version number that is being published on the Live environment.</param>
            <param name="newAccept">The version number that is being published on the Accept environment.</param>
            <param name="newTest">The version number that is being published on the Test environment.</param>
        </member>
        <member name="T:Api.Modules.Templates.Models.Template.TemplateSettingsModel">
            <summary>
            A model for all settings of a template.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.TemplateId">
            <summary>
            Gets or sets the ID of the template.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.ParentId">
            <summary>
            Gets or sets the ID of the parent.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.EditorValue">
            <summary>
            Gets or sets the content/value of the template.
            This is HTML, (S)CSS, javascript etc, depending on the template type.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.MinifiedValue">
            <summary>
            Gets or sets the minified value. Wiser minified (S)CSS and javascript when saving.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.Version">
            <summary>
            Gets or sets the version number of the template.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.ChangedOn">
            <summary>
            Gets or sets the date and time that the template was last changed.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.ChangedBy">
            <summary>
            Gets or sets the name of the user that last changed the template.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.Type">
            <summary>
            Gets or sets the template type, such as HTML, query, javascript etc.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.Ordering">
            <summary>
            Gets or sets the ordering number of the template.
            The templates will be loaded in this order (ascending) in the tree view.
            When loading multiple templates on a page of a website, they will also be loaded in this order.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.LinkedTemplates">
            <summary>
            Gets or sets the templates that are linked to this template. These are javascript or (S)CSS templates.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.PublishedEnvironments">
            <summary>
            Gets or sets which version of this template is deployed to which environment.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.UseCache">
            <summary>
            Gets or sets the cache mode to use.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.CacheMinutes">
            <summary>
            Gets or sets the amount of minutes the template should stay in cache. Only used if <see cref="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.UseCache"/> is NOT set to <see cref="F:GeeksCoreLibrary.Modules.Templates.Enums.TemplateCachingModes.NoCaching"/>.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.CacheLocation">
            <summary>
            Gets or sets the location of where the cache should be saved.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.CacheRegex">
            <summary>
            Gets or sets a regex to decide on which pages this template should be cached.
            The template will be cached separately for each named group in this regex. 
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.LoginRequired">
            <summary>
            Gets or sets whether or not users should be logged in on the website to be able to open the page that contains this template.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.LoginRoles">
            <summary>
            Gets or sets the role(s) users need to have to be able to see/use this page/template.
            This only does something if <see cref="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.LoginRequired"/> is set to <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.LoginRedirectUrl">
            <summary>
            Gets or sets the URL that users should be redirected to when they are not allowed to see/use this template,
            according to <see cref="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.LoginRequired"/> and <see cref="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.LoginRoles"/>.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.PreLoadQuery">
            <summary>
            Gets or sets a query that can be executed before every time this template is loaded.
            This can be a SELECT query that returns data, then that data can be used as replacements in the content of the template.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.ReturnNotFoundWhenPreLoadQueryHasNoData">
            <summary>
            Gets or sets whether to return an HTTP 404 result if the pre load query returns no results, when someone opens this template.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.IsDefaultHeader">
            <summary>
            Gets or sets whether this template is the default header.
            If a template is the default header, it will be loaded at the beginning of every page.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.IsDefaultFooter">
            <summary>
            Gets or sets whether this template is the default footer.
            If a template is the default footer, it will be loaded at the end of every page.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.DefaultHeaderFooterRegex">
            <summary>
            Gets or sets a regex that will be executed on the URL of each page to decide whether or not to load the header and footer on that page.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.IsPartial">
            <summary>
            Gets or sets whether this is a partial template. Partial templates will never load the header and footer templates
            and also not load any default CSS or javascript.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.WidgetContent">
            <summary>
            Gets or sets the contents for widgets that should be loaded on this template. This can be HTML, javascript or CSS.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.WidgetLocation">
            <summary>
            Gets or sets the location in which the widget should be loaded.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.InsertMode">
            <summary>
            Gets or sets how and where the javascript or CSS should be loaded on the page.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.LoadAlways">
            <summary>
            Gets or sets whether this javascript or (S)CSS template should be loaded on every page. 
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.UrlRegex">
            <summary>
            Gets or sets the URL regex to decide whether or not to load this javascript or (S)CSS template on a page.
            This is only used when <see cref="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.LoadAlways"/> is set to <see langword="true" />.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.ExternalFiles">
            <summary>
            Gets or sets any external javascript or CSS files that should be loaded.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.IsScssIncludeTemplate">
            <summary>
            Gets or sets whether this SCSS template is one that should be included before all other SCSS templates before compiling them.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.UseInWiserHtmlEditors">
            <summary>
            Gets or sets whether this (S)CSS template should be loaded in all HTML editors (including ContentBuilder and ContentBox) in Wiser.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.DisableMinifier">
            <summary>
            Gets or sets if Js files will be minified
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.GroupingCreateObjectInsteadOfArray">
            <summary>
            Gets or sets whether to create a single object for the results of this query template, instead of an array.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.GroupingPrefix">
            <summary>
            Gets or sets the prefix that should be used for grouping results into a sub object.
            All columns that are meant to be added in a sub object, should start with this prefix.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.GroupingKey">
            <summary>
            Gets or sets the key which needs to be grouped, if grouping is needed
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.GroupingKeyColumnName">
            <summary>
            Gets or sets the column in the query which contains the key for the object.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.GroupingValueColumnName">
            <summary>
            Gets or sets the column in the query that contains the value for the object.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.RoutineType">
            <summary>
            Gets or sets the routine type for the template.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.RoutineParameters">
            <summary>
            Gets or sets the parameters of the routine
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.RoutineReturnType">
            <summary>
            Gets or sets the return type of the routine
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.TriggerTableName">
            <summary>
            Gets or sets the name of the table of which has a trigger
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.TriggerTiming">
            <summary>
            Gets or sets if the trigger must happen before or after an action
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateSettingsModel.TriggerEvent">
            <summary>
            Gets or sets on which event the trigger needs to happen.
            </summary>
        </member>
        <member name="T:Api.Modules.Templates.Models.Template.TemplateTreeViewDao">
            <summary>
            Data Access Object with information about templates which are shown in a tree view to be written to the database 
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateTreeViewDao.TemplateId">
            <summary>
            Gets or sets the ID of the Template
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateTreeViewDao.TemplateName">
            <summary>
            Gets or sets the Name of the Template
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateTreeViewDao.TemplateType">
            <summary>
            Gets or sets the Type of the Template
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateTreeViewDao.ParentId">
            <summary>
            Gets or sets the ID of the higher up template in the treeview
            This is an optional value as an template can also be the highest element in the tree view.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateTreeViewDao.HasChildren">
            <summary>
            Gets or sets if the templates has underlying templates aka children
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateTreeViewDao.IsVirtualItem">
            <summary>
            Whether the tree view item was not retrieved from the templates data.
            The <see cref="P:Api.Modules.Templates.Models.Template.TemplateTreeViewDao.TemplateType"/> property should identify where this item was retrieved from instead.
            </summary>
            <remarks>
            This is typically meant for views, routines, and triggers that were retrieved from the database.
            </remarks>
        </member>
        <member name="T:Api.Modules.Templates.Models.Template.TemplateTreeViewModel">
            <summary>
            Model class that contains all information needed to create a tree view of templates.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateTreeViewModel.TemplateId">
            <summary>
            Gets or sets the ID of the Template
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateTreeViewModel.TemplateName">
            <summary>
            Gets or sets the name of the Template
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateTreeViewModel.IsFolder">
            <summary>
            Gets or sets whether a Template is a folder or not.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateTreeViewModel.HasChildren">
            <summary>
            Gets or sets if the template has any children or not.
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateTreeViewModel.CollapsedSpriteCssClass">
            <summary>
            Gets or sets the CSS class (for example the folder) which is collapsed
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateTreeViewModel.ExpandedSpriteCssClass">
            <summary>
            Gets or sets the CSS class (for example the folder) which is expanded
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateTreeViewModel.SpriteCssClass">
            <summary>
            Gets or sets the base CSS class (for example the folder) 
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateTreeViewModel.TemplateSettings">
            <summary>
            Gets or sets the settings for the Template
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateTreeViewModel.ChildNodes">
            <summary>
            Gets or sets a list of all child nodes this template contains
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateTreeViewModel.TemplateType">
            <summary>
            Gets or sets the type of the template
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateTreeViewModel.IsVirtualItem">
            <summary>
            Whether the tree view item was not retrieved from the templates data.
            The <see cref="P:Api.Modules.Templates.Models.Template.TemplateTreeViewModel.TemplateType"/> property should identify where this item was retrieved from instead.
            </summary>
            <remarks>
            This is typically meant for views, routines, and triggers that were retrieved from the database.
            </remarks>
        </member>
        <member name="T:Api.Modules.Templates.Models.Template.TemplateTreeViewRootModel">
            <summary>
            Model class which contains information about the highest template in the tree view
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateTreeViewRootModel.TemplateId">
            <summary>
            Gets or sets the ID of the Template
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateTreeViewRootModel.TemplateName">
            <summary>
            Gets or sets the name of the Template
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateTreeViewRootModel.TemplateType">
            <summary>
            Gets or sets the type of the Template
            </summary>
        </member>
        <member name="P:Api.Modules.Templates.Models.Template.TemplateTreeViewRootModel.ChildNodes">
            <summary>
            Gets or sets a list of all underlying templates in the tree view
            </summary>
        </member>
        <member name="M:Api.Modules.Templates.Models.Template.TemplateTreeViewRootModel.#ctor(System.Int32,System.String,System.Int32)">
            <summary>
            Constructor for a template treeview without the childnodes.
            </summary>
            <param name="templateId">The ID of the Template</param>
            <param name="templateName">The name of the Template</param>
            <param name="templateType">The type of the Template</param>
        </member>
        <member name="M:Api.Modules.Templates.Models.Template.TemplateTreeViewRootModel.#ctor(System.Int32,System.String,System.Int32,System.Collections.Generic.List{Api.Modules.Templates.Models.Template.TemplateTreeViewModel})">
            <summary>
            Constructor for a template treeview with the childnodes.
            </summary>
            <param name="templateId">The ID of the Template</param>
            <param name="templateName">The name of the Template</param>
            <param name="templateType">The type of the Template</param>
            <param name="childNodes">A list of all underlying templates in the tree view</param>
        </member>
        <member name="T:Api.Modules.Templates.Services.CachedTemplatesService">
            <inheritdoc cref="T:Api.Modules.Templates.Interfaces.ITemplatesService" />
        </member>
        <member name="M:Api.Modules.Templates.Services.CachedTemplatesService.#ctor(LazyCache.IAppCache,Api.Modules.Templates.Interfaces.ITemplatesService,Microsoft.Extensions.Options.IOptions{GeeksCoreLibrary.Core.Models.GclSettings},GeeksCoreLibrary.Core.Interfaces.ICacheService,GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.Templates.Services.CachedTemplatesService"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.Templates.Services.CachedTemplatesService.Get(System.Int32,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.CachedTemplatesService.GetQueryAsync(System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.CachedTemplatesService.GetAndExecuteQueryAsync(System.Security.Claims.ClaimsIdentity,System.String,Microsoft.AspNetCore.Http.IFormCollection)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.CachedTemplatesService.GetCssForHtmlEditorsAsync(System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.CachedTemplatesService.GetTemplateByNameAsync(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.CachedTemplatesService.GetTemplateMetaDataAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.CachedTemplatesService.GetTemplateSettingsAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.Nullable{GeeksCoreLibrary.Core.Enums.Environments})">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.CachedTemplatesService.GetTemplateEnvironmentsAsync(System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.CachedTemplatesService.GetLinkedTemplatesAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.CachedTemplatesService.GetLinkedDynamicContentAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.CachedTemplatesService.PublishToEnvironmentAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.Int32,GeeksCoreLibrary.Core.Enums.Environments,Api.Modules.Templates.Models.Other.PublishedEnvironmentModel,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.CachedTemplatesService.SaveTemplateVersionAsync(System.Security.Claims.ClaimsIdentity,Api.Modules.Templates.Models.Template.TemplateSettingsModel,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.CachedTemplatesService.GetTreeViewSectionAsync(System.Security.Claims.ClaimsIdentity,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.CachedTemplatesService.SearchAsync(System.Security.Claims.ClaimsIdentity,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.CachedTemplatesService.GetTemplateHistoryAsync(System.Security.Claims.ClaimsIdentity,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.CachedTemplatesService.CreateAsync(System.Security.Claims.ClaimsIdentity,System.String,System.Int32,GeeksCoreLibrary.Modules.Templates.Enums.TemplateTypes,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.CachedTemplatesService.RenameAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.CachedTemplatesService.MoveAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.Int32,Api.Modules.Kendo.Enums.TreeViewDropPositions)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.CachedTemplatesService.GetEntireTreeViewStructureAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.String,System.Nullable{GeeksCoreLibrary.Core.Enums.Environments})">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.CachedTemplatesService.DeleteAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.CachedTemplatesService.GeneratePreviewAsync(System.Security.Claims.ClaimsIdentity,System.Int32,Api.Modules.Templates.Models.Template.GenerateTemplatePreviewRequestModel)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.CachedTemplatesService.GeneratePreviewAsync(System.Security.Claims.ClaimsIdentity,Api.Modules.Templates.Models.Template.GenerateTemplatePreviewRequestModel)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.CachedTemplatesService.CheckDefaultHeaderConflict(System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.CachedTemplatesService.CheckDefaultFooterConflict(System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.CachedTemplatesService.GetVirtualTemplateAsync(System.String,GeeksCoreLibrary.Modules.Templates.Enums.TemplateTypes)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.CachedTemplatesService.GetTableNamesForTriggerTemplatesAsync">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.CachedTemplatesService.DeployToBranchAsync(System.Security.Claims.ClaimsIdentity,System.Collections.Generic.List{System.Int32},System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.CachedTemplatesService.GetMeasurementSettingsAsync(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.CachedTemplatesService.SaveMeasurementSettingsAsync(Api.Modules.Templates.Models.Measurements.MeasurementSettings,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.CachedTemplatesService.GetRenderLogsAsync(System.Int32,System.Int32,System.String,System.Nullable{GeeksCoreLibrary.Core.Enums.Environments},System.UInt64,System.String,System.Int32,System.Int32,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.Templates.Services.DataLayer.DynamicContentDataService">
            <inheritdoc cref="T:Api.Modules.Templates.Interfaces.DataLayer.IDynamicContentDataService" />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.DynamicContentDataService.#ctor(GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.Templates.Services.DataLayer.DynamicContentDataService"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.DynamicContentDataService.GetLinkableDynamicContentAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.DynamicContentDataService.GetVersionDataAsync(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.DynamicContentDataService.GetComponentDataAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.DynamicContentDataService.SaveSettingsStringAsync(System.Int32,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.DynamicContentDataService.GetComponentAndModeFromContentIdAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.DynamicContentDataService.GetMetaDataAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.DynamicContentDataService.AddLinkToTemplateAsync(System.Int32,System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.DynamicContentDataService.GetPublishedEnvironmentsAsync(System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.DynamicContentDataService.UpdatePublishedEnvironmentAsync(System.Int32,System.Int32,GeeksCoreLibrary.Core.Enums.Environments,Api.Modules.Templates.Models.Template.PublishLogModel,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.DynamicContentDataService.DuplicateAsync(System.Int32,System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.DynamicContentDataService.DeleteAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.DynamicContentDataService.DeployToBranchAsync(System.Collections.Generic.List{System.Int32},System.String)">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.Templates.Services.DataLayer.HistoryDataService">
            <inheritdoc cref="T:Api.Modules.Templates.Interfaces.DataLayer.IHistoryDataService" />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.HistoryDataService.#ctor(GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.Templates.Services.DataLayer.HistoryDataService"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.HistoryDataService.GetDynamicContentHistoryAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.HistoryDataService.GetPublishedEnvironmentsFromDynamicContentAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.HistoryDataService.GetTemplateHistoryAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.HistoryDataService.GetPublishHistoryFromTemplateAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.Templates.Services.DataLayer.MeasurementsDataService">
            <inheritdoc cref="T:Api.Modules.Templates.Interfaces.DataLayer.IMeasurementsDataService" />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.MeasurementsDataService.#ctor(GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.Templates.Services.DataLayer.MeasurementsDataService"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.MeasurementsDataService.GetRenderLogsAsync(System.Int32,System.Int32,System.Int32,System.String,System.Nullable{GeeksCoreLibrary.Core.Enums.Environments},System.UInt64,System.String,System.Int32,System.Int32,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.Templates.Services.DataLayer.PreviewDataService">
            <inheritdoc cref="T:Api.Modules.Templates.Interfaces.DataLayer.IPreviewDataService" />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.PreviewDataService.#ctor(GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.Templates.Services.DataLayer.PreviewDataService"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.PreviewDataService.GetAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.PreviewDataService.CreateAsync(Api.Modules.Templates.Models.Preview.PreviewProfileDao,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.PreviewDataService.UpdateAsync(Api.Modules.Templates.Models.Preview.PreviewProfileDao,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.PreviewDataService.DeleteAsync(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.Templates.Services.DataLayer.TemplateDataService">
            <inheritdoc cref="T:Api.Modules.Templates.Interfaces.DataLayer.ITemplateDataService" />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.TemplateDataService.#ctor(GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.Templates.Services.DataLayer.TemplateDataService"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.TemplateDataService.GetMetaDataAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.TemplateDataService.GetDataAsync(System.Int32,System.Nullable{GeeksCoreLibrary.Core.Enums.Environments},System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.TemplateDataService.GetPublishedEnvironmentsAsync(System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.TemplateDataService.UpdatePublishedEnvironmentAsync(System.Int32,System.Int32,GeeksCoreLibrary.Core.Enums.Environments,Api.Modules.Templates.Models.Template.PublishLogModel,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.TemplateDataService.GetLinkedTemplatesAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.TemplateDataService.GetTemplatesAvailableForLinkingAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.TemplateDataService.GetLinkedDynamicContentAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.TemplateDataService.SaveAsync(Api.Modules.Templates.Models.Template.TemplateSettingsModel,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.TemplateDataService.GetTreeViewSectionAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.TemplateDataService.SearchAsync(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.TemplateDataService.CreateAsync(System.String,System.Int32,GeeksCoreLibrary.Modules.Templates.Enums.TemplateTypes,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.TemplateDataService.FixTreeViewOrderingAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.TemplateDataService.GetParentAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.TemplateDataService.GetOrderingAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.TemplateDataService.GetHighestOrderNumberOfChildrenAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.TemplateDataService.MoveAsync(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Api.Modules.Kendo.Enums.TreeViewDropPositions,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.TemplateDataService.GetScssIncludesForScssTemplateAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.TemplateDataService.GetScssTemplatesThatAreNotIncludesAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.TemplateDataService.DeleteAsync(System.Int32,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.TemplateDataService.DecryptEditorValueIfEncrypted(System.String,Api.Modules.Templates.Models.Template.TemplateSettingsModel)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.TemplateDataService.DeployToBranchAsync(System.Collections.Generic.List{System.Int32},System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.TemplateDataService.GetViewsAsTreeViewItemsAsync(System.Int32,System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Retrieves database views that are not managed via the templates module yet, and returns them as <see cref="T:Api.Modules.Templates.Models.Template.TemplateTreeViewDao"/> items.
            </summary>
            <param name="parentId">The template ID of the root that normally contains the views.</param>
            <param name="exclusions">The names of views that should be excluded.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Api.Modules.Templates.Models.Template.TemplateTreeViewDao"/> items.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.TemplateDataService.GetRoutinesAsTreeViewItemsAsync(System.Int32,System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Retrieves database routines that are not managed via the templates module yet, and returns them as <see cref="T:Api.Modules.Templates.Models.Template.TemplateTreeViewDao"/> items.
            </summary>
            <param name="parentId">The template ID of the root that normally contains the routines.</param>
            <param name="exclusions">The names of routines that should be excluded.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Api.Modules.Templates.Models.Template.TemplateTreeViewDao"/> items.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Services.DataLayer.TemplateDataService.GetTriggersAsTreeViewItemsAsync(System.Int32,System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Retrieves database triggers that are not managed via the templates module yet, and returns them as <see cref="T:Api.Modules.Templates.Models.Template.TemplateTreeViewDao"/> items.
            </summary>
            <param name="parentId">The template ID of the root that normally contains the triggers.</param>
            <param name="exclusions">The names of triggers that should be excluded.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Api.Modules.Templates.Models.Template.TemplateTreeViewDao"/> items.</returns>
        </member>
        <member name="T:Api.Modules.Templates.Services.DynamicContentService">
            <inheritdoc cref="T:Api.Modules.Templates.Interfaces.IDynamicContentService" />
        </member>
        <member name="M:Api.Modules.Templates.Services.DynamicContentService.#ctor(Api.Modules.Templates.Interfaces.DataLayer.IDynamicContentDataService,Api.Modules.Templates.Interfaces.IHistoryService,Api.Modules.Branches.Interfaces.IBranchesService,Api.Modules.Customers.Interfaces.IWiserCustomersService)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.Templates.Services.DynamicContentService"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.Templates.Services.DynamicContentService.GetComponentModes(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DynamicContentService.GetComponentModes(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DynamicContentService.GetPropertiesOfType(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DynamicContentService.GetComponentDataAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DynamicContentService.SaveNewSettingsAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.String,System.Int32,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DynamicContentService.GetMetaDataAsync(System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DynamicContentService.AddLinkToTemplateAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DynamicContentService.GetEnvironmentsAsync(System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DynamicContentService.PublishToEnvironmentAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.Int32,GeeksCoreLibrary.Core.Enums.Environments,Api.Modules.Templates.Models.Other.PublishedEnvironmentModel,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DynamicContentService.DuplicateAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DynamicContentService.DeleteAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DynamicContentService.GetLinkableDynamicContentAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.DynamicContentService.DeployToBranchAsync(System.Security.Claims.ClaimsIdentity,System.Collections.Generic.List{System.Int32},System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.Templates.Services.HistoryService">
            <inheritdoc cref="T:Api.Modules.Templates.Interfaces.IHistoryService" />
        </member>
        <member name="M:Api.Modules.Templates.Services.HistoryService.#ctor(Api.Modules.Templates.Interfaces.DataLayer.IDynamicContentDataService,Api.Modules.Templates.Interfaces.DataLayer.IHistoryDataService,Api.Modules.Customers.Interfaces.IWiserCustomersService,Api.Modules.Templates.Interfaces.DataLayer.ITemplateDataService)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.Templates.Services.HistoryService"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.Templates.Services.HistoryService.GetChangesInComponentAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.HistoryService.RevertChangesAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.Collections.Generic.List{Api.Modules.Templates.Models.History.RevertHistoryModel})">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.HistoryService.GetPublishedEnvironmentsOfOverviewModels(System.Collections.Generic.List{Api.Modules.Templates.Models.DynamicContent.DynamicContentOverviewModel})">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.HistoryService.GetHistoryVersionsOfDynamicContent(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.HistoryService.GetVersionHistoryFromTemplate(System.Security.Claims.ClaimsIdentity,System.Int32,System.Collections.Generic.Dictionary{Api.Modules.Templates.Models.DynamicContent.DynamicContentOverviewModel,System.Collections.Generic.List{Api.Modules.Templates.Models.History.HistoryVersionModel}})">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.HistoryService.GetPublishHistoryFromTemplate(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.HistoryService.GenerateHistoryModelForTemplates(Api.Modules.Templates.Models.Template.TemplateSettingsModel,Api.Modules.Templates.Models.Template.TemplateSettingsModel)">
            <summary>
            Compares the standardised settings of a template and generate a TemplateHistoryModel containing the changes made between versions. This will also take changes to linked templates into account.
            </summary>
            <param name="newVersion">A <see cref="T:Api.Modules.Templates.Models.Template.TemplateSettingsModel"/> of the new version</param>
            <param name="oldVersion">A <see cref="T:Api.Modules.Templates.Models.Template.TemplateSettingsModel"/> of the old version</param>
            <returns>A TemplateHistoryModel containing the changes that have been made between the oldversion and the new version</returns>
        </member>
        <member name="M:Api.Modules.Templates.Services.HistoryService.CheckIfValuesMatchAndSaveChangesToHistoryModel(System.String,System.Object,System.Object,Api.Modules.Templates.Models.History.TemplateHistoryModel)">
            <summary>
            Compares 2 values of a property and saves differences to a TemplateHistoryModel.
            </summary>
            <param name="propName">The name of the property that is compared</param>
            <param name="newValue">The new value of the property</param>
            <param name="oldValue">The old value of the property</param>
            <param name="templateModel">The TemplateHistoryModel to which differences will be saved</param>
        </member>
        <member name="M:Api.Modules.Templates.Services.HistoryService.GetHistoryOfComponent(System.Int32)">
            <summary>
            Get the raw list of versions of the component. These historymodels have a rawdatastring and no generated changes.
            </summary>
            <param name="templateId">The id of the content to retrieve the versions of.</param>
            <returns>List of HistoryVersionModels forming</returns>
        </member>
        <member name="M:Api.Modules.Templates.Services.HistoryService.GenerateChangeLogFromDataStrings(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Generates the changes between 2 versions. This will loop through the versions and will take the settings that have changed to add them to a versions changes.
            </summary>
            <param name="newMode">The mode of the new version</param>
            <param name="newVersion">The raw datastring of the newer version</param>
            <param name="oldMode">The mode of the old version</param>
            <param name="oldVersion">The raw datastring of the older version</param>
            <param name="newComponent">The component of the new version</param>
            <param name="oldComponent">the component of the old version</param>
            <returns>List of changes that can be added to the changes of the newer versions HistoryVersionModel.</returns>
        </member>
        <member name="T:Api.Modules.Templates.Services.PreviewService">
            <inheritdoc cref="T:Api.Modules.Templates.Interfaces.IPreviewService" />
        </member>
        <member name="M:Api.Modules.Templates.Services.PreviewService.#ctor(Api.Modules.Templates.Interfaces.DataLayer.IPreviewDataService)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.Templates.Services.PreviewService"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.Templates.Services.PreviewService.GetAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.PreviewService.CreateAsync(Api.Modules.Templates.Models.Preview.PreviewProfileModel,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.PreviewService.UpdateAsync(Api.Modules.Templates.Models.Preview.PreviewProfileModel,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.PreviewService.DeleteAsync(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.Templates.Services.TemplatesService">
            <inheritdoc cref="T:Api.Modules.Templates.Interfaces.ITemplatesService" />
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor,Api.Modules.Customers.Interfaces.IWiserCustomersService,GeeksCoreLibrary.Modules.GclReplacements.Interfaces.IStringReplacementsService,GeeksCoreLibrary.Modules.Templates.Interfaces.ITemplatesService,GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection,Api.Core.Interfaces.IApiReplacementsService,Api.Modules.Templates.Interfaces.DataLayer.ITemplateDataService,Api.Modules.Templates.Interfaces.IHistoryService,GeeksCoreLibrary.Core.Interfaces.IWiserItemsService,GeeksCoreLibrary.Modules.Templates.Interfaces.IPagesService,Microsoft.AspNetCore.Mvc.Razor.IRazorViewEngine,Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataProvider,GeeksCoreLibrary.Modules.Objects.Interfaces.IObjectsService,GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseHelpersService,Microsoft.Extensions.Logging.ILogger{Api.Modules.Templates.Services.TemplatesService},Microsoft.Extensions.Options.IOptions{GeeksCoreLibrary.Core.Models.GclSettings},Microsoft.Extensions.Options.IOptions{Api.Core.Models.ApiSettings},Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Api.Modules.Branches.Interfaces.IBranchesService,Api.Modules.Templates.Interfaces.DataLayer.IMeasurementsDataService)">
            <summary>
            Creates a new instance of TemplatesService.
            </summary>
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.Get(System.Int32,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.GetQueryAsync(System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.GetAndExecuteQueryAsync(System.Security.Claims.ClaimsIdentity,System.String,Microsoft.AspNetCore.Http.IFormCollection)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.GetCssForHtmlEditorsAsync(System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.TryGetTemplateQuery(System.String,System.String@,System.String@,System.Boolean@,System.String@,System.String@)">
            <summary>
            Return the query-string as it was formally stored in the database. These strings are now hardcoded.
            Settings are also hardcoded now.
            </summary>
            <param name="templateName"></param>
            <param name="groupingCreateObjectInsteadOfArray"></param>
            <param name="groupingKey"></param>
            <param name="groupingPrefix"></param>
            <param name="groupingKeyColumnName"></param>
            <param name="groupingValueColumnName"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.InitTemplateQueries">
            <summary>
            Hardcode query-strings that before where stored in the database.
            </summary>
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.GetTemplateByNameAsync(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.GetTemplateEnvironmentsAsync(System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.GetLinkedTemplatesAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.GetLinkedDynamicContentAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.GetTemplateMetaDataAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.GetTemplateSettingsAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.Nullable{GeeksCoreLibrary.Core.Enums.Environments})">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.PublishToEnvironmentAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.Int32,GeeksCoreLibrary.Core.Enums.Environments,Api.Modules.Templates.Models.Other.PublishedEnvironmentModel,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.SaveTemplateVersionAsync(System.Security.Claims.ClaimsIdentity,Api.Modules.Templates.Models.Template.TemplateSettingsModel,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.GetTreeViewSectionAsync(System.Security.Claims.ClaimsIdentity,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.SearchAsync(System.Security.Claims.ClaimsIdentity,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.GetTemplateHistoryAsync(System.Security.Claims.ClaimsIdentity,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.CreateAsync(System.Security.Claims.ClaimsIdentity,System.String,System.Int32,GeeksCoreLibrary.Modules.Templates.Enums.TemplateTypes,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.RenameAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.MoveAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.Int32,Api.Modules.Kendo.Enums.TreeViewDropPositions)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.GetEntireTreeViewStructureAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.String,System.Nullable{GeeksCoreLibrary.Core.Enums.Environments})">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.DeleteAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.GeneratePreviewAsync(System.Security.Claims.ClaimsIdentity,System.Int32,Api.Modules.Templates.Models.Template.GenerateTemplatePreviewRequestModel)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.GeneratePreviewAsync(System.Security.Claims.ClaimsIdentity,Api.Modules.Templates.Models.Template.GenerateTemplatePreviewRequestModel)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.CheckDefaultHeaderConflict(System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.CheckDefaultFooterConflict(System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.GetVirtualTemplateAsync(System.String,GeeksCoreLibrary.Modules.Templates.Enums.TemplateTypes)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.GetTableNamesForTriggerTemplatesAsync">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.InternalCheckDefaultHeaderOrFooterConflict(System.String,System.Int32,System.String)">
            <summary>
            The function used by <see cref="M:Api.Modules.Templates.Services.TemplatesService.CheckDefaultHeaderConflict(System.Int32,System.String)"/> and <see cref="M:Api.Modules.Templates.Services.TemplatesService.CheckDefaultFooterConflict(System.Int32,System.String)"/>.
            </summary>
            <param name="type">The type to check. It should be either 'header' or 'footer'.</param>
            <param name="templateId">ID of the current template.</param>
            <param name="regexString">The regex to be used in the check.</param>
            <returns>A string with the name of the template that this template conflicts with, or an empty string if there's no conflict.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When <paramref name="type"/> is <see langword="null"/> or does not equal to either "header" or "footer".</exception>
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.ConvertLegacyTemplatesToNewTemplates">
            <summary>
            Converts Wiser 1 templates to the Wiser 3 format.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.DeployToBranchAsync(System.Security.Claims.ClaimsIdentity,System.Collections.Generic.List{System.Int32},System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.GetMeasurementSettingsAsync(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.SaveMeasurementSettingsAsync(Api.Modules.Templates.Models.Measurements.MeasurementSettings,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.GetRenderLogsAsync(System.Int32,System.Int32,System.String,System.Nullable{GeeksCoreLibrary.Core.Enums.Environments},System.UInt64,System.String,System.Int32,System.Int32,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.LinkedDynamicContentToDynamicContentOverview(Api.Modules.Templates.Models.DynamicContent.LinkedDynamicContentDao)">
            <summary>
            Convert LinkedDynamicContentDAO to a DynamicContentOverviewModel.
            </summary>
            <param name="linkedContent">The LinkedDynamicContentDAO that should be converted.</param>
            <returns>A DynamicContentOverviewModel of the linked content given as param.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.AddMainDomainToUrl(System.String,System.String)">
            <summary>
            Adds the main domain to an url (for CSS/javascript).
            </summary>
            <param name="input"></param>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.SetupGclForPreviewAsync(System.Security.Claims.ClaimsIdentity,Api.Modules.Templates.Models.Template.GenerateTemplatePreviewRequestModel)">
            <summary>
            Sets URL and variables in http context, so the GCL can use them for replacements and settings and such while generating a preview for a template and/or dynamic content.
            </summary>
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.GetDatabaseViewDataAsync(System.String)">
            <summary>
            Retrieves data about a view from the database.
            </summary>
            <param name="viewName">The name of the view.</param>
            <returns>A <see cref="T:Api.Modules.Templates.Models.Template.TemplateSettingsModel"/> object containing the data of the view.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.GetDatabaseRoutineDataAsync(System.String)">
            <summary>
            Retrieves data about a routine from the database (function or stored procedure).
            </summary>
            <param name="routineName">The name of the routine.</param>
            <returns>A <see cref="T:Api.Modules.Templates.Models.Template.TemplateSettingsModel"/> object containing the data of the routine.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.CreateOrReplaceDatabaseViewAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Will attempt to create a VIEW in the client's database.
            </summary>
            <param name="viewName">The name of the template, which will server as the name of the view.</param>
            <param name="viewDefinition">The select statement of the view.</param>
            <param name="databaseSchema">The database schema in which to create/replace the view.</param>
            <param name="oldViewName">Optional: The old name of the view when the view is being renamed.</param>
            <returns><see langword="true"/> if the view was successfully created; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.CreateOrReplaceDatabaseRoutineAsync(System.String,GeeksCoreLibrary.Modules.Templates.Enums.RoutineTypes,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Will attempt to create a FUNCTION or PROCEDURE in the client's database.
            </summary>
            <param name="routineName">The name of the template, which will serve as the name of the routine.</param>
            <param name="routineType">The type of the routine, which should be either <see cref="F:GeeksCoreLibrary.Modules.Templates.Enums.RoutineTypes.Function"/> or <see cref="F:GeeksCoreLibrary.Modules.Templates.Enums.RoutineTypes.Procedure"/>.</param>
            <param name="parameters">A string that represent the input parameters. For procedures, OUT and INOUT parameters can also be defined.</param>
            <param name="returnType">The data type that is expected. This is only if <paramref name="routineType"/> is set to <see cref="F:GeeksCoreLibrary.Modules.Templates.Enums.RoutineTypes.Function"/>.</param>
            <param name="routineDefinition">The body of the routine.</param>
            <param name="databaseSchema">The database schema in which to create/replace the routine.</param>
            <param name="oldRoutineName">Optional: The old name of the routine when the routing is being renamed.</param>
            <returns><see langword="true"/> if the routine was successfully created; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.CreateOrReplaceDatabaseTriggerAsync(System.String,GeeksCoreLibrary.Modules.Templates.Enums.TriggerTimings,GeeksCoreLibrary.Modules.Templates.Enums.TriggerEvents,System.String,System.String,System.String,System.String)">
            <summary>
            Will attempt to create a TRIGGER in the client's database.
            </summary>
            <param name="triggerName">The name of the template, which will serve as the name of the trigger.</param>
            <param name="triggerTiming">The timing of the trigger, which should be either <see cref="F:GeeksCoreLibrary.Modules.Templates.Enums.TriggerTimings.After"/> or <see cref="F:GeeksCoreLibrary.Modules.Templates.Enums.TriggerTimings.Before"/>.</param>
            <param name="triggerEvent">The event of the trigger, which should be either <see cref="F:GeeksCoreLibrary.Modules.Templates.Enums.TriggerEvents.Insert"/>, <see cref="F:GeeksCoreLibrary.Modules.Templates.Enums.TriggerEvents.Update"/>, or  <see cref="F:GeeksCoreLibrary.Modules.Templates.Enums.TriggerEvents.Delete"/>.</param>
            <param name="tableName">The name of the table that the trigger is for.</param>
            <param name="triggerDefinition">The body of the trigger.</param>
            <param name="databaseSchema">The database schema in which to create/replace the trigger.</param>
            <param name="oldTriggerName">Optional: The old name of the trigger when the trigger is being renamed.</param>
            <returns><see langword="true"/> if the trigger was successfully created; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Api.Modules.Templates.Services.TemplatesService.MinifyJavaScriptWithTerserAsync(System.String)">
            <summary>
            Will attempt to minify JavaScript with a NodeJS package called terser.
            </summary>
            <param name="script">The raw JavaScript that will be minified.</param>
            <returns>A <see cref="T:System.ValueTuple"/> with the first value being whether the minification was successful, and the minified script.</returns>
        </member>
        <member name="T:Api.Modules.VersionControl.Controllers.VersionControlController">
            <summary>
            Controller for getting or doing things with templates and dynamic content from the version control module in Wiser.
            </summary>
        </member>
        <member name="M:Api.Modules.VersionControl.Controllers.VersionControlController.#ctor(Api.Modules.VersionControl.Interfaces.ICommitService,Api.Modules.VersionControl.Interfaces.IVersionControlService,Api.Modules.VersionControl.Interfaces.IReviewService)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.VersionControl.Controllers.VersionControlController"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.VersionControl.Controllers.VersionControlController.GetTemplatesToCommitAsync(Api.Modules.VersionControl.Models.CommitModel)">
            <summary>
            Get all templates that have uncommitted changes.
            </summary>
        </member>
        <member name="M:Api.Modules.VersionControl.Controllers.VersionControlController.GetDynamicContentInTemplate">
            <summary>
            Get all dynamic content that have uncommitted changes.
            </summary>
        </member>
        <member name="M:Api.Modules.VersionControl.Controllers.VersionControlController.CreateAndOrDeployCommitAsync(Api.Modules.VersionControl.Models.CommitModel)">
            <summary>
            Creates new commit item in the database and deploys the selected templates and contents to the selected environment, or gets an existing commit and deploy that to another environment.
            </summary>
            <param name="data">The data of the commit. The ID property should be 0 for creating a new commit, or contain a value for deploying an existing commit.</param>
            <returns>Returns a model of the commit.</returns>
        </member>
        <member name="M:Api.Modules.VersionControl.Controllers.VersionControlController.DeployCommitsAsync(Api.Modules.VersionControl.Models.DeployCommitsRequestModel)">
            <summary>
            Deploys one or more commits to an environment.
            </summary>
            <param name="data">The environment and commit IDs.</param>
        </member>
        <member name="M:Api.Modules.VersionControl.Controllers.VersionControlController.GetNotCompletedCommitsAsync">
            <summary>
            Get all commits that haven't been completed yet,
            </summary>
            <returns>A list of <see cref="T:Api.Modules.VersionControl.Models.CommitModel"/>.</returns>
        </member>
        <member name="M:Api.Modules.VersionControl.Controllers.VersionControlController.GetCompletedCommitsAsync">
            <summary>
            Get all commits that haven't been completed yet,
            </summary>
            <returns>A list of <see cref="T:Api.Modules.VersionControl.Models.CommitModel"/>.</returns>
        </member>
        <member name="M:Api.Modules.VersionControl.Controllers.VersionControlController.DeployToBranchAsync(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Deploy one or more commits to a branch.
            </summary>
            <param name="branchId">The ID of the branch to deploy to.</param>
            <param name="commitIds">The IDs of the commits to deploy.</param>
        </member>
        <member name="M:Api.Modules.VersionControl.Controllers.VersionControlController.GetReviewsAsync(System.Boolean,System.Boolean)">
            <summary>
            Gets all reviews.
            </summary>
            <param name="hideApprovedReviews">Optional: Whether to only get reviews that haven't been approved yet. Default is true.</param>
            <param name="getReviewsForCurrentUserOnly">Optional: Whether to only get reviews that have been assigned to the current user.</param>
            <returns>A list with all (not approved) reviews.</returns>
        </member>
        <member name="M:Api.Modules.VersionControl.Controllers.VersionControlController.AddCommentToReviewAsync(System.Int32,System.String)">
            <summary>
            Add a comment to an existing review.
            </summary>
            <param name="reviewId">The ID of the review to add the comment to.</param>
            <param name="comment">The text of the comment to add.</param>
            <returns>The newly added <see cref="T:Api.Modules.VersionControl.Models.ReviewCommentModel"/>.</returns>
        </member>
        <member name="M:Api.Modules.VersionControl.Controllers.VersionControlController.ApproveReviewAsync(System.Int32)">
            <summary>
            Approves a commit.
            </summary>
            <param name="reviewId">The ID of the review.</param>
        </member>
        <member name="M:Api.Modules.VersionControl.Controllers.VersionControlController.ReviewRequestChangesAsync(System.Int32)">
            <summary>
            Denies a commit, the owner needs to make some changes before it can be approved.
            </summary>
            <param name="reviewId">The ID of the review.</param>
        </member>
        <member name="T:Api.Modules.VersionControl.Enums.ReviewStatuses">
            <summary>
            An enumeration with all possible statuses for a code review.
            </summary>
        </member>
        <member name="F:Api.Modules.VersionControl.Enums.ReviewStatuses.None">
            <summary>
            No review has been requested.
            </summary>
        </member>
        <member name="F:Api.Modules.VersionControl.Enums.ReviewStatuses.Pending">
            <summary>
            The changes are still waiting for someone to review it.
            </summary>
        </member>
        <member name="F:Api.Modules.VersionControl.Enums.ReviewStatuses.Approved">
            <summary>
            The changes have been approved.
            </summary>
        </member>
        <member name="F:Api.Modules.VersionControl.Enums.ReviewStatuses.RequestChanges">
            <summary>
            The reviewer requested changes to be made.
            </summary>
        </member>
        <member name="T:Api.Modules.VersionControl.Interfaces.DataLayer.ICommitDataService">
            <summary>
            Data service for handling data related to the commit items in the version control model.
            </summary>
        </member>
        <member name="M:Api.Modules.VersionControl.Interfaces.DataLayer.ICommitDataService.GetCommitAsync(System.Int32)">
            <summary>
            Gets a single commit.
            </summary>
            <param name="id">The ID of the commit.</param>
            <returns>A <see cref="T:Api.Modules.VersionControl.Models.CommitModel"/> with the result.</returns>
        </member>
        <member name="M:Api.Modules.VersionControl.Interfaces.DataLayer.ICommitDataService.CreateCommitAsync(Api.Modules.VersionControl.Models.CommitModel)">
            <summary>
            Creates new commit item in the database.
            </summary>
            <param name="data">The data for the commit.</param>
            <returns>Returns a model of the commit.</returns>
        </member>
        <member name="M:Api.Modules.VersionControl.Interfaces.DataLayer.ICommitDataService.LogDeploymentOfCommitAsync(System.Int32,GeeksCoreLibrary.Core.Enums.Environments,System.String)">
            <summary>
            Deploy a commit to an environment. This will only mark the commit as deployed, it will not actually deploy the commit.
            </summary>
            <param name="id">The ID of the commit to deploy.</param>
            <param name="environment">The environment to deploy to. The commit will always also be deployed to lower environments, so if you deploy to acceptance for example, it will also be deployed to development and test, if it wasn't already.</param>
            <param name="username">The name of the user that deployed the commit.</param>
        </member>
        <member name="M:Api.Modules.VersionControl.Interfaces.DataLayer.ICommitDataService.GetTemplatesToCommitAsync">
            <summary>
            Get all templates that have uncommitted changes.
            </summary>
        </member>
        <member name="M:Api.Modules.VersionControl.Interfaces.DataLayer.ICommitDataService.GetDynamicContentsToCommitAsync">
            <summary>
            Get all dynamic contents that have uncommitted changes.
            </summary>
        </member>
        <member name="M:Api.Modules.VersionControl.Interfaces.DataLayer.ICommitDataService.GetCommitHistoryAsync(System.Boolean,System.Boolean)">
            <summary>
            Get the history of commits. You must set at least one of the parameters to true.
            </summary>
            <param name="includeCompleted">Whether to include completed commits.</param>
            <param name="includeIncompleted">Whether to include commits that haven't been completed yet.</param>
            <returns>A list of <see cref="T:Api.Modules.VersionControl.Models.CommitModel"/>.</returns>
        </member>
        <member name="T:Api.Modules.VersionControl.Interfaces.DataLayer.IReviewDataService">
            <summary>
            Data service for handling code reviews on commits;
            </summary>
        </member>
        <member name="M:Api.Modules.VersionControl.Interfaces.DataLayer.IReviewDataService.GetAsync(System.Boolean,System.Int64)">
            <summary>
            Gets all reviews.
            </summary>
            <param name="hideApprovedReviews">Optional: Whether to only get reviews that haven't been approved yet. Default is true.</param>
            <param name="userId">Optional: If you only want reviews that are waiting on a specific user, enter the ID of that user here. Negative numbers for admin accounts.</param>
            <returns>A list with all (not approved) reviews.</returns>
        </member>
        <member name="M:Api.Modules.VersionControl.Interfaces.DataLayer.IReviewDataService.GetAsync(System.Int32,System.Boolean)">
            <summary>
            Gets a single review.
            </summary>
            <param name="id">The ID of the review to get.</param>
            <param name="includeComments">Optional: Whether to include all the comments of the review. Default is true.</param>
            <returns>The <see cref="T:Api.Modules.VersionControl.Models.ReviewModel"/>.</returns>
        </member>
        <member name="M:Api.Modules.VersionControl.Interfaces.DataLayer.IReviewDataService.SaveReviewAsync(Api.Modules.VersionControl.Models.ReviewModel)">
            <summary>
            Saves a review to the database. This can create a new review request, or update an existing review with the a new status.
            </summary>
            <param name="review">The requested review.</param>
            <returns>The requested review with the new ID.</returns>
        </member>
        <member name="M:Api.Modules.VersionControl.Interfaces.DataLayer.IReviewDataService.AddOrUpdateCommentAsync(Api.Modules.VersionControl.Models.ReviewCommentModel)">
            <summary>
            Adds a comment to an existing review.
            </summary>
            <param name="comment">The comment to add.</param>
        </member>
        <member name="T:Api.Modules.VersionControl.Interfaces.DataLayer.IVersionControlDataService">
            <summary>
            Data service for handeling general data of the version control model.
            </summary>
        </member>
        <member name="M:Api.Modules.VersionControl.Interfaces.DataLayer.IVersionControlDataService.GetPublishedTemplateIdAndVersionAsync">
            <summary>
            Gets all the published templates.
            </summary>
            <returns>Returns a dictionary with all the templates that are currently published. The first value will be the template id and the second one is the version.</returns>
        </member>
        <member name="M:Api.Modules.VersionControl.Interfaces.DataLayer.IVersionControlDataService.CreatePublishLog(System.Int32,System.Int32)">
            <summary>
            Creates a log with the changes made to the template.
            </summary>
            <param name="templateId">The id of the template.</param>
            <param name="version">The version of the template.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.VersionControl.Interfaces.DataLayer.IVersionControlDataService.GetTemplatesFromCommitAsync(System.Int32)">
            <summary>
            Gets all the templates from a specific commit.
            </summary>
            <param name="commitId">The id of the commit.</param>
            <returns>Returns a list with templates.</returns>
        </member>
        <member name="M:Api.Modules.VersionControl.Interfaces.DataLayer.IVersionControlDataService.GetDynamicContentFromCommitAsync(System.Int32)">
            <summary>
            Gets the dynamic content items from the given commit.
            </summary>
            <param name="commitId">The id of the commit.</param>
            <returns>Returns a list of dynamic contnet items.</returns>
        </member>
        <member name="T:Api.Modules.VersionControl.Interfaces.ICommitService">
            <summary>
            A service for handling data related to the commit items in the version control model.
            </summary>
        </member>
        <member name="M:Api.Modules.VersionControl.Interfaces.ICommitService.CreateAndOrDeployCommitAsync(Api.Modules.VersionControl.Models.CommitModel,System.Security.Claims.ClaimsIdentity)">
            <summary>
            Creates new commit item in the database.
            </summary>
            <param name="data">The data of the commit</param>
            <param name="identity">The authenticated user data.</param>
            <returns>Returns a model of the commit.</returns>
        </member>
        <member name="M:Api.Modules.VersionControl.Interfaces.ICommitService.DeployCommitsAsync(Api.Modules.VersionControl.Models.DeployCommitsRequestModel,System.Security.Claims.ClaimsIdentity)">
            <summary>
            Deploys one or more commits to an environment.
            </summary>
            <param name="data">The environment and commit IDs.</param>
            <param name="identity">The authenticated user data.</param>
        </member>
        <member name="M:Api.Modules.VersionControl.Interfaces.ICommitService.LogDeploymentOfCommitAsync(System.Int32,GeeksCoreLibrary.Core.Enums.Environments,System.Security.Claims.ClaimsIdentity)">
            <summary>
            Deploy a commit to an environment. This will only mark the commit as deployed, it will not actually deploy the commit.
            </summary>
            <param name="id">The ID of the commit to deploy.</param>
            <param name="environment">The environment to deploy to. The commit will always also be deployed to lower environments, so if you deploy to acceptance for example, it will also be deployed to development and test, if it wasn't already.</param>
            <param name="identity">The authenticated user data.</param>
        </member>
        <member name="M:Api.Modules.VersionControl.Interfaces.ICommitService.GetTemplatesToCommitAsync">
            <summary>
            Get all templates that have uncommitted changes.
            </summary>
        </member>
        <member name="M:Api.Modules.VersionControl.Interfaces.ICommitService.GetDynamicContentsToCommitAsync">
            <summary>
            Get all dynamic content that have uncommitted changes.
            </summary>
            <returns>A list of <see cref="T:Api.Modules.VersionControl.Models.DynamicContentCommitModel"/>.</returns>
        </member>
        <member name="M:Api.Modules.VersionControl.Interfaces.ICommitService.GetCommitHistoryAsync(System.Boolean,System.Boolean)">
            <summary>
            Get the history of commits. You must set at least one of the parameters to true.
            </summary>
            <param name="includeCompleted">Whether to include completed commits.</param>
            <param name="includeIncompleted">Whether to include commits that haven't been completed yet.</param>
            <returns>A list of <see cref="T:Api.Modules.VersionControl.Models.CommitModel"/>.</returns>
        </member>
        <member name="T:Api.Modules.VersionControl.Interfaces.IReviewService">
            <summary>
            A service for handling code reviews on commits and getting data for reviews.
            </summary>
        </member>
        <member name="M:Api.Modules.VersionControl.Interfaces.IReviewService.GetAsync(System.Security.Claims.ClaimsIdentity,System.Boolean,System.Boolean)">
            <summary>
            Gets all reviews.
            </summary>
            <param name="identity">The authenticated user data.</param>
            <param name="hideApprovedReviews">Optional: Whether to only get reviews that haven't been approved yet. Default is true.</param>
            <param name="getReviewsForCurrentUserOnly">Optional: Whether to only get reviews that have been assigned to the current user.</param>
            <returns>A list with all (not approved) reviews.</returns>
        </member>
        <member name="M:Api.Modules.VersionControl.Interfaces.IReviewService.RequestReviewForCommitAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.Collections.Generic.List{Api.Modules.Items.Models.FlatItemModel})">
            <summary>
            Request certain users to do a code review for a specific commit.
            </summary>
            <param name="identity">The authenticated user data.</param>
            <param name="commitId">The ID of the commit to request the review for.</param>
            <param name="requestedUsers">The list of users that are requested to do the code review.</param>
            <returns>A <see cref="T:Api.Modules.VersionControl.Models.ReviewModel"/> with the saved data for the code review.</returns>
        </member>
        <member name="M:Api.Modules.VersionControl.Interfaces.IReviewService.AddCommentAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.String)">
            <summary>
            Add a comment to an existing review.
            </summary>
            <param name="identity">The authenticated user data.</param>
            <param name="reviewId">The ID of the review to add the comment to.</param>
            <param name="comment">The text of the comment to add.</param>
            <returns>The newly added <see cref="T:Api.Modules.VersionControl.Models.ReviewCommentModel"/>.</returns>
        </member>
        <member name="M:Api.Modules.VersionControl.Interfaces.IReviewService.UpdateReviewStatusAsync(System.Security.Claims.ClaimsIdentity,System.Int32,Api.Modules.VersionControl.Enums.ReviewStatuses)">
            <summary>
            Updates the status of a review.
            </summary>
            <param name="identity">The authenticated user data.</param>
            <param name="id">The ID of the review.</param>
            <param name="newStatus">The new status for the review.</param>
            <returns></returns>
        </member>
        <member name="T:Api.Modules.VersionControl.Interfaces.IVersionControlService">
            <summary>
            A service for handeling general data of the version control model.
            </summary>
        </member>
        <member name="M:Api.Modules.VersionControl.Interfaces.IVersionControlService.GetPublishedTemplateIdAndVersionAsync">
            <summary>
            Gets all the published templates.
            </summary>
            <returns>Returns a dictionary with all the templates that are currently published. The first value will be the template id and the second one is the version.</returns>
        </member>
        <member name="M:Api.Modules.VersionControl.Interfaces.IVersionControlService.CreatePublishLogAsync(System.Int32,System.Int32)">
            <summary>
            Creates a log with the changes made to the template.
            </summary>
            <param name="templateId">The id of the template.</param>
            <param name="version">The version of the template.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Modules.VersionControl.Interfaces.IVersionControlService.GetTemplatesFromCommitAsync(System.Int32)">
            <summary>
            Gets all the templates from a specific commit.
            </summary>
            <param name="commitId">The id of the commit.</param>
            <returns>Returns a list with templates.</returns>
        </member>
        <member name="M:Api.Modules.VersionControl.Interfaces.IVersionControlService.GetDynamicContentFromCommitAsync(System.Int32)">
            <summary>
            Gets the dynamic content items from the given commit.
            </summary>
            <param name="commitId">The id of the commit.</param>
            <returns>Returns a list of dynamic contnet items.</returns>
        </member>
        <member name="M:Api.Modules.VersionControl.Interfaces.IVersionControlService.DeployToBranchAsync(System.Security.Claims.ClaimsIdentity,System.Collections.Generic.List{System.Int32},System.Int32,System.Boolean)">
            <summary>
            Deploy one or more commits to a branch.
            </summary>
            <param name="identity">The <see cref="T:System.Security.Claims.ClaimsIdentity"/> of the authenticated user.</param>
            <param name="commitIds">The IDs of the commits to deploy.</param>
            <param name="branchId">The ID of the branch to deploy to.</param>
            <param name="useTransaction">Optional: Whether to use a database transaction. Set to <see langword="false"/> when you call this via a method that already started it's own transaction. Default value is <see langword="true"/>.</param>
        </member>
        <member name="T:Api.Modules.VersionControl.Models.CommitModel">
            <summary>
            A model used for creating a new commit.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.CommitModel.Id">
            <summary>
            Gets or sets the id of the commit.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.CommitModel.Description">
            <summary>
            Gets or sets the description of the commit.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.CommitModel.ExternalId">
            <summary>
            Gets or sets the external ID. This can be used to link a commit to a task/project from an external system, such as Jira or Asana.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.CommitModel.AddedOn">
            <summary>
            Gets or sets the time that the commit was added.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.CommitModel.AddedBy">
            <summary>
            Gets or sets the user that added the commit.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.CommitModel.Templates">
            <summary>
            Gets or sets the templates that are part of this commit.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.CommitModel.DynamicContents">
            <summary>
            Gets or sets the dynamic contents that are part of this commit.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.CommitModel.Environment">
            <summary>
            Gets or sets the environment to commit this.
            Any 'lower' environments will be automatically committed. So if it's set to live, then it will also be committed to acceptance and test.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.CommitModel.DeployedToDevelopmentOn">
            <summary>
            Gets or sets the time that this commit was deployed to development.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.CommitModel.DeployedToDevelopmentBy">
            <summary>
            Gets or sets the name of the user that deployed this commit to development.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.CommitModel.DeployedToTestOn">
            <summary>
            Gets or sets the time that this commit was deployed to test.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.CommitModel.DeployedToTestBy">
            <summary>
            Gets or sets the name of the user that deployed this commit to test.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.CommitModel.DeployedToAcceptanceOn">
            <summary>
            Gets or sets the time that this commit was deployed to acceptance.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.CommitModel.DeployedToAcceptanceBy">
            <summary>
            Gets or sets the name of the user that deployed this commit to acceptance.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.CommitModel.DeployedToLiveOn">
            <summary>
            Gets or sets the time that this commit was deployed to live.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.CommitModel.DeployedToLiveBy">
            <summary>
            Gets or sets the name of the user that deployed this commit to live.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.CommitModel.Completed">
            <summary>
            Gets or sets whether the commit has been completed.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.CommitModel.IsTest">
            <summary>
            Gets whether this commit has been fully deployed to test.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.CommitModel.IsAcceptance">
            <summary>
            Gets whether this commit has been fully deployed to test.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.CommitModel.IsLive">
            <summary>
            Gets whether this commit has been fully deployed to test.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.CommitModel.ReviewRequestedUsers">
            <summary>
            Gets or sets the users that have been requested to do a code review for this commit.
            Note: Users with a negative ID are admins from the main Wiser database, others are normal users from the tenant.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.CommitModel.Review">
            <summary>
            Gets or sets the review status.
            </summary>
        </member>
        <member name="T:Api.Modules.VersionControl.Models.DeployCommitsRequestModel">
            <summary>
            A model used for deploying multiple commits to a specici environment.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.DeployCommitsRequestModel.Environment">
            <summary>
            Gets or sets the environment to deploy to.
            Any 'lower' environments will be automatically committed. So if it's set to live, then it will also be committed to acceptance and test.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.DeployCommitsRequestModel.CommitIds">
            <summary>
            Gets or sets the IDs of the commits to deploy.
            </summary>
        </member>
        <member name="T:Api.Modules.VersionControl.Models.DynamicContentCommitModel">
            <summary>
            A model that represents a connection between a dynamic content and a commit, or a dynamic content that still needs to be committed.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.DynamicContentCommitModel.CommitId">
            <summary>
            The id of the commit.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.DynamicContentCommitModel.DynamicContentId">
            <summary>
            The id of the dynamic content.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.DynamicContentCommitModel.Version">
            <summary>
            The version of the dynamic content.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.DynamicContentCommitModel.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.DynamicContentCommitModel.Component">
            <summary>
            Gets or sets the component type.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.DynamicContentCommitModel.ComponentMode">
            <summary>
            Gets or sets the component mode.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.DynamicContentCommitModel.ChangedOn">
            <summary>
            The date The commit was added on.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.DynamicContentCommitModel.ChangedBy">
            <summary>
            Gets or sets the name of the user that made the last change.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.DynamicContentCommitModel.IsLive">
            <summary>
            Bool if the content is on the live environment.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.DynamicContentCommitModel.IsAcceptance">
            <summary>
            Bool if the content is on the acceptance environment.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.DynamicContentCommitModel.IsTest">
            <summary>
            Bool if the content is on the test environment.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.DynamicContentCommitModel.VersionTest">
            <summary>
            Gets or sets the version that is currently published to test.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.DynamicContentCommitModel.VersionAcceptance">
            <summary>
            Gets or sets the version that is currently published to acceptance.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.DynamicContentCommitModel.VersionLive">
            <summary>
            Gets or sets the version that is currently published to live/production.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.DynamicContentCommitModel.TemplateIds">
            <summary>
            Gets or sets the IDs of the templates that this content is linked to.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.DynamicContentCommitModel.TemplateNames">
            <summary>
            Gets or sets the names of the templates that this content is linked to.
            </summary>
        </member>
        <member name="T:Api.Modules.VersionControl.Models.ReviewCommentModel">
            <summary>
            A model for storing data of a comment on a code review.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.ReviewCommentModel.Id">
            <summary>
            Gets or sets the ID.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.ReviewCommentModel.ReviewId">
            <summary>
            Gets or sets the ID of the review that this comment is placed on.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.ReviewCommentModel.AddedOn">
            <summary>
            Gets or sets the date and time that the comment was placed.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.ReviewCommentModel.AddedBy">
            <summary>
            Gets or sets the ID of the user that placed the comment.
            Note: Users with a negative ID are admins from the main Wiser database, others are normal users from the tenant.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.ReviewCommentModel.AddedByName">
            <summary>
            Gets or sets the name of the user that placed the comment.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.ReviewCommentModel.Text">
            <summary>
            Gets or sets the contents of the comment.
            </summary>
        </member>
        <member name="T:Api.Modules.VersionControl.Models.ReviewModel">
            <summary>
            A model for storing data about a code review for the version control and templates modules.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.ReviewModel.Id">
            <summary>
            Gets or sets the ID.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.ReviewModel.RequestedOn">
            <summary>
            Gets or sets the date and time that the review was requested.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.ReviewModel.RequestedBy">
            <summary>
            Gets or sets the ID of the user that requested this review.
            Note: Users with a negative ID are admins from the main Wiser database, others are normal users from the tenant.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.ReviewModel.RequestedByName">
            <summary>
            Gets or sets the name of the user that requested this review.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.ReviewModel.ReviewedOn">
            <summary>
            Gets or sets the date and time that the commit has been reviewed.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.ReviewModel.ReviewedBy">
            <summary>
            Gets or sets the ID of the user that did the review.
            Note: Users with a negative ID are admins from the main Wiser database, others are normal users from the tenant.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.ReviewModel.ReviewedByName">
            <summary>
            Gets or sets the name of the user that did the review.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.ReviewModel.Status">
            <summary>
            Gets or sets the status.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.ReviewModel.RequestedUsers">
            <summary>
            Gets or sets the users that have been requested to do the code review.
            Note: Users with a negative ID are admins from the main Wiser database, others are normal users from the tenant.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.ReviewModel.Comments">
            <summary>
            Gets or sets the comments that have been placed on this review.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.ReviewModel.CommitId">
            <summary>
            Gets or sets the ID of the commit that this review is meant for.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.ReviewModel.Commit">
            <summary>
            Gets or sets the commit that this review is meant for.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.ReviewModel.CommitDescription">
            <summary>
            Gets or sets the description of the commit.
            </summary>
        </member>
        <member name="T:Api.Modules.VersionControl.Models.TemplateCommitModel">
            <summary>
            Model which represents a template linked to a commit, or a template that still needs to be committed.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.TemplateCommitModel.CommitId">
            <summary>
            The id of the commit.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.TemplateCommitModel.TemplateId">
            <summary>
            The id of the template.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.TemplateCommitModel.Version">
            <summary>
            The latest version of the template.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.TemplateCommitModel.Environment">
            <summary>
            The environment of the template.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.TemplateCommitModel.IsLive">
            <summary>
            Bool if the template is on the live environment.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.TemplateCommitModel.IsAcceptance">
            <summary>
            Bool if the template is on the acceptance environment.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.TemplateCommitModel.IsTest">
            <summary>
            Bool if the template is on the test environment.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.TemplateCommitModel.TemplateType">
            <summary>
            Gets or sets the template type.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.TemplateCommitModel.TemplateParentId">
            <summary>
            Gets or sets the parent ID of the template.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.TemplateCommitModel.TemplateParentName">
            <summary>
            Gets or sets the parent name of the template.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.TemplateCommitModel.TemplateName">
            <summary>
            Gets or sets the name of the template.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.TemplateCommitModel.VersionTest">
            <summary>
            Gets or sets the version that is currently published to test.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.TemplateCommitModel.VersionAcceptance">
            <summary>
            Gets or sets the version that is currently published to acceptance.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.TemplateCommitModel.VersionLive">
            <summary>
            Gets or sets the version that is currently published to live/production.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.TemplateCommitModel.ChangedOn">
            <summary>
            Gets or sets the date and time that the commit was done.
            </summary>
        </member>
        <member name="P:Api.Modules.VersionControl.Models.TemplateCommitModel.ChangedBy">
            <summary>
            Gets or sets the name of the user that made the commit.
            </summary>
        </member>
        <member name="T:Api.Modules.VersionControl.Services.CommitService">
            <inheritdoc cref="T:Api.Modules.VersionControl.Interfaces.ICommitService" />
        </member>
        <member name="M:Api.Modules.VersionControl.Services.CommitService.#ctor(Api.Modules.VersionControl.Interfaces.DataLayer.ICommitDataService,Api.Modules.Templates.Interfaces.ITemplatesService,Api.Modules.Templates.Interfaces.IDynamicContentService,GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection,GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseHelpersService,Api.Modules.Branches.Interfaces.IBranchesService,Api.Modules.VersionControl.Interfaces.IVersionControlService,Microsoft.Extensions.Logging.ILogger{Api.Modules.VersionControl.Services.CommitService},Api.Modules.VersionControl.Interfaces.IReviewService)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.VersionControl.Services.CommitService"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.VersionControl.Services.CommitService.CreateAndOrDeployCommitAsync(Api.Modules.VersionControl.Models.CommitModel,System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.VersionControl.Services.CommitService.DeployCommitsAsync(Api.Modules.VersionControl.Models.DeployCommitsRequestModel,System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.VersionControl.Services.CommitService.LogDeploymentOfCommitAsync(System.Int32,GeeksCoreLibrary.Core.Enums.Environments,System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.VersionControl.Services.CommitService.GetTemplatesToCommitAsync">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.VersionControl.Services.CommitService.GetDynamicContentsToCommitAsync">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.VersionControl.Services.CommitService.GetCommitHistoryAsync(System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.VersionControl.Services.DataLayer.CommitDataService">
            <inheritdoc cref="T:Api.Modules.VersionControl.Interfaces.DataLayer.ICommitDataService" />
        </member>
        <member name="M:Api.Modules.VersionControl.Services.DataLayer.CommitDataService.#ctor(GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.VersionControl.Services.DataLayer.CommitDataService"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.VersionControl.Services.DataLayer.CommitDataService.GetCommitAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.VersionControl.Services.DataLayer.CommitDataService.CreateCommitAsync(Api.Modules.VersionControl.Models.CommitModel)">
            <inheritdoc/>
        </member>
        <member name="M:Api.Modules.VersionControl.Services.DataLayer.CommitDataService.LogDeploymentOfCommitAsync(System.Int32,GeeksCoreLibrary.Core.Enums.Environments,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Api.Modules.VersionControl.Services.DataLayer.CommitDataService.GetTemplatesToCommitAsync">
            <inheritdoc/>
        </member>
        <member name="M:Api.Modules.VersionControl.Services.DataLayer.CommitDataService.GetDynamicContentsToCommitAsync">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.VersionControl.Services.DataLayer.CommitDataService.GetCommitHistoryAsync(System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.VersionControl.Services.DataLayer.ReviewDataService">
            <inheritdoc cref="T:Api.Modules.VersionControl.Interfaces.DataLayer.IReviewDataService" />
        </member>
        <member name="M:Api.Modules.VersionControl.Services.DataLayer.ReviewDataService.#ctor(GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection,GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseHelpersService,Api.Modules.VersionControl.Interfaces.DataLayer.ICommitDataService)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.VersionControl.Services.DataLayer.ReviewDataService"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.VersionControl.Services.DataLayer.ReviewDataService.GetAsync(System.Boolean,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.VersionControl.Services.DataLayer.ReviewDataService.GetAsync(System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.VersionControl.Services.DataLayer.ReviewDataService.SaveReviewAsync(Api.Modules.VersionControl.Models.ReviewModel)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.VersionControl.Services.DataLayer.ReviewDataService.AddOrUpdateCommentAsync(Api.Modules.VersionControl.Models.ReviewCommentModel)">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.VersionControl.Services.DataLayer.VersionControlDataService">
            <inheritdoc cref="T:Api.Modules.VersionControl.Interfaces.DataLayer.IVersionControlDataService" />
        </member>
        <member name="M:Api.Modules.VersionControl.Services.DataLayer.VersionControlDataService.#ctor(GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.VersionControl.Services.DataLayer.VersionControlDataService"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.VersionControl.Services.DataLayer.VersionControlDataService.GetPublishedTemplateIdAndVersionAsync">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.VersionControl.Services.DataLayer.VersionControlDataService.CreatePublishLog(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.VersionControl.Services.DataLayer.VersionControlDataService.GetTemplatesFromCommitAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.VersionControl.Services.DataLayer.VersionControlDataService.GetDynamicContentFromCommitAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.VersionControl.Services.ReviewService">
            <inheritdoc cref="T:Api.Modules.VersionControl.Interfaces.IReviewService" />
        </member>
        <member name="M:Api.Modules.VersionControl.Services.ReviewService.#ctor(Api.Modules.VersionControl.Interfaces.DataLayer.IReviewDataService)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.VersionControl.Services.ReviewService"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.VersionControl.Services.ReviewService.GetAsync(System.Security.Claims.ClaimsIdentity,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.VersionControl.Services.ReviewService.RequestReviewForCommitAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.Collections.Generic.List{Api.Modules.Items.Models.FlatItemModel})">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.VersionControl.Services.ReviewService.AddCommentAsync(System.Security.Claims.ClaimsIdentity,System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.VersionControl.Services.ReviewService.UpdateReviewStatusAsync(System.Security.Claims.ClaimsIdentity,System.Int32,Api.Modules.VersionControl.Enums.ReviewStatuses)">
            <inheritdoc />
        </member>
        <member name="T:Api.Modules.VersionControl.Services.VersionControlService">
            <inheritdoc cref="T:Api.Modules.VersionControl.Interfaces.IVersionControlService" />
        </member>
        <member name="M:Api.Modules.VersionControl.Services.VersionControlService.#ctor(Api.Modules.VersionControl.Interfaces.DataLayer.IVersionControlDataService,Api.Modules.Branches.Interfaces.IBranchesService,Api.Modules.Customers.Interfaces.IWiserCustomersService,Api.Modules.Templates.Interfaces.ITemplatesService,Api.Modules.Templates.Interfaces.IDynamicContentService,GeeksCoreLibrary.Modules.Databases.Interfaces.IDatabaseConnection)">
            <summary>
            Creates a new instance of <see cref="T:Api.Modules.VersionControl.Services.VersionControlService"/>.
            </summary>
        </member>
        <member name="M:Api.Modules.VersionControl.Services.VersionControlService.GetPublishedTemplateIdAndVersionAsync">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.VersionControl.Services.VersionControlService.CreatePublishLogAsync(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.VersionControl.Services.VersionControlService.GetTemplatesFromCommitAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.VersionControl.Services.VersionControlService.GetDynamicContentFromCommitAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Api.Modules.VersionControl.Services.VersionControlService.DeployToBranchAsync(System.Security.Claims.ClaimsIdentity,System.Collections.Generic.List{System.Int32},System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Api.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            </summary>
            <param name="services"></param>
        </member>
    </members>
</doc>
